
/**
 * Client
**/

import * as runtime from './runtime/binary.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = $Result.DefaultSelection<Prisma.$VerificationTokenPayload>
/**
 * Model EventPublishProvider
 * 
 */
export type EventPublishProvider = $Result.DefaultSelection<Prisma.$EventPublishProviderPayload>
/**
 * Model Campaign
 * 
 */
export type Campaign = $Result.DefaultSelection<Prisma.$CampaignPayload>
/**
 * Model UserCampaign
 * 
 */
export type UserCampaign = $Result.DefaultSelection<Prisma.$UserCampaignPayload>
/**
 * Model EventTemplate
 * 
 */
export type EventTemplate = $Result.DefaultSelection<Prisma.$EventTemplatePayload>
/**
 * Model Event
 * 
 */
export type Event = $Result.DefaultSelection<Prisma.$EventPayload>
/**
 * Model StaticMap
 * 
 */
export type StaticMap = $Result.DefaultSelection<Prisma.$StaticMapPayload>
/**
 * Model NodeType
 * 
 */
export type NodeType = $Result.DefaultSelection<Prisma.$NodeTypePayload>
/**
 * Model Attribute
 * 
 */
export type Attribute = $Result.DefaultSelection<Prisma.$AttributePayload>
/**
 * Model Node
 * 
 */
export type Node = $Result.DefaultSelection<Prisma.$NodePayload>
/**
 * Model MapNode
 * 
 */
export type MapNode = $Result.DefaultSelection<Prisma.$MapNodePayload>
/**
 * Model NodeRelationship
 * 
 */
export type NodeRelationship = $Result.DefaultSelection<Prisma.$NodeRelationshipPayload>
/**
 * Model SessionRecap
 * 
 */
export type SessionRecap = $Result.DefaultSelection<Prisma.$SessionRecapPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Accounts
 * const accounts = await prisma.account.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Accounts
   * const accounts = await prisma.account.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => $Utils.JsPromise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.eventPublishProvider`: Exposes CRUD operations for the **EventPublishProvider** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventPublishProviders
    * const eventPublishProviders = await prisma.eventPublishProvider.findMany()
    * ```
    */
  get eventPublishProvider(): Prisma.EventPublishProviderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.campaign`: Exposes CRUD operations for the **Campaign** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Campaigns
    * const campaigns = await prisma.campaign.findMany()
    * ```
    */
  get campaign(): Prisma.CampaignDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userCampaign`: Exposes CRUD operations for the **UserCampaign** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserCampaigns
    * const userCampaigns = await prisma.userCampaign.findMany()
    * ```
    */
  get userCampaign(): Prisma.UserCampaignDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.eventTemplate`: Exposes CRUD operations for the **EventTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventTemplates
    * const eventTemplates = await prisma.eventTemplate.findMany()
    * ```
    */
  get eventTemplate(): Prisma.EventTemplateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.staticMap`: Exposes CRUD operations for the **StaticMap** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StaticMaps
    * const staticMaps = await prisma.staticMap.findMany()
    * ```
    */
  get staticMap(): Prisma.StaticMapDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.nodeType`: Exposes CRUD operations for the **NodeType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NodeTypes
    * const nodeTypes = await prisma.nodeType.findMany()
    * ```
    */
  get nodeType(): Prisma.NodeTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.attribute`: Exposes CRUD operations for the **Attribute** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attributes
    * const attributes = await prisma.attribute.findMany()
    * ```
    */
  get attribute(): Prisma.AttributeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.node`: Exposes CRUD operations for the **Node** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Nodes
    * const nodes = await prisma.node.findMany()
    * ```
    */
  get node(): Prisma.NodeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.mapNode`: Exposes CRUD operations for the **MapNode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MapNodes
    * const mapNodes = await prisma.mapNode.findMany()
    * ```
    */
  get mapNode(): Prisma.MapNodeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.nodeRelationship`: Exposes CRUD operations for the **NodeRelationship** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NodeRelationships
    * const nodeRelationships = await prisma.nodeRelationship.findMany()
    * ```
    */
  get nodeRelationship(): Prisma.NodeRelationshipDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sessionRecap`: Exposes CRUD operations for the **SessionRecap** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SessionRecaps
    * const sessionRecaps = await prisma.sessionRecap.findMany()
    * ```
    */
  get sessionRecap(): Prisma.SessionRecapDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.2.1
   * Query Engine version: 4123509d24aa4dede1e864b46351bf2790323b69
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Account: 'Account',
    Session: 'Session',
    User: 'User',
    VerificationToken: 'VerificationToken',
    EventPublishProvider: 'EventPublishProvider',
    Campaign: 'Campaign',
    UserCampaign: 'UserCampaign',
    EventTemplate: 'EventTemplate',
    Event: 'Event',
    StaticMap: 'StaticMap',
    NodeType: 'NodeType',
    Attribute: 'Attribute',
    Node: 'Node',
    MapNode: 'MapNode',
    NodeRelationship: 'NodeRelationship',
    SessionRecap: 'SessionRecap'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "account" | "session" | "user" | "verificationToken" | "eventPublishProvider" | "campaign" | "userCampaign" | "eventTemplate" | "event" | "staticMap" | "nodeType" | "attribute" | "node" | "mapNode" | "nodeRelationship" | "sessionRecap"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: Prisma.$VerificationTokenPayload<ExtArgs>
        fields: Prisma.VerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VerificationTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
      EventPublishProvider: {
        payload: Prisma.$EventPublishProviderPayload<ExtArgs>
        fields: Prisma.EventPublishProviderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventPublishProviderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPublishProviderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventPublishProviderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPublishProviderPayload>
          }
          findFirst: {
            args: Prisma.EventPublishProviderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPublishProviderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventPublishProviderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPublishProviderPayload>
          }
          findMany: {
            args: Prisma.EventPublishProviderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPublishProviderPayload>[]
          }
          create: {
            args: Prisma.EventPublishProviderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPublishProviderPayload>
          }
          createMany: {
            args: Prisma.EventPublishProviderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventPublishProviderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPublishProviderPayload>[]
          }
          delete: {
            args: Prisma.EventPublishProviderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPublishProviderPayload>
          }
          update: {
            args: Prisma.EventPublishProviderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPublishProviderPayload>
          }
          deleteMany: {
            args: Prisma.EventPublishProviderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventPublishProviderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EventPublishProviderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPublishProviderPayload>[]
          }
          upsert: {
            args: Prisma.EventPublishProviderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPublishProviderPayload>
          }
          aggregate: {
            args: Prisma.EventPublishProviderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEventPublishProvider>
          }
          groupBy: {
            args: Prisma.EventPublishProviderGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventPublishProviderGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventPublishProviderCountArgs<ExtArgs>
            result: $Utils.Optional<EventPublishProviderCountAggregateOutputType> | number
          }
        }
      }
      Campaign: {
        payload: Prisma.$CampaignPayload<ExtArgs>
        fields: Prisma.CampaignFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CampaignFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CampaignFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          findFirst: {
            args: Prisma.CampaignFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CampaignFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          findMany: {
            args: Prisma.CampaignFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>[]
          }
          create: {
            args: Prisma.CampaignCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          createMany: {
            args: Prisma.CampaignCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CampaignCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>[]
          }
          delete: {
            args: Prisma.CampaignDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          update: {
            args: Prisma.CampaignUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          deleteMany: {
            args: Prisma.CampaignDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CampaignUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CampaignUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>[]
          }
          upsert: {
            args: Prisma.CampaignUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          aggregate: {
            args: Prisma.CampaignAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCampaign>
          }
          groupBy: {
            args: Prisma.CampaignGroupByArgs<ExtArgs>
            result: $Utils.Optional<CampaignGroupByOutputType>[]
          }
          count: {
            args: Prisma.CampaignCountArgs<ExtArgs>
            result: $Utils.Optional<CampaignCountAggregateOutputType> | number
          }
        }
      }
      UserCampaign: {
        payload: Prisma.$UserCampaignPayload<ExtArgs>
        fields: Prisma.UserCampaignFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserCampaignFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCampaignPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserCampaignFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCampaignPayload>
          }
          findFirst: {
            args: Prisma.UserCampaignFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCampaignPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserCampaignFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCampaignPayload>
          }
          findMany: {
            args: Prisma.UserCampaignFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCampaignPayload>[]
          }
          create: {
            args: Prisma.UserCampaignCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCampaignPayload>
          }
          createMany: {
            args: Prisma.UserCampaignCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCampaignCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCampaignPayload>[]
          }
          delete: {
            args: Prisma.UserCampaignDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCampaignPayload>
          }
          update: {
            args: Prisma.UserCampaignUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCampaignPayload>
          }
          deleteMany: {
            args: Prisma.UserCampaignDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserCampaignUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserCampaignUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCampaignPayload>[]
          }
          upsert: {
            args: Prisma.UserCampaignUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCampaignPayload>
          }
          aggregate: {
            args: Prisma.UserCampaignAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserCampaign>
          }
          groupBy: {
            args: Prisma.UserCampaignGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserCampaignGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCampaignCountArgs<ExtArgs>
            result: $Utils.Optional<UserCampaignCountAggregateOutputType> | number
          }
        }
      }
      EventTemplate: {
        payload: Prisma.$EventTemplatePayload<ExtArgs>
        fields: Prisma.EventTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventTemplatePayload>
          }
          findFirst: {
            args: Prisma.EventTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventTemplatePayload>
          }
          findMany: {
            args: Prisma.EventTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventTemplatePayload>[]
          }
          create: {
            args: Prisma.EventTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventTemplatePayload>
          }
          createMany: {
            args: Prisma.EventTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventTemplatePayload>[]
          }
          delete: {
            args: Prisma.EventTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventTemplatePayload>
          }
          update: {
            args: Prisma.EventTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventTemplatePayload>
          }
          deleteMany: {
            args: Prisma.EventTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EventTemplateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventTemplatePayload>[]
          }
          upsert: {
            args: Prisma.EventTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventTemplatePayload>
          }
          aggregate: {
            args: Prisma.EventTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEventTemplate>
          }
          groupBy: {
            args: Prisma.EventTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<EventTemplateCountAggregateOutputType> | number
          }
        }
      }
      Event: {
        payload: Prisma.$EventPayload<ExtArgs>
        fields: Prisma.EventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EventUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
      StaticMap: {
        payload: Prisma.$StaticMapPayload<ExtArgs>
        fields: Prisma.StaticMapFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StaticMapFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaticMapPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StaticMapFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaticMapPayload>
          }
          findFirst: {
            args: Prisma.StaticMapFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaticMapPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StaticMapFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaticMapPayload>
          }
          findMany: {
            args: Prisma.StaticMapFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaticMapPayload>[]
          }
          create: {
            args: Prisma.StaticMapCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaticMapPayload>
          }
          createMany: {
            args: Prisma.StaticMapCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StaticMapCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaticMapPayload>[]
          }
          delete: {
            args: Prisma.StaticMapDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaticMapPayload>
          }
          update: {
            args: Prisma.StaticMapUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaticMapPayload>
          }
          deleteMany: {
            args: Prisma.StaticMapDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StaticMapUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StaticMapUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaticMapPayload>[]
          }
          upsert: {
            args: Prisma.StaticMapUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaticMapPayload>
          }
          aggregate: {
            args: Prisma.StaticMapAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStaticMap>
          }
          groupBy: {
            args: Prisma.StaticMapGroupByArgs<ExtArgs>
            result: $Utils.Optional<StaticMapGroupByOutputType>[]
          }
          count: {
            args: Prisma.StaticMapCountArgs<ExtArgs>
            result: $Utils.Optional<StaticMapCountAggregateOutputType> | number
          }
        }
      }
      NodeType: {
        payload: Prisma.$NodeTypePayload<ExtArgs>
        fields: Prisma.NodeTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NodeTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NodeTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeTypePayload>
          }
          findFirst: {
            args: Prisma.NodeTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NodeTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeTypePayload>
          }
          findMany: {
            args: Prisma.NodeTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeTypePayload>[]
          }
          create: {
            args: Prisma.NodeTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeTypePayload>
          }
          createMany: {
            args: Prisma.NodeTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NodeTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeTypePayload>[]
          }
          delete: {
            args: Prisma.NodeTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeTypePayload>
          }
          update: {
            args: Prisma.NodeTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeTypePayload>
          }
          deleteMany: {
            args: Prisma.NodeTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NodeTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NodeTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeTypePayload>[]
          }
          upsert: {
            args: Prisma.NodeTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeTypePayload>
          }
          aggregate: {
            args: Prisma.NodeTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNodeType>
          }
          groupBy: {
            args: Prisma.NodeTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<NodeTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.NodeTypeCountArgs<ExtArgs>
            result: $Utils.Optional<NodeTypeCountAggregateOutputType> | number
          }
        }
      }
      Attribute: {
        payload: Prisma.$AttributePayload<ExtArgs>
        fields: Prisma.AttributeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AttributeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AttributeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload>
          }
          findFirst: {
            args: Prisma.AttributeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AttributeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload>
          }
          findMany: {
            args: Prisma.AttributeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload>[]
          }
          create: {
            args: Prisma.AttributeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload>
          }
          createMany: {
            args: Prisma.AttributeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AttributeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload>[]
          }
          delete: {
            args: Prisma.AttributeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload>
          }
          update: {
            args: Prisma.AttributeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload>
          }
          deleteMany: {
            args: Prisma.AttributeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AttributeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AttributeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload>[]
          }
          upsert: {
            args: Prisma.AttributeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload>
          }
          aggregate: {
            args: Prisma.AttributeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttribute>
          }
          groupBy: {
            args: Prisma.AttributeGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttributeGroupByOutputType>[]
          }
          count: {
            args: Prisma.AttributeCountArgs<ExtArgs>
            result: $Utils.Optional<AttributeCountAggregateOutputType> | number
          }
        }
      }
      Node: {
        payload: Prisma.$NodePayload<ExtArgs>
        fields: Prisma.NodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NodeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NodeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodePayload>
          }
          findFirst: {
            args: Prisma.NodeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NodeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodePayload>
          }
          findMany: {
            args: Prisma.NodeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodePayload>[]
          }
          create: {
            args: Prisma.NodeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodePayload>
          }
          createMany: {
            args: Prisma.NodeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NodeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodePayload>[]
          }
          delete: {
            args: Prisma.NodeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodePayload>
          }
          update: {
            args: Prisma.NodeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodePayload>
          }
          deleteMany: {
            args: Prisma.NodeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NodeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NodeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodePayload>[]
          }
          upsert: {
            args: Prisma.NodeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodePayload>
          }
          aggregate: {
            args: Prisma.NodeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNode>
          }
          groupBy: {
            args: Prisma.NodeGroupByArgs<ExtArgs>
            result: $Utils.Optional<NodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.NodeCountArgs<ExtArgs>
            result: $Utils.Optional<NodeCountAggregateOutputType> | number
          }
        }
      }
      MapNode: {
        payload: Prisma.$MapNodePayload<ExtArgs>
        fields: Prisma.MapNodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MapNodeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MapNodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MapNodeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MapNodePayload>
          }
          findFirst: {
            args: Prisma.MapNodeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MapNodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MapNodeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MapNodePayload>
          }
          findMany: {
            args: Prisma.MapNodeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MapNodePayload>[]
          }
          create: {
            args: Prisma.MapNodeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MapNodePayload>
          }
          createMany: {
            args: Prisma.MapNodeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MapNodeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MapNodePayload>[]
          }
          delete: {
            args: Prisma.MapNodeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MapNodePayload>
          }
          update: {
            args: Prisma.MapNodeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MapNodePayload>
          }
          deleteMany: {
            args: Prisma.MapNodeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MapNodeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MapNodeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MapNodePayload>[]
          }
          upsert: {
            args: Prisma.MapNodeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MapNodePayload>
          }
          aggregate: {
            args: Prisma.MapNodeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMapNode>
          }
          groupBy: {
            args: Prisma.MapNodeGroupByArgs<ExtArgs>
            result: $Utils.Optional<MapNodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.MapNodeCountArgs<ExtArgs>
            result: $Utils.Optional<MapNodeCountAggregateOutputType> | number
          }
        }
      }
      NodeRelationship: {
        payload: Prisma.$NodeRelationshipPayload<ExtArgs>
        fields: Prisma.NodeRelationshipFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NodeRelationshipFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeRelationshipPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NodeRelationshipFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeRelationshipPayload>
          }
          findFirst: {
            args: Prisma.NodeRelationshipFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeRelationshipPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NodeRelationshipFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeRelationshipPayload>
          }
          findMany: {
            args: Prisma.NodeRelationshipFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeRelationshipPayload>[]
          }
          create: {
            args: Prisma.NodeRelationshipCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeRelationshipPayload>
          }
          createMany: {
            args: Prisma.NodeRelationshipCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NodeRelationshipCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeRelationshipPayload>[]
          }
          delete: {
            args: Prisma.NodeRelationshipDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeRelationshipPayload>
          }
          update: {
            args: Prisma.NodeRelationshipUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeRelationshipPayload>
          }
          deleteMany: {
            args: Prisma.NodeRelationshipDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NodeRelationshipUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NodeRelationshipUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeRelationshipPayload>[]
          }
          upsert: {
            args: Prisma.NodeRelationshipUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodeRelationshipPayload>
          }
          aggregate: {
            args: Prisma.NodeRelationshipAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNodeRelationship>
          }
          groupBy: {
            args: Prisma.NodeRelationshipGroupByArgs<ExtArgs>
            result: $Utils.Optional<NodeRelationshipGroupByOutputType>[]
          }
          count: {
            args: Prisma.NodeRelationshipCountArgs<ExtArgs>
            result: $Utils.Optional<NodeRelationshipCountAggregateOutputType> | number
          }
        }
      }
      SessionRecap: {
        payload: Prisma.$SessionRecapPayload<ExtArgs>
        fields: Prisma.SessionRecapFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionRecapFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionRecapPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionRecapFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionRecapPayload>
          }
          findFirst: {
            args: Prisma.SessionRecapFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionRecapPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionRecapFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionRecapPayload>
          }
          findMany: {
            args: Prisma.SessionRecapFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionRecapPayload>[]
          }
          create: {
            args: Prisma.SessionRecapCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionRecapPayload>
          }
          createMany: {
            args: Prisma.SessionRecapCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionRecapCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionRecapPayload>[]
          }
          delete: {
            args: Prisma.SessionRecapDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionRecapPayload>
          }
          update: {
            args: Prisma.SessionRecapUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionRecapPayload>
          }
          deleteMany: {
            args: Prisma.SessionRecapDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionRecapUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionRecapUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionRecapPayload>[]
          }
          upsert: {
            args: Prisma.SessionRecapUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionRecapPayload>
          }
          aggregate: {
            args: Prisma.SessionRecapAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSessionRecap>
          }
          groupBy: {
            args: Prisma.SessionRecapGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionRecapGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionRecapCountArgs<ExtArgs>
            result: $Utils.Optional<SessionRecapCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    account?: AccountOmit
    session?: SessionOmit
    user?: UserOmit
    verificationToken?: VerificationTokenOmit
    eventPublishProvider?: EventPublishProviderOmit
    campaign?: CampaignOmit
    userCampaign?: UserCampaignOmit
    eventTemplate?: EventTemplateOmit
    event?: EventOmit
    staticMap?: StaticMapOmit
    nodeType?: NodeTypeOmit
    attribute?: AttributeOmit
    node?: NodeOmit
    mapNode?: MapNodeOmit
    nodeRelationship?: NodeRelationshipOmit
    sessionRecap?: SessionRecapOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accounts: number
    sessions: number
    campaigns: number
    user_campaigns: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    campaigns?: boolean | UserCountOutputTypeCountCampaignsArgs
    user_campaigns?: boolean | UserCountOutputTypeCountUser_campaignsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCampaignsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CampaignWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUser_campaignsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCampaignWhereInput
  }


  /**
   * Count Type CampaignCountOutputType
   */

  export type CampaignCountOutputType = {
    node_types: number
    users: number
    static_maps: number
    session_recaps: number
    nodes: number
    event_templates: number
    event_publish_provider: number
    user_campaigns: number
  }

  export type CampaignCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    node_types?: boolean | CampaignCountOutputTypeCountNode_typesArgs
    users?: boolean | CampaignCountOutputTypeCountUsersArgs
    static_maps?: boolean | CampaignCountOutputTypeCountStatic_mapsArgs
    session_recaps?: boolean | CampaignCountOutputTypeCountSession_recapsArgs
    nodes?: boolean | CampaignCountOutputTypeCountNodesArgs
    event_templates?: boolean | CampaignCountOutputTypeCountEvent_templatesArgs
    event_publish_provider?: boolean | CampaignCountOutputTypeCountEvent_publish_providerArgs
    user_campaigns?: boolean | CampaignCountOutputTypeCountUser_campaignsArgs
  }

  // Custom InputTypes
  /**
   * CampaignCountOutputType without action
   */
  export type CampaignCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignCountOutputType
     */
    select?: CampaignCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CampaignCountOutputType without action
   */
  export type CampaignCountOutputTypeCountNode_typesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NodeTypeWhereInput
  }

  /**
   * CampaignCountOutputType without action
   */
  export type CampaignCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * CampaignCountOutputType without action
   */
  export type CampaignCountOutputTypeCountStatic_mapsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaticMapWhereInput
  }

  /**
   * CampaignCountOutputType without action
   */
  export type CampaignCountOutputTypeCountSession_recapsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionRecapWhereInput
  }

  /**
   * CampaignCountOutputType without action
   */
  export type CampaignCountOutputTypeCountNodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NodeWhereInput
  }

  /**
   * CampaignCountOutputType without action
   */
  export type CampaignCountOutputTypeCountEvent_templatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventTemplateWhereInput
  }

  /**
   * CampaignCountOutputType without action
   */
  export type CampaignCountOutputTypeCountEvent_publish_providerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventPublishProviderWhereInput
  }

  /**
   * CampaignCountOutputType without action
   */
  export type CampaignCountOutputTypeCountUser_campaignsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCampaignWhereInput
  }


  /**
   * Count Type EventCountOutputType
   */

  export type EventCountOutputType = {
    nodes: number
  }

  export type EventCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nodes?: boolean | EventCountOutputTypeCountNodesArgs
  }

  // Custom InputTypes
  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventCountOutputType
     */
    select?: EventCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountNodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NodeWhereInput
  }


  /**
   * Count Type StaticMapCountOutputType
   */

  export type StaticMapCountOutputType = {
    map_nodes: number
  }

  export type StaticMapCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    map_nodes?: boolean | StaticMapCountOutputTypeCountMap_nodesArgs
  }

  // Custom InputTypes
  /**
   * StaticMapCountOutputType without action
   */
  export type StaticMapCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaticMapCountOutputType
     */
    select?: StaticMapCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StaticMapCountOutputType without action
   */
  export type StaticMapCountOutputTypeCountMap_nodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MapNodeWhereInput
  }


  /**
   * Count Type NodeTypeCountOutputType
   */

  export type NodeTypeCountOutputType = {
    nodes: number
  }

  export type NodeTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nodes?: boolean | NodeTypeCountOutputTypeCountNodesArgs
  }

  // Custom InputTypes
  /**
   * NodeTypeCountOutputType without action
   */
  export type NodeTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeTypeCountOutputType
     */
    select?: NodeTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NodeTypeCountOutputType without action
   */
  export type NodeTypeCountOutputTypeCountNodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NodeWhereInput
  }


  /**
   * Count Type NodeCountOutputType
   */

  export type NodeCountOutputType = {
    attributes: number
    events: number
    outgoing_relations: number
    incoming_relations: number
    map_node: number
  }

  export type NodeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attributes?: boolean | NodeCountOutputTypeCountAttributesArgs
    events?: boolean | NodeCountOutputTypeCountEventsArgs
    outgoing_relations?: boolean | NodeCountOutputTypeCountOutgoing_relationsArgs
    incoming_relations?: boolean | NodeCountOutputTypeCountIncoming_relationsArgs
    map_node?: boolean | NodeCountOutputTypeCountMap_nodeArgs
  }

  // Custom InputTypes
  /**
   * NodeCountOutputType without action
   */
  export type NodeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeCountOutputType
     */
    select?: NodeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NodeCountOutputType without action
   */
  export type NodeCountOutputTypeCountAttributesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttributeWhereInput
  }

  /**
   * NodeCountOutputType without action
   */
  export type NodeCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }

  /**
   * NodeCountOutputType without action
   */
  export type NodeCountOutputTypeCountOutgoing_relationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NodeRelationshipWhereInput
  }

  /**
   * NodeCountOutputType without action
   */
  export type NodeCountOutputTypeCountIncoming_relationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NodeRelationshipWhereInput
  }

  /**
   * NodeCountOutputType without action
   */
  export type NodeCountOutputTypeCountMap_nodeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MapNodeWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "provider" | "providerAccountId" | "refresh_token" | "access_token" | "expires_at" | "token_type" | "scope" | "id_token" | "session_state", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      provider: string
      providerAccountId: string
      refresh_token: string | null
      access_token: string | null
      expires_at: number | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      session_state: string | null
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */ 
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    userId: string
    expires: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionToken" | "userId" | "expires", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionToken: string
      userId: string
      expires: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly sessionToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly expires: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    updated_on: Date | null
    role: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    updated_on: Date | null
    role: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    image: number
    updated_on: number
    role: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    updated_on?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    updated_on?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    updated_on?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    updated_on: Date | null
    role: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    updated_on?: boolean
    role?: boolean
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    campaigns?: boolean | User$campaignsArgs<ExtArgs>
    user_campaigns?: boolean | User$user_campaignsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    updated_on?: boolean
    role?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    updated_on?: boolean
    role?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    updated_on?: boolean
    role?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "emailVerified" | "image" | "updated_on" | "role", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    campaigns?: boolean | User$campaignsArgs<ExtArgs>
    user_campaigns?: boolean | User$user_campaignsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      campaigns: Prisma.$CampaignPayload<ExtArgs>[]
      user_campaigns: Prisma.$UserCampaignPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      email: string | null
      emailVerified: Date | null
      image: string | null
      updated_on: Date | null
      role: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    campaigns<T extends User$campaignsArgs<ExtArgs> = {}>(args?: Subset<T, User$campaignsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    user_campaigns<T extends User$user_campaignsArgs<ExtArgs> = {}>(args?: Subset<T, User$user_campaignsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCampaignPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'DateTime'>
    readonly image: FieldRef<"User", 'String'>
    readonly updated_on: FieldRef<"User", 'DateTime'>
    readonly role: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data?: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.campaigns
   */
  export type User$campaignsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    where?: CampaignWhereInput
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    cursor?: CampaignWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * User.user_campaigns
   */
  export type User$user_campaignsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCampaign
     */
    select?: UserCampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCampaign
     */
    omit?: UserCampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCampaignInclude<ExtArgs> | null
    where?: UserCampaignWhereInput
    orderBy?: UserCampaignOrderByWithRelationInput | UserCampaignOrderByWithRelationInput[]
    cursor?: UserCampaignWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserCampaignScalarFieldEnum | UserCampaignScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model VerificationToken
   */

  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number
    token: number
    expires: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: VerificationTokenOrderByWithAggregationInput | VerificationTokenOrderByWithAggregationInput[]
    by: VerificationTokenScalarFieldEnum[] | VerificationTokenScalarFieldEnum
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type VerificationTokenGroupByOutputType = {
    identifier: string
    token: string
    expires: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectScalar = {
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }

  export type VerificationTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"identifier" | "token" | "expires", ExtArgs["result"]["verificationToken"]>

  export type $VerificationTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      identifier: string
      token: string
      expires: Date
    }, ExtArgs["result"]["verificationToken"]>
    composites: {}
  }

  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenDefaultArgs> = $Result.GetResult<Prisma.$VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificationTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationTokenFindUniqueArgs>(args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one VerificationToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationTokenFindFirstArgs>(args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     * 
     */
    findMany<T extends VerificationTokenFindManyArgs>(args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
     */
    create<T extends VerificationTokenCreateArgs>(args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many VerificationTokens.
     * @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationTokenCreateManyArgs>(args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VerificationTokens and returns the data saved in the database.
     * @param {VerificationTokenCreateManyAndReturnArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.createManyAndReturn({
     *   select: { identifier: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
     */
    delete<T extends VerificationTokenDeleteArgs>(args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationTokenUpdateArgs>(args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationTokenDeleteManyArgs>(args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationTokenUpdateManyArgs>(args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens and returns the data updated in the database.
     * @param {VerificationTokenUpdateManyAndReturnArgs} args - Arguments to update many VerificationTokens.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.updateManyAndReturn({
     *   select: { identifier: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VerificationTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, VerificationTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
     */
    upsert<T extends VerificationTokenUpsertArgs>(args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationToken model
   */
  readonly fields: VerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VerificationToken model
   */ 
  interface VerificationTokenFieldRefs {
    readonly identifier: FieldRef<"VerificationToken", 'String'>
    readonly token: FieldRef<"VerificationToken", 'String'>
    readonly expires: FieldRef<"VerificationToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }

  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken createManyAndReturn
   */
  export type VerificationTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
  }

  /**
   * VerificationToken updateManyAndReturn
   */
  export type VerificationTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
  }

  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }

  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
  }

  /**
   * VerificationToken without action
   */
  export type VerificationTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
  }


  /**
   * Model EventPublishProvider
   */

  export type AggregateEventPublishProvider = {
    _count: EventPublishProviderCountAggregateOutputType | null
    _min: EventPublishProviderMinAggregateOutputType | null
    _max: EventPublishProviderMaxAggregateOutputType | null
  }

  export type EventPublishProviderMinAggregateOutputType = {
    id: string | null
    provider: string | null
    url: string | null
    campaign_id: string | null
  }

  export type EventPublishProviderMaxAggregateOutputType = {
    id: string | null
    provider: string | null
    url: string | null
    campaign_id: string | null
  }

  export type EventPublishProviderCountAggregateOutputType = {
    id: number
    provider: number
    url: number
    campaign_id: number
    _all: number
  }


  export type EventPublishProviderMinAggregateInputType = {
    id?: true
    provider?: true
    url?: true
    campaign_id?: true
  }

  export type EventPublishProviderMaxAggregateInputType = {
    id?: true
    provider?: true
    url?: true
    campaign_id?: true
  }

  export type EventPublishProviderCountAggregateInputType = {
    id?: true
    provider?: true
    url?: true
    campaign_id?: true
    _all?: true
  }

  export type EventPublishProviderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventPublishProvider to aggregate.
     */
    where?: EventPublishProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventPublishProviders to fetch.
     */
    orderBy?: EventPublishProviderOrderByWithRelationInput | EventPublishProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventPublishProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventPublishProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventPublishProviders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventPublishProviders
    **/
    _count?: true | EventPublishProviderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventPublishProviderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventPublishProviderMaxAggregateInputType
  }

  export type GetEventPublishProviderAggregateType<T extends EventPublishProviderAggregateArgs> = {
        [P in keyof T & keyof AggregateEventPublishProvider]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventPublishProvider[P]>
      : GetScalarType<T[P], AggregateEventPublishProvider[P]>
  }




  export type EventPublishProviderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventPublishProviderWhereInput
    orderBy?: EventPublishProviderOrderByWithAggregationInput | EventPublishProviderOrderByWithAggregationInput[]
    by: EventPublishProviderScalarFieldEnum[] | EventPublishProviderScalarFieldEnum
    having?: EventPublishProviderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventPublishProviderCountAggregateInputType | true
    _min?: EventPublishProviderMinAggregateInputType
    _max?: EventPublishProviderMaxAggregateInputType
  }

  export type EventPublishProviderGroupByOutputType = {
    id: string
    provider: string
    url: string
    campaign_id: string
    _count: EventPublishProviderCountAggregateOutputType | null
    _min: EventPublishProviderMinAggregateOutputType | null
    _max: EventPublishProviderMaxAggregateOutputType | null
  }

  type GetEventPublishProviderGroupByPayload<T extends EventPublishProviderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventPublishProviderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventPublishProviderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventPublishProviderGroupByOutputType[P]>
            : GetScalarType<T[P], EventPublishProviderGroupByOutputType[P]>
        }
      >
    >


  export type EventPublishProviderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    provider?: boolean
    url?: boolean
    campaign_id?: boolean
    campaign?: boolean | EventPublishProvider$campaignArgs<ExtArgs>
  }, ExtArgs["result"]["eventPublishProvider"]>

  export type EventPublishProviderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    provider?: boolean
    url?: boolean
    campaign_id?: boolean
    campaign?: boolean | EventPublishProvider$campaignArgs<ExtArgs>
  }, ExtArgs["result"]["eventPublishProvider"]>

  export type EventPublishProviderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    provider?: boolean
    url?: boolean
    campaign_id?: boolean
    campaign?: boolean | EventPublishProvider$campaignArgs<ExtArgs>
  }, ExtArgs["result"]["eventPublishProvider"]>

  export type EventPublishProviderSelectScalar = {
    id?: boolean
    provider?: boolean
    url?: boolean
    campaign_id?: boolean
  }

  export type EventPublishProviderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "provider" | "url" | "campaign_id", ExtArgs["result"]["eventPublishProvider"]>
  export type EventPublishProviderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | EventPublishProvider$campaignArgs<ExtArgs>
  }
  export type EventPublishProviderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | EventPublishProvider$campaignArgs<ExtArgs>
  }
  export type EventPublishProviderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | EventPublishProvider$campaignArgs<ExtArgs>
  }

  export type $EventPublishProviderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EventPublishProvider"
    objects: {
      campaign: Prisma.$CampaignPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      provider: string
      url: string
      campaign_id: string
    }, ExtArgs["result"]["eventPublishProvider"]>
    composites: {}
  }

  type EventPublishProviderGetPayload<S extends boolean | null | undefined | EventPublishProviderDefaultArgs> = $Result.GetResult<Prisma.$EventPublishProviderPayload, S>

  type EventPublishProviderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EventPublishProviderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventPublishProviderCountAggregateInputType | true
    }

  export interface EventPublishProviderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventPublishProvider'], meta: { name: 'EventPublishProvider' } }
    /**
     * Find zero or one EventPublishProvider that matches the filter.
     * @param {EventPublishProviderFindUniqueArgs} args - Arguments to find a EventPublishProvider
     * @example
     * // Get one EventPublishProvider
     * const eventPublishProvider = await prisma.eventPublishProvider.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventPublishProviderFindUniqueArgs>(args: SelectSubset<T, EventPublishProviderFindUniqueArgs<ExtArgs>>): Prisma__EventPublishProviderClient<$Result.GetResult<Prisma.$EventPublishProviderPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one EventPublishProvider that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EventPublishProviderFindUniqueOrThrowArgs} args - Arguments to find a EventPublishProvider
     * @example
     * // Get one EventPublishProvider
     * const eventPublishProvider = await prisma.eventPublishProvider.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventPublishProviderFindUniqueOrThrowArgs>(args: SelectSubset<T, EventPublishProviderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventPublishProviderClient<$Result.GetResult<Prisma.$EventPublishProviderPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first EventPublishProvider that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventPublishProviderFindFirstArgs} args - Arguments to find a EventPublishProvider
     * @example
     * // Get one EventPublishProvider
     * const eventPublishProvider = await prisma.eventPublishProvider.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventPublishProviderFindFirstArgs>(args?: SelectSubset<T, EventPublishProviderFindFirstArgs<ExtArgs>>): Prisma__EventPublishProviderClient<$Result.GetResult<Prisma.$EventPublishProviderPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first EventPublishProvider that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventPublishProviderFindFirstOrThrowArgs} args - Arguments to find a EventPublishProvider
     * @example
     * // Get one EventPublishProvider
     * const eventPublishProvider = await prisma.eventPublishProvider.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventPublishProviderFindFirstOrThrowArgs>(args?: SelectSubset<T, EventPublishProviderFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventPublishProviderClient<$Result.GetResult<Prisma.$EventPublishProviderPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more EventPublishProviders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventPublishProviderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventPublishProviders
     * const eventPublishProviders = await prisma.eventPublishProvider.findMany()
     * 
     * // Get first 10 EventPublishProviders
     * const eventPublishProviders = await prisma.eventPublishProvider.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventPublishProviderWithIdOnly = await prisma.eventPublishProvider.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventPublishProviderFindManyArgs>(args?: SelectSubset<T, EventPublishProviderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPublishProviderPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a EventPublishProvider.
     * @param {EventPublishProviderCreateArgs} args - Arguments to create a EventPublishProvider.
     * @example
     * // Create one EventPublishProvider
     * const EventPublishProvider = await prisma.eventPublishProvider.create({
     *   data: {
     *     // ... data to create a EventPublishProvider
     *   }
     * })
     * 
     */
    create<T extends EventPublishProviderCreateArgs>(args: SelectSubset<T, EventPublishProviderCreateArgs<ExtArgs>>): Prisma__EventPublishProviderClient<$Result.GetResult<Prisma.$EventPublishProviderPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many EventPublishProviders.
     * @param {EventPublishProviderCreateManyArgs} args - Arguments to create many EventPublishProviders.
     * @example
     * // Create many EventPublishProviders
     * const eventPublishProvider = await prisma.eventPublishProvider.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventPublishProviderCreateManyArgs>(args?: SelectSubset<T, EventPublishProviderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EventPublishProviders and returns the data saved in the database.
     * @param {EventPublishProviderCreateManyAndReturnArgs} args - Arguments to create many EventPublishProviders.
     * @example
     * // Create many EventPublishProviders
     * const eventPublishProvider = await prisma.eventPublishProvider.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EventPublishProviders and only return the `id`
     * const eventPublishProviderWithIdOnly = await prisma.eventPublishProvider.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventPublishProviderCreateManyAndReturnArgs>(args?: SelectSubset<T, EventPublishProviderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPublishProviderPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a EventPublishProvider.
     * @param {EventPublishProviderDeleteArgs} args - Arguments to delete one EventPublishProvider.
     * @example
     * // Delete one EventPublishProvider
     * const EventPublishProvider = await prisma.eventPublishProvider.delete({
     *   where: {
     *     // ... filter to delete one EventPublishProvider
     *   }
     * })
     * 
     */
    delete<T extends EventPublishProviderDeleteArgs>(args: SelectSubset<T, EventPublishProviderDeleteArgs<ExtArgs>>): Prisma__EventPublishProviderClient<$Result.GetResult<Prisma.$EventPublishProviderPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one EventPublishProvider.
     * @param {EventPublishProviderUpdateArgs} args - Arguments to update one EventPublishProvider.
     * @example
     * // Update one EventPublishProvider
     * const eventPublishProvider = await prisma.eventPublishProvider.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventPublishProviderUpdateArgs>(args: SelectSubset<T, EventPublishProviderUpdateArgs<ExtArgs>>): Prisma__EventPublishProviderClient<$Result.GetResult<Prisma.$EventPublishProviderPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more EventPublishProviders.
     * @param {EventPublishProviderDeleteManyArgs} args - Arguments to filter EventPublishProviders to delete.
     * @example
     * // Delete a few EventPublishProviders
     * const { count } = await prisma.eventPublishProvider.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventPublishProviderDeleteManyArgs>(args?: SelectSubset<T, EventPublishProviderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventPublishProviders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventPublishProviderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventPublishProviders
     * const eventPublishProvider = await prisma.eventPublishProvider.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventPublishProviderUpdateManyArgs>(args: SelectSubset<T, EventPublishProviderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventPublishProviders and returns the data updated in the database.
     * @param {EventPublishProviderUpdateManyAndReturnArgs} args - Arguments to update many EventPublishProviders.
     * @example
     * // Update many EventPublishProviders
     * const eventPublishProvider = await prisma.eventPublishProvider.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EventPublishProviders and only return the `id`
     * const eventPublishProviderWithIdOnly = await prisma.eventPublishProvider.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EventPublishProviderUpdateManyAndReturnArgs>(args: SelectSubset<T, EventPublishProviderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPublishProviderPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one EventPublishProvider.
     * @param {EventPublishProviderUpsertArgs} args - Arguments to update or create a EventPublishProvider.
     * @example
     * // Update or create a EventPublishProvider
     * const eventPublishProvider = await prisma.eventPublishProvider.upsert({
     *   create: {
     *     // ... data to create a EventPublishProvider
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventPublishProvider we want to update
     *   }
     * })
     */
    upsert<T extends EventPublishProviderUpsertArgs>(args: SelectSubset<T, EventPublishProviderUpsertArgs<ExtArgs>>): Prisma__EventPublishProviderClient<$Result.GetResult<Prisma.$EventPublishProviderPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of EventPublishProviders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventPublishProviderCountArgs} args - Arguments to filter EventPublishProviders to count.
     * @example
     * // Count the number of EventPublishProviders
     * const count = await prisma.eventPublishProvider.count({
     *   where: {
     *     // ... the filter for the EventPublishProviders we want to count
     *   }
     * })
    **/
    count<T extends EventPublishProviderCountArgs>(
      args?: Subset<T, EventPublishProviderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventPublishProviderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventPublishProvider.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventPublishProviderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventPublishProviderAggregateArgs>(args: Subset<T, EventPublishProviderAggregateArgs>): Prisma.PrismaPromise<GetEventPublishProviderAggregateType<T>>

    /**
     * Group by EventPublishProvider.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventPublishProviderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventPublishProviderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventPublishProviderGroupByArgs['orderBy'] }
        : { orderBy?: EventPublishProviderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventPublishProviderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventPublishProviderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EventPublishProvider model
   */
  readonly fields: EventPublishProviderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventPublishProvider.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventPublishProviderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    campaign<T extends EventPublishProvider$campaignArgs<ExtArgs> = {}>(args?: Subset<T, EventPublishProvider$campaignArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EventPublishProvider model
   */ 
  interface EventPublishProviderFieldRefs {
    readonly id: FieldRef<"EventPublishProvider", 'String'>
    readonly provider: FieldRef<"EventPublishProvider", 'String'>
    readonly url: FieldRef<"EventPublishProvider", 'String'>
    readonly campaign_id: FieldRef<"EventPublishProvider", 'String'>
  }
    

  // Custom InputTypes
  /**
   * EventPublishProvider findUnique
   */
  export type EventPublishProviderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPublishProvider
     */
    select?: EventPublishProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventPublishProvider
     */
    omit?: EventPublishProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventPublishProviderInclude<ExtArgs> | null
    /**
     * Filter, which EventPublishProvider to fetch.
     */
    where: EventPublishProviderWhereUniqueInput
  }

  /**
   * EventPublishProvider findUniqueOrThrow
   */
  export type EventPublishProviderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPublishProvider
     */
    select?: EventPublishProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventPublishProvider
     */
    omit?: EventPublishProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventPublishProviderInclude<ExtArgs> | null
    /**
     * Filter, which EventPublishProvider to fetch.
     */
    where: EventPublishProviderWhereUniqueInput
  }

  /**
   * EventPublishProvider findFirst
   */
  export type EventPublishProviderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPublishProvider
     */
    select?: EventPublishProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventPublishProvider
     */
    omit?: EventPublishProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventPublishProviderInclude<ExtArgs> | null
    /**
     * Filter, which EventPublishProvider to fetch.
     */
    where?: EventPublishProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventPublishProviders to fetch.
     */
    orderBy?: EventPublishProviderOrderByWithRelationInput | EventPublishProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventPublishProviders.
     */
    cursor?: EventPublishProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventPublishProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventPublishProviders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventPublishProviders.
     */
    distinct?: EventPublishProviderScalarFieldEnum | EventPublishProviderScalarFieldEnum[]
  }

  /**
   * EventPublishProvider findFirstOrThrow
   */
  export type EventPublishProviderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPublishProvider
     */
    select?: EventPublishProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventPublishProvider
     */
    omit?: EventPublishProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventPublishProviderInclude<ExtArgs> | null
    /**
     * Filter, which EventPublishProvider to fetch.
     */
    where?: EventPublishProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventPublishProviders to fetch.
     */
    orderBy?: EventPublishProviderOrderByWithRelationInput | EventPublishProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventPublishProviders.
     */
    cursor?: EventPublishProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventPublishProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventPublishProviders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventPublishProviders.
     */
    distinct?: EventPublishProviderScalarFieldEnum | EventPublishProviderScalarFieldEnum[]
  }

  /**
   * EventPublishProvider findMany
   */
  export type EventPublishProviderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPublishProvider
     */
    select?: EventPublishProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventPublishProvider
     */
    omit?: EventPublishProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventPublishProviderInclude<ExtArgs> | null
    /**
     * Filter, which EventPublishProviders to fetch.
     */
    where?: EventPublishProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventPublishProviders to fetch.
     */
    orderBy?: EventPublishProviderOrderByWithRelationInput | EventPublishProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventPublishProviders.
     */
    cursor?: EventPublishProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventPublishProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventPublishProviders.
     */
    skip?: number
    distinct?: EventPublishProviderScalarFieldEnum | EventPublishProviderScalarFieldEnum[]
  }

  /**
   * EventPublishProvider create
   */
  export type EventPublishProviderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPublishProvider
     */
    select?: EventPublishProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventPublishProvider
     */
    omit?: EventPublishProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventPublishProviderInclude<ExtArgs> | null
    /**
     * The data needed to create a EventPublishProvider.
     */
    data: XOR<EventPublishProviderCreateInput, EventPublishProviderUncheckedCreateInput>
  }

  /**
   * EventPublishProvider createMany
   */
  export type EventPublishProviderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EventPublishProviders.
     */
    data: EventPublishProviderCreateManyInput | EventPublishProviderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EventPublishProvider createManyAndReturn
   */
  export type EventPublishProviderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPublishProvider
     */
    select?: EventPublishProviderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EventPublishProvider
     */
    omit?: EventPublishProviderOmit<ExtArgs> | null
    /**
     * The data used to create many EventPublishProviders.
     */
    data: EventPublishProviderCreateManyInput | EventPublishProviderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventPublishProviderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventPublishProvider update
   */
  export type EventPublishProviderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPublishProvider
     */
    select?: EventPublishProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventPublishProvider
     */
    omit?: EventPublishProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventPublishProviderInclude<ExtArgs> | null
    /**
     * The data needed to update a EventPublishProvider.
     */
    data: XOR<EventPublishProviderUpdateInput, EventPublishProviderUncheckedUpdateInput>
    /**
     * Choose, which EventPublishProvider to update.
     */
    where: EventPublishProviderWhereUniqueInput
  }

  /**
   * EventPublishProvider updateMany
   */
  export type EventPublishProviderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EventPublishProviders.
     */
    data: XOR<EventPublishProviderUpdateManyMutationInput, EventPublishProviderUncheckedUpdateManyInput>
    /**
     * Filter which EventPublishProviders to update
     */
    where?: EventPublishProviderWhereInput
  }

  /**
   * EventPublishProvider updateManyAndReturn
   */
  export type EventPublishProviderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPublishProvider
     */
    select?: EventPublishProviderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EventPublishProvider
     */
    omit?: EventPublishProviderOmit<ExtArgs> | null
    /**
     * The data used to update EventPublishProviders.
     */
    data: XOR<EventPublishProviderUpdateManyMutationInput, EventPublishProviderUncheckedUpdateManyInput>
    /**
     * Filter which EventPublishProviders to update
     */
    where?: EventPublishProviderWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventPublishProviderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventPublishProvider upsert
   */
  export type EventPublishProviderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPublishProvider
     */
    select?: EventPublishProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventPublishProvider
     */
    omit?: EventPublishProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventPublishProviderInclude<ExtArgs> | null
    /**
     * The filter to search for the EventPublishProvider to update in case it exists.
     */
    where: EventPublishProviderWhereUniqueInput
    /**
     * In case the EventPublishProvider found by the `where` argument doesn't exist, create a new EventPublishProvider with this data.
     */
    create: XOR<EventPublishProviderCreateInput, EventPublishProviderUncheckedCreateInput>
    /**
     * In case the EventPublishProvider was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventPublishProviderUpdateInput, EventPublishProviderUncheckedUpdateInput>
  }

  /**
   * EventPublishProvider delete
   */
  export type EventPublishProviderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPublishProvider
     */
    select?: EventPublishProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventPublishProvider
     */
    omit?: EventPublishProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventPublishProviderInclude<ExtArgs> | null
    /**
     * Filter which EventPublishProvider to delete.
     */
    where: EventPublishProviderWhereUniqueInput
  }

  /**
   * EventPublishProvider deleteMany
   */
  export type EventPublishProviderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventPublishProviders to delete
     */
    where?: EventPublishProviderWhereInput
  }

  /**
   * EventPublishProvider.campaign
   */
  export type EventPublishProvider$campaignArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    where?: CampaignWhereInput
  }

  /**
   * EventPublishProvider without action
   */
  export type EventPublishProviderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPublishProvider
     */
    select?: EventPublishProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventPublishProvider
     */
    omit?: EventPublishProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventPublishProviderInclude<ExtArgs> | null
  }


  /**
   * Model Campaign
   */

  export type AggregateCampaign = {
    _count: CampaignCountAggregateOutputType | null
    _min: CampaignMinAggregateOutputType | null
    _max: CampaignMaxAggregateOutputType | null
  }

  export type CampaignMinAggregateOutputType = {
    campaign_id: string | null
    title: string | null
    description: string | null
    image: string | null
    header_image: string | null
    allow_ai_events: boolean | null
    overview_map_id: string | null
    created_on: Date | null
  }

  export type CampaignMaxAggregateOutputType = {
    campaign_id: string | null
    title: string | null
    description: string | null
    image: string | null
    header_image: string | null
    allow_ai_events: boolean | null
    overview_map_id: string | null
    created_on: Date | null
  }

  export type CampaignCountAggregateOutputType = {
    campaign_id: number
    title: number
    description: number
    image: number
    header_image: number
    allow_ai_events: number
    overview_map_id: number
    created_on: number
    _all: number
  }


  export type CampaignMinAggregateInputType = {
    campaign_id?: true
    title?: true
    description?: true
    image?: true
    header_image?: true
    allow_ai_events?: true
    overview_map_id?: true
    created_on?: true
  }

  export type CampaignMaxAggregateInputType = {
    campaign_id?: true
    title?: true
    description?: true
    image?: true
    header_image?: true
    allow_ai_events?: true
    overview_map_id?: true
    created_on?: true
  }

  export type CampaignCountAggregateInputType = {
    campaign_id?: true
    title?: true
    description?: true
    image?: true
    header_image?: true
    allow_ai_events?: true
    overview_map_id?: true
    created_on?: true
    _all?: true
  }

  export type CampaignAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Campaign to aggregate.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Campaigns
    **/
    _count?: true | CampaignCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CampaignMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CampaignMaxAggregateInputType
  }

  export type GetCampaignAggregateType<T extends CampaignAggregateArgs> = {
        [P in keyof T & keyof AggregateCampaign]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCampaign[P]>
      : GetScalarType<T[P], AggregateCampaign[P]>
  }




  export type CampaignGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CampaignWhereInput
    orderBy?: CampaignOrderByWithAggregationInput | CampaignOrderByWithAggregationInput[]
    by: CampaignScalarFieldEnum[] | CampaignScalarFieldEnum
    having?: CampaignScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CampaignCountAggregateInputType | true
    _min?: CampaignMinAggregateInputType
    _max?: CampaignMaxAggregateInputType
  }

  export type CampaignGroupByOutputType = {
    campaign_id: string
    title: string
    description: string
    image: string | null
    header_image: string | null
    allow_ai_events: boolean
    overview_map_id: string | null
    created_on: Date
    _count: CampaignCountAggregateOutputType | null
    _min: CampaignMinAggregateOutputType | null
    _max: CampaignMaxAggregateOutputType | null
  }

  type GetCampaignGroupByPayload<T extends CampaignGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CampaignGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CampaignGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CampaignGroupByOutputType[P]>
            : GetScalarType<T[P], CampaignGroupByOutputType[P]>
        }
      >
    >


  export type CampaignSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    campaign_id?: boolean
    title?: boolean
    description?: boolean
    image?: boolean
    header_image?: boolean
    allow_ai_events?: boolean
    overview_map_id?: boolean
    created_on?: boolean
    node_types?: boolean | Campaign$node_typesArgs<ExtArgs>
    users?: boolean | Campaign$usersArgs<ExtArgs>
    static_maps?: boolean | Campaign$static_mapsArgs<ExtArgs>
    session_recaps?: boolean | Campaign$session_recapsArgs<ExtArgs>
    nodes?: boolean | Campaign$nodesArgs<ExtArgs>
    event_templates?: boolean | Campaign$event_templatesArgs<ExtArgs>
    event_publish_provider?: boolean | Campaign$event_publish_providerArgs<ExtArgs>
    user_campaigns?: boolean | Campaign$user_campaignsArgs<ExtArgs>
    _count?: boolean | CampaignCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["campaign"]>

  export type CampaignSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    campaign_id?: boolean
    title?: boolean
    description?: boolean
    image?: boolean
    header_image?: boolean
    allow_ai_events?: boolean
    overview_map_id?: boolean
    created_on?: boolean
  }, ExtArgs["result"]["campaign"]>

  export type CampaignSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    campaign_id?: boolean
    title?: boolean
    description?: boolean
    image?: boolean
    header_image?: boolean
    allow_ai_events?: boolean
    overview_map_id?: boolean
    created_on?: boolean
  }, ExtArgs["result"]["campaign"]>

  export type CampaignSelectScalar = {
    campaign_id?: boolean
    title?: boolean
    description?: boolean
    image?: boolean
    header_image?: boolean
    allow_ai_events?: boolean
    overview_map_id?: boolean
    created_on?: boolean
  }

  export type CampaignOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"campaign_id" | "title" | "description" | "image" | "header_image" | "allow_ai_events" | "overview_map_id" | "created_on", ExtArgs["result"]["campaign"]>
  export type CampaignInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    node_types?: boolean | Campaign$node_typesArgs<ExtArgs>
    users?: boolean | Campaign$usersArgs<ExtArgs>
    static_maps?: boolean | Campaign$static_mapsArgs<ExtArgs>
    session_recaps?: boolean | Campaign$session_recapsArgs<ExtArgs>
    nodes?: boolean | Campaign$nodesArgs<ExtArgs>
    event_templates?: boolean | Campaign$event_templatesArgs<ExtArgs>
    event_publish_provider?: boolean | Campaign$event_publish_providerArgs<ExtArgs>
    user_campaigns?: boolean | Campaign$user_campaignsArgs<ExtArgs>
    _count?: boolean | CampaignCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CampaignIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CampaignIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CampaignPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Campaign"
    objects: {
      node_types: Prisma.$NodeTypePayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
      static_maps: Prisma.$StaticMapPayload<ExtArgs>[]
      session_recaps: Prisma.$SessionRecapPayload<ExtArgs>[]
      nodes: Prisma.$NodePayload<ExtArgs>[]
      event_templates: Prisma.$EventTemplatePayload<ExtArgs>[]
      event_publish_provider: Prisma.$EventPublishProviderPayload<ExtArgs>[]
      user_campaigns: Prisma.$UserCampaignPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      campaign_id: string
      title: string
      description: string
      image: string | null
      header_image: string | null
      allow_ai_events: boolean
      overview_map_id: string | null
      created_on: Date
    }, ExtArgs["result"]["campaign"]>
    composites: {}
  }

  type CampaignGetPayload<S extends boolean | null | undefined | CampaignDefaultArgs> = $Result.GetResult<Prisma.$CampaignPayload, S>

  type CampaignCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CampaignFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CampaignCountAggregateInputType | true
    }

  export interface CampaignDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Campaign'], meta: { name: 'Campaign' } }
    /**
     * Find zero or one Campaign that matches the filter.
     * @param {CampaignFindUniqueArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CampaignFindUniqueArgs>(args: SelectSubset<T, CampaignFindUniqueArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Campaign that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CampaignFindUniqueOrThrowArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CampaignFindUniqueOrThrowArgs>(args: SelectSubset<T, CampaignFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Campaign that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignFindFirstArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CampaignFindFirstArgs>(args?: SelectSubset<T, CampaignFindFirstArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Campaign that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignFindFirstOrThrowArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CampaignFindFirstOrThrowArgs>(args?: SelectSubset<T, CampaignFindFirstOrThrowArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Campaigns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Campaigns
     * const campaigns = await prisma.campaign.findMany()
     * 
     * // Get first 10 Campaigns
     * const campaigns = await prisma.campaign.findMany({ take: 10 })
     * 
     * // Only select the `campaign_id`
     * const campaignWithCampaign_idOnly = await prisma.campaign.findMany({ select: { campaign_id: true } })
     * 
     */
    findMany<T extends CampaignFindManyArgs>(args?: SelectSubset<T, CampaignFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Campaign.
     * @param {CampaignCreateArgs} args - Arguments to create a Campaign.
     * @example
     * // Create one Campaign
     * const Campaign = await prisma.campaign.create({
     *   data: {
     *     // ... data to create a Campaign
     *   }
     * })
     * 
     */
    create<T extends CampaignCreateArgs>(args: SelectSubset<T, CampaignCreateArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Campaigns.
     * @param {CampaignCreateManyArgs} args - Arguments to create many Campaigns.
     * @example
     * // Create many Campaigns
     * const campaign = await prisma.campaign.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CampaignCreateManyArgs>(args?: SelectSubset<T, CampaignCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Campaigns and returns the data saved in the database.
     * @param {CampaignCreateManyAndReturnArgs} args - Arguments to create many Campaigns.
     * @example
     * // Create many Campaigns
     * const campaign = await prisma.campaign.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Campaigns and only return the `campaign_id`
     * const campaignWithCampaign_idOnly = await prisma.campaign.createManyAndReturn({
     *   select: { campaign_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CampaignCreateManyAndReturnArgs>(args?: SelectSubset<T, CampaignCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Campaign.
     * @param {CampaignDeleteArgs} args - Arguments to delete one Campaign.
     * @example
     * // Delete one Campaign
     * const Campaign = await prisma.campaign.delete({
     *   where: {
     *     // ... filter to delete one Campaign
     *   }
     * })
     * 
     */
    delete<T extends CampaignDeleteArgs>(args: SelectSubset<T, CampaignDeleteArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Campaign.
     * @param {CampaignUpdateArgs} args - Arguments to update one Campaign.
     * @example
     * // Update one Campaign
     * const campaign = await prisma.campaign.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CampaignUpdateArgs>(args: SelectSubset<T, CampaignUpdateArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Campaigns.
     * @param {CampaignDeleteManyArgs} args - Arguments to filter Campaigns to delete.
     * @example
     * // Delete a few Campaigns
     * const { count } = await prisma.campaign.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CampaignDeleteManyArgs>(args?: SelectSubset<T, CampaignDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Campaigns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Campaigns
     * const campaign = await prisma.campaign.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CampaignUpdateManyArgs>(args: SelectSubset<T, CampaignUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Campaigns and returns the data updated in the database.
     * @param {CampaignUpdateManyAndReturnArgs} args - Arguments to update many Campaigns.
     * @example
     * // Update many Campaigns
     * const campaign = await prisma.campaign.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Campaigns and only return the `campaign_id`
     * const campaignWithCampaign_idOnly = await prisma.campaign.updateManyAndReturn({
     *   select: { campaign_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CampaignUpdateManyAndReturnArgs>(args: SelectSubset<T, CampaignUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Campaign.
     * @param {CampaignUpsertArgs} args - Arguments to update or create a Campaign.
     * @example
     * // Update or create a Campaign
     * const campaign = await prisma.campaign.upsert({
     *   create: {
     *     // ... data to create a Campaign
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Campaign we want to update
     *   }
     * })
     */
    upsert<T extends CampaignUpsertArgs>(args: SelectSubset<T, CampaignUpsertArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Campaigns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignCountArgs} args - Arguments to filter Campaigns to count.
     * @example
     * // Count the number of Campaigns
     * const count = await prisma.campaign.count({
     *   where: {
     *     // ... the filter for the Campaigns we want to count
     *   }
     * })
    **/
    count<T extends CampaignCountArgs>(
      args?: Subset<T, CampaignCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CampaignCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Campaign.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CampaignAggregateArgs>(args: Subset<T, CampaignAggregateArgs>): Prisma.PrismaPromise<GetCampaignAggregateType<T>>

    /**
     * Group by Campaign.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CampaignGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CampaignGroupByArgs['orderBy'] }
        : { orderBy?: CampaignGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CampaignGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCampaignGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Campaign model
   */
  readonly fields: CampaignFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Campaign.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CampaignClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    node_types<T extends Campaign$node_typesArgs<ExtArgs> = {}>(args?: Subset<T, Campaign$node_typesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NodeTypePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    users<T extends Campaign$usersArgs<ExtArgs> = {}>(args?: Subset<T, Campaign$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    static_maps<T extends Campaign$static_mapsArgs<ExtArgs> = {}>(args?: Subset<T, Campaign$static_mapsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaticMapPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    session_recaps<T extends Campaign$session_recapsArgs<ExtArgs> = {}>(args?: Subset<T, Campaign$session_recapsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionRecapPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    nodes<T extends Campaign$nodesArgs<ExtArgs> = {}>(args?: Subset<T, Campaign$nodesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NodePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    event_templates<T extends Campaign$event_templatesArgs<ExtArgs> = {}>(args?: Subset<T, Campaign$event_templatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventTemplatePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    event_publish_provider<T extends Campaign$event_publish_providerArgs<ExtArgs> = {}>(args?: Subset<T, Campaign$event_publish_providerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPublishProviderPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    user_campaigns<T extends Campaign$user_campaignsArgs<ExtArgs> = {}>(args?: Subset<T, Campaign$user_campaignsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCampaignPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Campaign model
   */ 
  interface CampaignFieldRefs {
    readonly campaign_id: FieldRef<"Campaign", 'String'>
    readonly title: FieldRef<"Campaign", 'String'>
    readonly description: FieldRef<"Campaign", 'String'>
    readonly image: FieldRef<"Campaign", 'String'>
    readonly header_image: FieldRef<"Campaign", 'String'>
    readonly allow_ai_events: FieldRef<"Campaign", 'Boolean'>
    readonly overview_map_id: FieldRef<"Campaign", 'String'>
    readonly created_on: FieldRef<"Campaign", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Campaign findUnique
   */
  export type CampaignFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign findUniqueOrThrow
   */
  export type CampaignFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign findFirst
   */
  export type CampaignFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Campaigns.
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Campaigns.
     */
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * Campaign findFirstOrThrow
   */
  export type CampaignFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Campaigns.
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Campaigns.
     */
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * Campaign findMany
   */
  export type CampaignFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaigns to fetch.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Campaigns.
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * Campaign create
   */
  export type CampaignCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * The data needed to create a Campaign.
     */
    data: XOR<CampaignCreateInput, CampaignUncheckedCreateInput>
  }

  /**
   * Campaign createMany
   */
  export type CampaignCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Campaigns.
     */
    data: CampaignCreateManyInput | CampaignCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Campaign createManyAndReturn
   */
  export type CampaignCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * The data used to create many Campaigns.
     */
    data: CampaignCreateManyInput | CampaignCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Campaign update
   */
  export type CampaignUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * The data needed to update a Campaign.
     */
    data: XOR<CampaignUpdateInput, CampaignUncheckedUpdateInput>
    /**
     * Choose, which Campaign to update.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign updateMany
   */
  export type CampaignUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Campaigns.
     */
    data: XOR<CampaignUpdateManyMutationInput, CampaignUncheckedUpdateManyInput>
    /**
     * Filter which Campaigns to update
     */
    where?: CampaignWhereInput
  }

  /**
   * Campaign updateManyAndReturn
   */
  export type CampaignUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * The data used to update Campaigns.
     */
    data: XOR<CampaignUpdateManyMutationInput, CampaignUncheckedUpdateManyInput>
    /**
     * Filter which Campaigns to update
     */
    where?: CampaignWhereInput
  }

  /**
   * Campaign upsert
   */
  export type CampaignUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * The filter to search for the Campaign to update in case it exists.
     */
    where: CampaignWhereUniqueInput
    /**
     * In case the Campaign found by the `where` argument doesn't exist, create a new Campaign with this data.
     */
    create: XOR<CampaignCreateInput, CampaignUncheckedCreateInput>
    /**
     * In case the Campaign was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CampaignUpdateInput, CampaignUncheckedUpdateInput>
  }

  /**
   * Campaign delete
   */
  export type CampaignDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter which Campaign to delete.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign deleteMany
   */
  export type CampaignDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Campaigns to delete
     */
    where?: CampaignWhereInput
  }

  /**
   * Campaign.node_types
   */
  export type Campaign$node_typesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeType
     */
    select?: NodeTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeType
     */
    omit?: NodeTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeTypeInclude<ExtArgs> | null
    where?: NodeTypeWhereInput
    orderBy?: NodeTypeOrderByWithRelationInput | NodeTypeOrderByWithRelationInput[]
    cursor?: NodeTypeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NodeTypeScalarFieldEnum | NodeTypeScalarFieldEnum[]
  }

  /**
   * Campaign.users
   */
  export type Campaign$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Campaign.static_maps
   */
  export type Campaign$static_mapsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaticMap
     */
    select?: StaticMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaticMap
     */
    omit?: StaticMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaticMapInclude<ExtArgs> | null
    where?: StaticMapWhereInput
    orderBy?: StaticMapOrderByWithRelationInput | StaticMapOrderByWithRelationInput[]
    cursor?: StaticMapWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StaticMapScalarFieldEnum | StaticMapScalarFieldEnum[]
  }

  /**
   * Campaign.session_recaps
   */
  export type Campaign$session_recapsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionRecap
     */
    select?: SessionRecapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionRecap
     */
    omit?: SessionRecapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionRecapInclude<ExtArgs> | null
    where?: SessionRecapWhereInput
    orderBy?: SessionRecapOrderByWithRelationInput | SessionRecapOrderByWithRelationInput[]
    cursor?: SessionRecapWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionRecapScalarFieldEnum | SessionRecapScalarFieldEnum[]
  }

  /**
   * Campaign.nodes
   */
  export type Campaign$nodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Node
     */
    select?: NodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Node
     */
    omit?: NodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeInclude<ExtArgs> | null
    where?: NodeWhereInput
    orderBy?: NodeOrderByWithRelationInput | NodeOrderByWithRelationInput[]
    cursor?: NodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NodeScalarFieldEnum | NodeScalarFieldEnum[]
  }

  /**
   * Campaign.event_templates
   */
  export type Campaign$event_templatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventTemplate
     */
    select?: EventTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventTemplate
     */
    omit?: EventTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventTemplateInclude<ExtArgs> | null
    where?: EventTemplateWhereInput
    orderBy?: EventTemplateOrderByWithRelationInput | EventTemplateOrderByWithRelationInput[]
    cursor?: EventTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventTemplateScalarFieldEnum | EventTemplateScalarFieldEnum[]
  }

  /**
   * Campaign.event_publish_provider
   */
  export type Campaign$event_publish_providerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventPublishProvider
     */
    select?: EventPublishProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventPublishProvider
     */
    omit?: EventPublishProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventPublishProviderInclude<ExtArgs> | null
    where?: EventPublishProviderWhereInput
    orderBy?: EventPublishProviderOrderByWithRelationInput | EventPublishProviderOrderByWithRelationInput[]
    cursor?: EventPublishProviderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventPublishProviderScalarFieldEnum | EventPublishProviderScalarFieldEnum[]
  }

  /**
   * Campaign.user_campaigns
   */
  export type Campaign$user_campaignsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCampaign
     */
    select?: UserCampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCampaign
     */
    omit?: UserCampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCampaignInclude<ExtArgs> | null
    where?: UserCampaignWhereInput
    orderBy?: UserCampaignOrderByWithRelationInput | UserCampaignOrderByWithRelationInput[]
    cursor?: UserCampaignWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserCampaignScalarFieldEnum | UserCampaignScalarFieldEnum[]
  }

  /**
   * Campaign without action
   */
  export type CampaignDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
  }


  /**
   * Model UserCampaign
   */

  export type AggregateUserCampaign = {
    _count: UserCampaignCountAggregateOutputType | null
    _min: UserCampaignMinAggregateOutputType | null
    _max: UserCampaignMaxAggregateOutputType | null
  }

  export type UserCampaignMinAggregateOutputType = {
    user_campaign_id: string | null
    user_id: string | null
    campaign_id: string | null
    created_on: Date | null
    updated_on: Date | null
    last_visited_on: Date | null
  }

  export type UserCampaignMaxAggregateOutputType = {
    user_campaign_id: string | null
    user_id: string | null
    campaign_id: string | null
    created_on: Date | null
    updated_on: Date | null
    last_visited_on: Date | null
  }

  export type UserCampaignCountAggregateOutputType = {
    user_campaign_id: number
    user_id: number
    campaign_id: number
    created_on: number
    updated_on: number
    last_visited_on: number
    _all: number
  }


  export type UserCampaignMinAggregateInputType = {
    user_campaign_id?: true
    user_id?: true
    campaign_id?: true
    created_on?: true
    updated_on?: true
    last_visited_on?: true
  }

  export type UserCampaignMaxAggregateInputType = {
    user_campaign_id?: true
    user_id?: true
    campaign_id?: true
    created_on?: true
    updated_on?: true
    last_visited_on?: true
  }

  export type UserCampaignCountAggregateInputType = {
    user_campaign_id?: true
    user_id?: true
    campaign_id?: true
    created_on?: true
    updated_on?: true
    last_visited_on?: true
    _all?: true
  }

  export type UserCampaignAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserCampaign to aggregate.
     */
    where?: UserCampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCampaigns to fetch.
     */
    orderBy?: UserCampaignOrderByWithRelationInput | UserCampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserCampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCampaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCampaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserCampaigns
    **/
    _count?: true | UserCampaignCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserCampaignMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserCampaignMaxAggregateInputType
  }

  export type GetUserCampaignAggregateType<T extends UserCampaignAggregateArgs> = {
        [P in keyof T & keyof AggregateUserCampaign]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserCampaign[P]>
      : GetScalarType<T[P], AggregateUserCampaign[P]>
  }




  export type UserCampaignGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCampaignWhereInput
    orderBy?: UserCampaignOrderByWithAggregationInput | UserCampaignOrderByWithAggregationInput[]
    by: UserCampaignScalarFieldEnum[] | UserCampaignScalarFieldEnum
    having?: UserCampaignScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCampaignCountAggregateInputType | true
    _min?: UserCampaignMinAggregateInputType
    _max?: UserCampaignMaxAggregateInputType
  }

  export type UserCampaignGroupByOutputType = {
    user_campaign_id: string
    user_id: string
    campaign_id: string
    created_on: Date
    updated_on: Date
    last_visited_on: Date
    _count: UserCampaignCountAggregateOutputType | null
    _min: UserCampaignMinAggregateOutputType | null
    _max: UserCampaignMaxAggregateOutputType | null
  }

  type GetUserCampaignGroupByPayload<T extends UserCampaignGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserCampaignGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserCampaignGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserCampaignGroupByOutputType[P]>
            : GetScalarType<T[P], UserCampaignGroupByOutputType[P]>
        }
      >
    >


  export type UserCampaignSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_campaign_id?: boolean
    user_id?: boolean
    campaign_id?: boolean
    created_on?: boolean
    updated_on?: boolean
    last_visited_on?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userCampaign"]>

  export type UserCampaignSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_campaign_id?: boolean
    user_id?: boolean
    campaign_id?: boolean
    created_on?: boolean
    updated_on?: boolean
    last_visited_on?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userCampaign"]>

  export type UserCampaignSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_campaign_id?: boolean
    user_id?: boolean
    campaign_id?: boolean
    created_on?: boolean
    updated_on?: boolean
    last_visited_on?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userCampaign"]>

  export type UserCampaignSelectScalar = {
    user_campaign_id?: boolean
    user_id?: boolean
    campaign_id?: boolean
    created_on?: boolean
    updated_on?: boolean
    last_visited_on?: boolean
  }

  export type UserCampaignOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"user_campaign_id" | "user_id" | "campaign_id" | "created_on" | "updated_on" | "last_visited_on", ExtArgs["result"]["userCampaign"]>
  export type UserCampaignInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }
  export type UserCampaignIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }
  export type UserCampaignIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }

  export type $UserCampaignPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserCampaign"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      campaign: Prisma.$CampaignPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      user_campaign_id: string
      user_id: string
      campaign_id: string
      created_on: Date
      updated_on: Date
      last_visited_on: Date
    }, ExtArgs["result"]["userCampaign"]>
    composites: {}
  }

  type UserCampaignGetPayload<S extends boolean | null | undefined | UserCampaignDefaultArgs> = $Result.GetResult<Prisma.$UserCampaignPayload, S>

  type UserCampaignCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserCampaignFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCampaignCountAggregateInputType | true
    }

  export interface UserCampaignDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserCampaign'], meta: { name: 'UserCampaign' } }
    /**
     * Find zero or one UserCampaign that matches the filter.
     * @param {UserCampaignFindUniqueArgs} args - Arguments to find a UserCampaign
     * @example
     * // Get one UserCampaign
     * const userCampaign = await prisma.userCampaign.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserCampaignFindUniqueArgs>(args: SelectSubset<T, UserCampaignFindUniqueArgs<ExtArgs>>): Prisma__UserCampaignClient<$Result.GetResult<Prisma.$UserCampaignPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one UserCampaign that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserCampaignFindUniqueOrThrowArgs} args - Arguments to find a UserCampaign
     * @example
     * // Get one UserCampaign
     * const userCampaign = await prisma.userCampaign.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserCampaignFindUniqueOrThrowArgs>(args: SelectSubset<T, UserCampaignFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserCampaignClient<$Result.GetResult<Prisma.$UserCampaignPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first UserCampaign that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCampaignFindFirstArgs} args - Arguments to find a UserCampaign
     * @example
     * // Get one UserCampaign
     * const userCampaign = await prisma.userCampaign.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserCampaignFindFirstArgs>(args?: SelectSubset<T, UserCampaignFindFirstArgs<ExtArgs>>): Prisma__UserCampaignClient<$Result.GetResult<Prisma.$UserCampaignPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first UserCampaign that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCampaignFindFirstOrThrowArgs} args - Arguments to find a UserCampaign
     * @example
     * // Get one UserCampaign
     * const userCampaign = await prisma.userCampaign.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserCampaignFindFirstOrThrowArgs>(args?: SelectSubset<T, UserCampaignFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserCampaignClient<$Result.GetResult<Prisma.$UserCampaignPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more UserCampaigns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCampaignFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserCampaigns
     * const userCampaigns = await prisma.userCampaign.findMany()
     * 
     * // Get first 10 UserCampaigns
     * const userCampaigns = await prisma.userCampaign.findMany({ take: 10 })
     * 
     * // Only select the `user_campaign_id`
     * const userCampaignWithUser_campaign_idOnly = await prisma.userCampaign.findMany({ select: { user_campaign_id: true } })
     * 
     */
    findMany<T extends UserCampaignFindManyArgs>(args?: SelectSubset<T, UserCampaignFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCampaignPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a UserCampaign.
     * @param {UserCampaignCreateArgs} args - Arguments to create a UserCampaign.
     * @example
     * // Create one UserCampaign
     * const UserCampaign = await prisma.userCampaign.create({
     *   data: {
     *     // ... data to create a UserCampaign
     *   }
     * })
     * 
     */
    create<T extends UserCampaignCreateArgs>(args: SelectSubset<T, UserCampaignCreateArgs<ExtArgs>>): Prisma__UserCampaignClient<$Result.GetResult<Prisma.$UserCampaignPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many UserCampaigns.
     * @param {UserCampaignCreateManyArgs} args - Arguments to create many UserCampaigns.
     * @example
     * // Create many UserCampaigns
     * const userCampaign = await prisma.userCampaign.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCampaignCreateManyArgs>(args?: SelectSubset<T, UserCampaignCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserCampaigns and returns the data saved in the database.
     * @param {UserCampaignCreateManyAndReturnArgs} args - Arguments to create many UserCampaigns.
     * @example
     * // Create many UserCampaigns
     * const userCampaign = await prisma.userCampaign.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserCampaigns and only return the `user_campaign_id`
     * const userCampaignWithUser_campaign_idOnly = await prisma.userCampaign.createManyAndReturn({
     *   select: { user_campaign_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCampaignCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCampaignCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCampaignPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a UserCampaign.
     * @param {UserCampaignDeleteArgs} args - Arguments to delete one UserCampaign.
     * @example
     * // Delete one UserCampaign
     * const UserCampaign = await prisma.userCampaign.delete({
     *   where: {
     *     // ... filter to delete one UserCampaign
     *   }
     * })
     * 
     */
    delete<T extends UserCampaignDeleteArgs>(args: SelectSubset<T, UserCampaignDeleteArgs<ExtArgs>>): Prisma__UserCampaignClient<$Result.GetResult<Prisma.$UserCampaignPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one UserCampaign.
     * @param {UserCampaignUpdateArgs} args - Arguments to update one UserCampaign.
     * @example
     * // Update one UserCampaign
     * const userCampaign = await prisma.userCampaign.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserCampaignUpdateArgs>(args: SelectSubset<T, UserCampaignUpdateArgs<ExtArgs>>): Prisma__UserCampaignClient<$Result.GetResult<Prisma.$UserCampaignPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more UserCampaigns.
     * @param {UserCampaignDeleteManyArgs} args - Arguments to filter UserCampaigns to delete.
     * @example
     * // Delete a few UserCampaigns
     * const { count } = await prisma.userCampaign.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserCampaignDeleteManyArgs>(args?: SelectSubset<T, UserCampaignDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserCampaigns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCampaignUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserCampaigns
     * const userCampaign = await prisma.userCampaign.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserCampaignUpdateManyArgs>(args: SelectSubset<T, UserCampaignUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserCampaigns and returns the data updated in the database.
     * @param {UserCampaignUpdateManyAndReturnArgs} args - Arguments to update many UserCampaigns.
     * @example
     * // Update many UserCampaigns
     * const userCampaign = await prisma.userCampaign.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserCampaigns and only return the `user_campaign_id`
     * const userCampaignWithUser_campaign_idOnly = await prisma.userCampaign.updateManyAndReturn({
     *   select: { user_campaign_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserCampaignUpdateManyAndReturnArgs>(args: SelectSubset<T, UserCampaignUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCampaignPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one UserCampaign.
     * @param {UserCampaignUpsertArgs} args - Arguments to update or create a UserCampaign.
     * @example
     * // Update or create a UserCampaign
     * const userCampaign = await prisma.userCampaign.upsert({
     *   create: {
     *     // ... data to create a UserCampaign
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserCampaign we want to update
     *   }
     * })
     */
    upsert<T extends UserCampaignUpsertArgs>(args: SelectSubset<T, UserCampaignUpsertArgs<ExtArgs>>): Prisma__UserCampaignClient<$Result.GetResult<Prisma.$UserCampaignPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of UserCampaigns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCampaignCountArgs} args - Arguments to filter UserCampaigns to count.
     * @example
     * // Count the number of UserCampaigns
     * const count = await prisma.userCampaign.count({
     *   where: {
     *     // ... the filter for the UserCampaigns we want to count
     *   }
     * })
    **/
    count<T extends UserCampaignCountArgs>(
      args?: Subset<T, UserCampaignCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCampaignCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserCampaign.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCampaignAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserCampaignAggregateArgs>(args: Subset<T, UserCampaignAggregateArgs>): Prisma.PrismaPromise<GetUserCampaignAggregateType<T>>

    /**
     * Group by UserCampaign.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCampaignGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserCampaignGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserCampaignGroupByArgs['orderBy'] }
        : { orderBy?: UserCampaignGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserCampaignGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserCampaignGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserCampaign model
   */
  readonly fields: UserCampaignFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserCampaign.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserCampaignClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    campaign<T extends CampaignDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CampaignDefaultArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserCampaign model
   */ 
  interface UserCampaignFieldRefs {
    readonly user_campaign_id: FieldRef<"UserCampaign", 'String'>
    readonly user_id: FieldRef<"UserCampaign", 'String'>
    readonly campaign_id: FieldRef<"UserCampaign", 'String'>
    readonly created_on: FieldRef<"UserCampaign", 'DateTime'>
    readonly updated_on: FieldRef<"UserCampaign", 'DateTime'>
    readonly last_visited_on: FieldRef<"UserCampaign", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserCampaign findUnique
   */
  export type UserCampaignFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCampaign
     */
    select?: UserCampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCampaign
     */
    omit?: UserCampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCampaignInclude<ExtArgs> | null
    /**
     * Filter, which UserCampaign to fetch.
     */
    where: UserCampaignWhereUniqueInput
  }

  /**
   * UserCampaign findUniqueOrThrow
   */
  export type UserCampaignFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCampaign
     */
    select?: UserCampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCampaign
     */
    omit?: UserCampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCampaignInclude<ExtArgs> | null
    /**
     * Filter, which UserCampaign to fetch.
     */
    where: UserCampaignWhereUniqueInput
  }

  /**
   * UserCampaign findFirst
   */
  export type UserCampaignFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCampaign
     */
    select?: UserCampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCampaign
     */
    omit?: UserCampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCampaignInclude<ExtArgs> | null
    /**
     * Filter, which UserCampaign to fetch.
     */
    where?: UserCampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCampaigns to fetch.
     */
    orderBy?: UserCampaignOrderByWithRelationInput | UserCampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserCampaigns.
     */
    cursor?: UserCampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCampaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCampaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserCampaigns.
     */
    distinct?: UserCampaignScalarFieldEnum | UserCampaignScalarFieldEnum[]
  }

  /**
   * UserCampaign findFirstOrThrow
   */
  export type UserCampaignFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCampaign
     */
    select?: UserCampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCampaign
     */
    omit?: UserCampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCampaignInclude<ExtArgs> | null
    /**
     * Filter, which UserCampaign to fetch.
     */
    where?: UserCampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCampaigns to fetch.
     */
    orderBy?: UserCampaignOrderByWithRelationInput | UserCampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserCampaigns.
     */
    cursor?: UserCampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCampaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCampaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserCampaigns.
     */
    distinct?: UserCampaignScalarFieldEnum | UserCampaignScalarFieldEnum[]
  }

  /**
   * UserCampaign findMany
   */
  export type UserCampaignFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCampaign
     */
    select?: UserCampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCampaign
     */
    omit?: UserCampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCampaignInclude<ExtArgs> | null
    /**
     * Filter, which UserCampaigns to fetch.
     */
    where?: UserCampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCampaigns to fetch.
     */
    orderBy?: UserCampaignOrderByWithRelationInput | UserCampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserCampaigns.
     */
    cursor?: UserCampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCampaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCampaigns.
     */
    skip?: number
    distinct?: UserCampaignScalarFieldEnum | UserCampaignScalarFieldEnum[]
  }

  /**
   * UserCampaign create
   */
  export type UserCampaignCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCampaign
     */
    select?: UserCampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCampaign
     */
    omit?: UserCampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCampaignInclude<ExtArgs> | null
    /**
     * The data needed to create a UserCampaign.
     */
    data: XOR<UserCampaignCreateInput, UserCampaignUncheckedCreateInput>
  }

  /**
   * UserCampaign createMany
   */
  export type UserCampaignCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserCampaigns.
     */
    data: UserCampaignCreateManyInput | UserCampaignCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserCampaign createManyAndReturn
   */
  export type UserCampaignCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCampaign
     */
    select?: UserCampaignSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserCampaign
     */
    omit?: UserCampaignOmit<ExtArgs> | null
    /**
     * The data used to create many UserCampaigns.
     */
    data: UserCampaignCreateManyInput | UserCampaignCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCampaignIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserCampaign update
   */
  export type UserCampaignUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCampaign
     */
    select?: UserCampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCampaign
     */
    omit?: UserCampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCampaignInclude<ExtArgs> | null
    /**
     * The data needed to update a UserCampaign.
     */
    data: XOR<UserCampaignUpdateInput, UserCampaignUncheckedUpdateInput>
    /**
     * Choose, which UserCampaign to update.
     */
    where: UserCampaignWhereUniqueInput
  }

  /**
   * UserCampaign updateMany
   */
  export type UserCampaignUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserCampaigns.
     */
    data: XOR<UserCampaignUpdateManyMutationInput, UserCampaignUncheckedUpdateManyInput>
    /**
     * Filter which UserCampaigns to update
     */
    where?: UserCampaignWhereInput
  }

  /**
   * UserCampaign updateManyAndReturn
   */
  export type UserCampaignUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCampaign
     */
    select?: UserCampaignSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserCampaign
     */
    omit?: UserCampaignOmit<ExtArgs> | null
    /**
     * The data used to update UserCampaigns.
     */
    data: XOR<UserCampaignUpdateManyMutationInput, UserCampaignUncheckedUpdateManyInput>
    /**
     * Filter which UserCampaigns to update
     */
    where?: UserCampaignWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCampaignIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserCampaign upsert
   */
  export type UserCampaignUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCampaign
     */
    select?: UserCampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCampaign
     */
    omit?: UserCampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCampaignInclude<ExtArgs> | null
    /**
     * The filter to search for the UserCampaign to update in case it exists.
     */
    where: UserCampaignWhereUniqueInput
    /**
     * In case the UserCampaign found by the `where` argument doesn't exist, create a new UserCampaign with this data.
     */
    create: XOR<UserCampaignCreateInput, UserCampaignUncheckedCreateInput>
    /**
     * In case the UserCampaign was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserCampaignUpdateInput, UserCampaignUncheckedUpdateInput>
  }

  /**
   * UserCampaign delete
   */
  export type UserCampaignDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCampaign
     */
    select?: UserCampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCampaign
     */
    omit?: UserCampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCampaignInclude<ExtArgs> | null
    /**
     * Filter which UserCampaign to delete.
     */
    where: UserCampaignWhereUniqueInput
  }

  /**
   * UserCampaign deleteMany
   */
  export type UserCampaignDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserCampaigns to delete
     */
    where?: UserCampaignWhereInput
  }

  /**
   * UserCampaign without action
   */
  export type UserCampaignDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCampaign
     */
    select?: UserCampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCampaign
     */
    omit?: UserCampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCampaignInclude<ExtArgs> | null
  }


  /**
   * Model EventTemplate
   */

  export type AggregateEventTemplate = {
    _count: EventTemplateCountAggregateOutputType | null
    _avg: EventTemplateAvgAggregateOutputType | null
    _sum: EventTemplateSumAggregateOutputType | null
    _min: EventTemplateMinAggregateOutputType | null
    _max: EventTemplateMaxAggregateOutputType | null
  }

  export type EventTemplateAvgAggregateOutputType = {
    rarity: number | null
  }

  export type EventTemplateSumAggregateOutputType = {
    rarity: number | null
  }

  export type EventTemplateMinAggregateOutputType = {
    event_template_id: string | null
    title: string | null
    description: string | null
    type: string | null
    icon_url: string | null
    rarity: number | null
    relationship: string | null
    compare: string | null
    exclude_from_random: boolean | null
    campaign_id: string | null
    node_references: string | null
  }

  export type EventTemplateMaxAggregateOutputType = {
    event_template_id: string | null
    title: string | null
    description: string | null
    type: string | null
    icon_url: string | null
    rarity: number | null
    relationship: string | null
    compare: string | null
    exclude_from_random: boolean | null
    campaign_id: string | null
    node_references: string | null
  }

  export type EventTemplateCountAggregateOutputType = {
    event_template_id: number
    title: number
    description: number
    type: number
    icon_url: number
    rarity: number
    relationship: number
    compare: number
    exclude_from_random: number
    results: number
    campaign_id: number
    node_references: number
    _all: number
  }


  export type EventTemplateAvgAggregateInputType = {
    rarity?: true
  }

  export type EventTemplateSumAggregateInputType = {
    rarity?: true
  }

  export type EventTemplateMinAggregateInputType = {
    event_template_id?: true
    title?: true
    description?: true
    type?: true
    icon_url?: true
    rarity?: true
    relationship?: true
    compare?: true
    exclude_from_random?: true
    campaign_id?: true
    node_references?: true
  }

  export type EventTemplateMaxAggregateInputType = {
    event_template_id?: true
    title?: true
    description?: true
    type?: true
    icon_url?: true
    rarity?: true
    relationship?: true
    compare?: true
    exclude_from_random?: true
    campaign_id?: true
    node_references?: true
  }

  export type EventTemplateCountAggregateInputType = {
    event_template_id?: true
    title?: true
    description?: true
    type?: true
    icon_url?: true
    rarity?: true
    relationship?: true
    compare?: true
    exclude_from_random?: true
    results?: true
    campaign_id?: true
    node_references?: true
    _all?: true
  }

  export type EventTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventTemplate to aggregate.
     */
    where?: EventTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventTemplates to fetch.
     */
    orderBy?: EventTemplateOrderByWithRelationInput | EventTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventTemplates
    **/
    _count?: true | EventTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventTemplateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventTemplateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventTemplateMaxAggregateInputType
  }

  export type GetEventTemplateAggregateType<T extends EventTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateEventTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventTemplate[P]>
      : GetScalarType<T[P], AggregateEventTemplate[P]>
  }




  export type EventTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventTemplateWhereInput
    orderBy?: EventTemplateOrderByWithAggregationInput | EventTemplateOrderByWithAggregationInput[]
    by: EventTemplateScalarFieldEnum[] | EventTemplateScalarFieldEnum
    having?: EventTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventTemplateCountAggregateInputType | true
    _avg?: EventTemplateAvgAggregateInputType
    _sum?: EventTemplateSumAggregateInputType
    _min?: EventTemplateMinAggregateInputType
    _max?: EventTemplateMaxAggregateInputType
  }

  export type EventTemplateGroupByOutputType = {
    event_template_id: string
    title: string
    description: string
    type: string
    icon_url: string
    rarity: number
    relationship: string | null
    compare: string | null
    exclude_from_random: boolean | null
    results: JsonValue
    campaign_id: string | null
    node_references: string | null
    _count: EventTemplateCountAggregateOutputType | null
    _avg: EventTemplateAvgAggregateOutputType | null
    _sum: EventTemplateSumAggregateOutputType | null
    _min: EventTemplateMinAggregateOutputType | null
    _max: EventTemplateMaxAggregateOutputType | null
  }

  type GetEventTemplateGroupByPayload<T extends EventTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], EventTemplateGroupByOutputType[P]>
        }
      >
    >


  export type EventTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    event_template_id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    icon_url?: boolean
    rarity?: boolean
    relationship?: boolean
    compare?: boolean
    exclude_from_random?: boolean
    results?: boolean
    campaign_id?: boolean
    node_references?: boolean
    campaign?: boolean | EventTemplate$campaignArgs<ExtArgs>
  }, ExtArgs["result"]["eventTemplate"]>

  export type EventTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    event_template_id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    icon_url?: boolean
    rarity?: boolean
    relationship?: boolean
    compare?: boolean
    exclude_from_random?: boolean
    results?: boolean
    campaign_id?: boolean
    node_references?: boolean
    campaign?: boolean | EventTemplate$campaignArgs<ExtArgs>
  }, ExtArgs["result"]["eventTemplate"]>

  export type EventTemplateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    event_template_id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    icon_url?: boolean
    rarity?: boolean
    relationship?: boolean
    compare?: boolean
    exclude_from_random?: boolean
    results?: boolean
    campaign_id?: boolean
    node_references?: boolean
    campaign?: boolean | EventTemplate$campaignArgs<ExtArgs>
  }, ExtArgs["result"]["eventTemplate"]>

  export type EventTemplateSelectScalar = {
    event_template_id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    icon_url?: boolean
    rarity?: boolean
    relationship?: boolean
    compare?: boolean
    exclude_from_random?: boolean
    results?: boolean
    campaign_id?: boolean
    node_references?: boolean
  }

  export type EventTemplateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"event_template_id" | "title" | "description" | "type" | "icon_url" | "rarity" | "relationship" | "compare" | "exclude_from_random" | "results" | "campaign_id" | "node_references", ExtArgs["result"]["eventTemplate"]>
  export type EventTemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | EventTemplate$campaignArgs<ExtArgs>
  }
  export type EventTemplateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | EventTemplate$campaignArgs<ExtArgs>
  }
  export type EventTemplateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | EventTemplate$campaignArgs<ExtArgs>
  }

  export type $EventTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EventTemplate"
    objects: {
      campaign: Prisma.$CampaignPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      event_template_id: string
      title: string
      description: string
      type: string
      icon_url: string
      rarity: number
      relationship: string | null
      compare: string | null
      exclude_from_random: boolean | null
      results: Prisma.JsonValue
      campaign_id: string | null
      node_references: string | null
    }, ExtArgs["result"]["eventTemplate"]>
    composites: {}
  }

  type EventTemplateGetPayload<S extends boolean | null | undefined | EventTemplateDefaultArgs> = $Result.GetResult<Prisma.$EventTemplatePayload, S>

  type EventTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EventTemplateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventTemplateCountAggregateInputType | true
    }

  export interface EventTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventTemplate'], meta: { name: 'EventTemplate' } }
    /**
     * Find zero or one EventTemplate that matches the filter.
     * @param {EventTemplateFindUniqueArgs} args - Arguments to find a EventTemplate
     * @example
     * // Get one EventTemplate
     * const eventTemplate = await prisma.eventTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventTemplateFindUniqueArgs>(args: SelectSubset<T, EventTemplateFindUniqueArgs<ExtArgs>>): Prisma__EventTemplateClient<$Result.GetResult<Prisma.$EventTemplatePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one EventTemplate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EventTemplateFindUniqueOrThrowArgs} args - Arguments to find a EventTemplate
     * @example
     * // Get one EventTemplate
     * const eventTemplate = await prisma.eventTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, EventTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventTemplateClient<$Result.GetResult<Prisma.$EventTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first EventTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventTemplateFindFirstArgs} args - Arguments to find a EventTemplate
     * @example
     * // Get one EventTemplate
     * const eventTemplate = await prisma.eventTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventTemplateFindFirstArgs>(args?: SelectSubset<T, EventTemplateFindFirstArgs<ExtArgs>>): Prisma__EventTemplateClient<$Result.GetResult<Prisma.$EventTemplatePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first EventTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventTemplateFindFirstOrThrowArgs} args - Arguments to find a EventTemplate
     * @example
     * // Get one EventTemplate
     * const eventTemplate = await prisma.eventTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, EventTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventTemplateClient<$Result.GetResult<Prisma.$EventTemplatePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more EventTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventTemplates
     * const eventTemplates = await prisma.eventTemplate.findMany()
     * 
     * // Get first 10 EventTemplates
     * const eventTemplates = await prisma.eventTemplate.findMany({ take: 10 })
     * 
     * // Only select the `event_template_id`
     * const eventTemplateWithEvent_template_idOnly = await prisma.eventTemplate.findMany({ select: { event_template_id: true } })
     * 
     */
    findMany<T extends EventTemplateFindManyArgs>(args?: SelectSubset<T, EventTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventTemplatePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a EventTemplate.
     * @param {EventTemplateCreateArgs} args - Arguments to create a EventTemplate.
     * @example
     * // Create one EventTemplate
     * const EventTemplate = await prisma.eventTemplate.create({
     *   data: {
     *     // ... data to create a EventTemplate
     *   }
     * })
     * 
     */
    create<T extends EventTemplateCreateArgs>(args: SelectSubset<T, EventTemplateCreateArgs<ExtArgs>>): Prisma__EventTemplateClient<$Result.GetResult<Prisma.$EventTemplatePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many EventTemplates.
     * @param {EventTemplateCreateManyArgs} args - Arguments to create many EventTemplates.
     * @example
     * // Create many EventTemplates
     * const eventTemplate = await prisma.eventTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventTemplateCreateManyArgs>(args?: SelectSubset<T, EventTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EventTemplates and returns the data saved in the database.
     * @param {EventTemplateCreateManyAndReturnArgs} args - Arguments to create many EventTemplates.
     * @example
     * // Create many EventTemplates
     * const eventTemplate = await prisma.eventTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EventTemplates and only return the `event_template_id`
     * const eventTemplateWithEvent_template_idOnly = await prisma.eventTemplate.createManyAndReturn({
     *   select: { event_template_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, EventTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventTemplatePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a EventTemplate.
     * @param {EventTemplateDeleteArgs} args - Arguments to delete one EventTemplate.
     * @example
     * // Delete one EventTemplate
     * const EventTemplate = await prisma.eventTemplate.delete({
     *   where: {
     *     // ... filter to delete one EventTemplate
     *   }
     * })
     * 
     */
    delete<T extends EventTemplateDeleteArgs>(args: SelectSubset<T, EventTemplateDeleteArgs<ExtArgs>>): Prisma__EventTemplateClient<$Result.GetResult<Prisma.$EventTemplatePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one EventTemplate.
     * @param {EventTemplateUpdateArgs} args - Arguments to update one EventTemplate.
     * @example
     * // Update one EventTemplate
     * const eventTemplate = await prisma.eventTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventTemplateUpdateArgs>(args: SelectSubset<T, EventTemplateUpdateArgs<ExtArgs>>): Prisma__EventTemplateClient<$Result.GetResult<Prisma.$EventTemplatePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more EventTemplates.
     * @param {EventTemplateDeleteManyArgs} args - Arguments to filter EventTemplates to delete.
     * @example
     * // Delete a few EventTemplates
     * const { count } = await prisma.eventTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventTemplateDeleteManyArgs>(args?: SelectSubset<T, EventTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventTemplates
     * const eventTemplate = await prisma.eventTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventTemplateUpdateManyArgs>(args: SelectSubset<T, EventTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventTemplates and returns the data updated in the database.
     * @param {EventTemplateUpdateManyAndReturnArgs} args - Arguments to update many EventTemplates.
     * @example
     * // Update many EventTemplates
     * const eventTemplate = await prisma.eventTemplate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EventTemplates and only return the `event_template_id`
     * const eventTemplateWithEvent_template_idOnly = await prisma.eventTemplate.updateManyAndReturn({
     *   select: { event_template_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EventTemplateUpdateManyAndReturnArgs>(args: SelectSubset<T, EventTemplateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventTemplatePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one EventTemplate.
     * @param {EventTemplateUpsertArgs} args - Arguments to update or create a EventTemplate.
     * @example
     * // Update or create a EventTemplate
     * const eventTemplate = await prisma.eventTemplate.upsert({
     *   create: {
     *     // ... data to create a EventTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventTemplate we want to update
     *   }
     * })
     */
    upsert<T extends EventTemplateUpsertArgs>(args: SelectSubset<T, EventTemplateUpsertArgs<ExtArgs>>): Prisma__EventTemplateClient<$Result.GetResult<Prisma.$EventTemplatePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of EventTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventTemplateCountArgs} args - Arguments to filter EventTemplates to count.
     * @example
     * // Count the number of EventTemplates
     * const count = await prisma.eventTemplate.count({
     *   where: {
     *     // ... the filter for the EventTemplates we want to count
     *   }
     * })
    **/
    count<T extends EventTemplateCountArgs>(
      args?: Subset<T, EventTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventTemplateAggregateArgs>(args: Subset<T, EventTemplateAggregateArgs>): Prisma.PrismaPromise<GetEventTemplateAggregateType<T>>

    /**
     * Group by EventTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventTemplateGroupByArgs['orderBy'] }
        : { orderBy?: EventTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EventTemplate model
   */
  readonly fields: EventTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    campaign<T extends EventTemplate$campaignArgs<ExtArgs> = {}>(args?: Subset<T, EventTemplate$campaignArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EventTemplate model
   */ 
  interface EventTemplateFieldRefs {
    readonly event_template_id: FieldRef<"EventTemplate", 'String'>
    readonly title: FieldRef<"EventTemplate", 'String'>
    readonly description: FieldRef<"EventTemplate", 'String'>
    readonly type: FieldRef<"EventTemplate", 'String'>
    readonly icon_url: FieldRef<"EventTemplate", 'String'>
    readonly rarity: FieldRef<"EventTemplate", 'Int'>
    readonly relationship: FieldRef<"EventTemplate", 'String'>
    readonly compare: FieldRef<"EventTemplate", 'String'>
    readonly exclude_from_random: FieldRef<"EventTemplate", 'Boolean'>
    readonly results: FieldRef<"EventTemplate", 'Json'>
    readonly campaign_id: FieldRef<"EventTemplate", 'String'>
    readonly node_references: FieldRef<"EventTemplate", 'String'>
  }
    

  // Custom InputTypes
  /**
   * EventTemplate findUnique
   */
  export type EventTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventTemplate
     */
    select?: EventTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventTemplate
     */
    omit?: EventTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventTemplateInclude<ExtArgs> | null
    /**
     * Filter, which EventTemplate to fetch.
     */
    where: EventTemplateWhereUniqueInput
  }

  /**
   * EventTemplate findUniqueOrThrow
   */
  export type EventTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventTemplate
     */
    select?: EventTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventTemplate
     */
    omit?: EventTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventTemplateInclude<ExtArgs> | null
    /**
     * Filter, which EventTemplate to fetch.
     */
    where: EventTemplateWhereUniqueInput
  }

  /**
   * EventTemplate findFirst
   */
  export type EventTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventTemplate
     */
    select?: EventTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventTemplate
     */
    omit?: EventTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventTemplateInclude<ExtArgs> | null
    /**
     * Filter, which EventTemplate to fetch.
     */
    where?: EventTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventTemplates to fetch.
     */
    orderBy?: EventTemplateOrderByWithRelationInput | EventTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventTemplates.
     */
    cursor?: EventTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventTemplates.
     */
    distinct?: EventTemplateScalarFieldEnum | EventTemplateScalarFieldEnum[]
  }

  /**
   * EventTemplate findFirstOrThrow
   */
  export type EventTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventTemplate
     */
    select?: EventTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventTemplate
     */
    omit?: EventTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventTemplateInclude<ExtArgs> | null
    /**
     * Filter, which EventTemplate to fetch.
     */
    where?: EventTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventTemplates to fetch.
     */
    orderBy?: EventTemplateOrderByWithRelationInput | EventTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventTemplates.
     */
    cursor?: EventTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventTemplates.
     */
    distinct?: EventTemplateScalarFieldEnum | EventTemplateScalarFieldEnum[]
  }

  /**
   * EventTemplate findMany
   */
  export type EventTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventTemplate
     */
    select?: EventTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventTemplate
     */
    omit?: EventTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventTemplateInclude<ExtArgs> | null
    /**
     * Filter, which EventTemplates to fetch.
     */
    where?: EventTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventTemplates to fetch.
     */
    orderBy?: EventTemplateOrderByWithRelationInput | EventTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventTemplates.
     */
    cursor?: EventTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventTemplates.
     */
    skip?: number
    distinct?: EventTemplateScalarFieldEnum | EventTemplateScalarFieldEnum[]
  }

  /**
   * EventTemplate create
   */
  export type EventTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventTemplate
     */
    select?: EventTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventTemplate
     */
    omit?: EventTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a EventTemplate.
     */
    data: XOR<EventTemplateCreateInput, EventTemplateUncheckedCreateInput>
  }

  /**
   * EventTemplate createMany
   */
  export type EventTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EventTemplates.
     */
    data: EventTemplateCreateManyInput | EventTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EventTemplate createManyAndReturn
   */
  export type EventTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventTemplate
     */
    select?: EventTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EventTemplate
     */
    omit?: EventTemplateOmit<ExtArgs> | null
    /**
     * The data used to create many EventTemplates.
     */
    data: EventTemplateCreateManyInput | EventTemplateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventTemplateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventTemplate update
   */
  export type EventTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventTemplate
     */
    select?: EventTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventTemplate
     */
    omit?: EventTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a EventTemplate.
     */
    data: XOR<EventTemplateUpdateInput, EventTemplateUncheckedUpdateInput>
    /**
     * Choose, which EventTemplate to update.
     */
    where: EventTemplateWhereUniqueInput
  }

  /**
   * EventTemplate updateMany
   */
  export type EventTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EventTemplates.
     */
    data: XOR<EventTemplateUpdateManyMutationInput, EventTemplateUncheckedUpdateManyInput>
    /**
     * Filter which EventTemplates to update
     */
    where?: EventTemplateWhereInput
  }

  /**
   * EventTemplate updateManyAndReturn
   */
  export type EventTemplateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventTemplate
     */
    select?: EventTemplateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EventTemplate
     */
    omit?: EventTemplateOmit<ExtArgs> | null
    /**
     * The data used to update EventTemplates.
     */
    data: XOR<EventTemplateUpdateManyMutationInput, EventTemplateUncheckedUpdateManyInput>
    /**
     * Filter which EventTemplates to update
     */
    where?: EventTemplateWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventTemplateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventTemplate upsert
   */
  export type EventTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventTemplate
     */
    select?: EventTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventTemplate
     */
    omit?: EventTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the EventTemplate to update in case it exists.
     */
    where: EventTemplateWhereUniqueInput
    /**
     * In case the EventTemplate found by the `where` argument doesn't exist, create a new EventTemplate with this data.
     */
    create: XOR<EventTemplateCreateInput, EventTemplateUncheckedCreateInput>
    /**
     * In case the EventTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventTemplateUpdateInput, EventTemplateUncheckedUpdateInput>
  }

  /**
   * EventTemplate delete
   */
  export type EventTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventTemplate
     */
    select?: EventTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventTemplate
     */
    omit?: EventTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventTemplateInclude<ExtArgs> | null
    /**
     * Filter which EventTemplate to delete.
     */
    where: EventTemplateWhereUniqueInput
  }

  /**
   * EventTemplate deleteMany
   */
  export type EventTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventTemplates to delete
     */
    where?: EventTemplateWhereInput
  }

  /**
   * EventTemplate.campaign
   */
  export type EventTemplate$campaignArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    where?: CampaignWhereInput
  }

  /**
   * EventTemplate without action
   */
  export type EventTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventTemplate
     */
    select?: EventTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventTemplate
     */
    omit?: EventTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventTemplateInclude<ExtArgs> | null
  }


  /**
   * Model Event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventAvgAggregateOutputType = {
    rarity: number | null
  }

  export type EventSumAggregateOutputType = {
    rarity: number | null
  }

  export type EventMinAggregateOutputType = {
    event_id: string | null
    name: string | null
    description: string | null
    type: string | null
    rarity: number | null
    created_on: Date | null
    updated_on: Date | null
  }

  export type EventMaxAggregateOutputType = {
    event_id: string | null
    name: string | null
    description: string | null
    type: string | null
    rarity: number | null
    created_on: Date | null
    updated_on: Date | null
  }

  export type EventCountAggregateOutputType = {
    event_id: number
    name: number
    description: number
    type: number
    rarity: number
    created_on: number
    updated_on: number
    _all: number
  }


  export type EventAvgAggregateInputType = {
    rarity?: true
  }

  export type EventSumAggregateInputType = {
    rarity?: true
  }

  export type EventMinAggregateInputType = {
    event_id?: true
    name?: true
    description?: true
    type?: true
    rarity?: true
    created_on?: true
    updated_on?: true
  }

  export type EventMaxAggregateInputType = {
    event_id?: true
    name?: true
    description?: true
    type?: true
    rarity?: true
    created_on?: true
    updated_on?: true
  }

  export type EventCountAggregateInputType = {
    event_id?: true
    name?: true
    description?: true
    type?: true
    rarity?: true
    created_on?: true
    updated_on?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: EventOrderByWithAggregationInput | EventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _avg?: EventAvgAggregateInputType
    _sum?: EventSumAggregateInputType
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    event_id: string
    name: string
    description: string | null
    type: string | null
    rarity: number
    created_on: Date
    updated_on: Date
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    event_id?: boolean
    name?: boolean
    description?: boolean
    type?: boolean
    rarity?: boolean
    created_on?: boolean
    updated_on?: boolean
    nodes?: boolean | Event$nodesArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    event_id?: boolean
    name?: boolean
    description?: boolean
    type?: boolean
    rarity?: boolean
    created_on?: boolean
    updated_on?: boolean
  }, ExtArgs["result"]["event"]>

  export type EventSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    event_id?: boolean
    name?: boolean
    description?: boolean
    type?: boolean
    rarity?: boolean
    created_on?: boolean
    updated_on?: boolean
  }, ExtArgs["result"]["event"]>

  export type EventSelectScalar = {
    event_id?: boolean
    name?: boolean
    description?: boolean
    type?: boolean
    rarity?: boolean
    created_on?: boolean
    updated_on?: boolean
  }

  export type EventOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"event_id" | "name" | "description" | "type" | "rarity" | "created_on" | "updated_on", ExtArgs["result"]["event"]>
  export type EventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nodes?: boolean | Event$nodesArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type EventIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Event"
    objects: {
      nodes: Prisma.$NodePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      event_id: string
      name: string
      description: string | null
      type: string | null
      rarity: number
      created_on: Date
      updated_on: Date
    }, ExtArgs["result"]["event"]>
    composites: {}
  }

  type EventGetPayload<S extends boolean | null | undefined | EventDefaultArgs> = $Result.GetResult<Prisma.$EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventFindUniqueArgs>(args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Event that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs>(args: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventFindFirstArgs>(args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs>(args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `event_id`
     * const eventWithEvent_idOnly = await prisma.event.findMany({ select: { event_id: true } })
     * 
     */
    findMany<T extends EventFindManyArgs>(args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
     */
    create<T extends EventCreateArgs>(args: SelectSubset<T, EventCreateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Events.
     * @param {EventCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventCreateManyArgs>(args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Events and returns the data saved in the database.
     * @param {EventCreateManyAndReturnArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Events and only return the `event_id`
     * const eventWithEvent_idOnly = await prisma.event.createManyAndReturn({
     *   select: { event_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventCreateManyAndReturnArgs>(args?: SelectSubset<T, EventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
     */
    delete<T extends EventDeleteArgs>(args: SelectSubset<T, EventDeleteArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventUpdateArgs>(args: SelectSubset<T, EventUpdateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventDeleteManyArgs>(args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventUpdateManyArgs>(args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events and returns the data updated in the database.
     * @param {EventUpdateManyAndReturnArgs} args - Arguments to update many Events.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Events and only return the `event_id`
     * const eventWithEvent_idOnly = await prisma.event.updateManyAndReturn({
     *   select: { event_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EventUpdateManyAndReturnArgs>(args: SelectSubset<T, EventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
     */
    upsert<T extends EventUpsertArgs>(args: SelectSubset<T, EventUpsertArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Event model
   */
  readonly fields: EventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    nodes<T extends Event$nodesArgs<ExtArgs> = {}>(args?: Subset<T, Event$nodesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NodePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Event model
   */ 
  interface EventFieldRefs {
    readonly event_id: FieldRef<"Event", 'String'>
    readonly name: FieldRef<"Event", 'String'>
    readonly description: FieldRef<"Event", 'String'>
    readonly type: FieldRef<"Event", 'String'>
    readonly rarity: FieldRef<"Event", 'Int'>
    readonly created_on: FieldRef<"Event", 'DateTime'>
    readonly updated_on: FieldRef<"Event", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Event findUnique
   */
  export type EventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findFirst
   */
  export type EventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }

  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Event createManyAndReturn
   */
  export type EventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
  }

  /**
   * Event updateManyAndReturn
   */
  export type EventUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
  }

  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }

  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
  }

  /**
   * Event.nodes
   */
  export type Event$nodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Node
     */
    select?: NodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Node
     */
    omit?: NodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeInclude<ExtArgs> | null
    where?: NodeWhereInput
    orderBy?: NodeOrderByWithRelationInput | NodeOrderByWithRelationInput[]
    cursor?: NodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NodeScalarFieldEnum | NodeScalarFieldEnum[]
  }

  /**
   * Event without action
   */
  export type EventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
  }


  /**
   * Model StaticMap
   */

  export type AggregateStaticMap = {
    _count: StaticMapCountAggregateOutputType | null
    _min: StaticMapMinAggregateOutputType | null
    _max: StaticMapMaxAggregateOutputType | null
  }

  export type StaticMapMinAggregateOutputType = {
    map_id: string | null
    name: string | null
    image_url: string | null
    created_on: Date | null
    updated_on: Date | null
    campaign_id: string | null
  }

  export type StaticMapMaxAggregateOutputType = {
    map_id: string | null
    name: string | null
    image_url: string | null
    created_on: Date | null
    updated_on: Date | null
    campaign_id: string | null
  }

  export type StaticMapCountAggregateOutputType = {
    map_id: number
    name: number
    image_url: number
    created_on: number
    updated_on: number
    campaign_id: number
    _all: number
  }


  export type StaticMapMinAggregateInputType = {
    map_id?: true
    name?: true
    image_url?: true
    created_on?: true
    updated_on?: true
    campaign_id?: true
  }

  export type StaticMapMaxAggregateInputType = {
    map_id?: true
    name?: true
    image_url?: true
    created_on?: true
    updated_on?: true
    campaign_id?: true
  }

  export type StaticMapCountAggregateInputType = {
    map_id?: true
    name?: true
    image_url?: true
    created_on?: true
    updated_on?: true
    campaign_id?: true
    _all?: true
  }

  export type StaticMapAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StaticMap to aggregate.
     */
    where?: StaticMapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaticMaps to fetch.
     */
    orderBy?: StaticMapOrderByWithRelationInput | StaticMapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StaticMapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaticMaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaticMaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StaticMaps
    **/
    _count?: true | StaticMapCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StaticMapMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StaticMapMaxAggregateInputType
  }

  export type GetStaticMapAggregateType<T extends StaticMapAggregateArgs> = {
        [P in keyof T & keyof AggregateStaticMap]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStaticMap[P]>
      : GetScalarType<T[P], AggregateStaticMap[P]>
  }




  export type StaticMapGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaticMapWhereInput
    orderBy?: StaticMapOrderByWithAggregationInput | StaticMapOrderByWithAggregationInput[]
    by: StaticMapScalarFieldEnum[] | StaticMapScalarFieldEnum
    having?: StaticMapScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StaticMapCountAggregateInputType | true
    _min?: StaticMapMinAggregateInputType
    _max?: StaticMapMaxAggregateInputType
  }

  export type StaticMapGroupByOutputType = {
    map_id: string
    name: string
    image_url: string
    created_on: Date
    updated_on: Date
    campaign_id: string | null
    _count: StaticMapCountAggregateOutputType | null
    _min: StaticMapMinAggregateOutputType | null
    _max: StaticMapMaxAggregateOutputType | null
  }

  type GetStaticMapGroupByPayload<T extends StaticMapGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StaticMapGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StaticMapGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StaticMapGroupByOutputType[P]>
            : GetScalarType<T[P], StaticMapGroupByOutputType[P]>
        }
      >
    >


  export type StaticMapSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    map_id?: boolean
    name?: boolean
    image_url?: boolean
    created_on?: boolean
    updated_on?: boolean
    campaign_id?: boolean
    campaign?: boolean | StaticMap$campaignArgs<ExtArgs>
    map_nodes?: boolean | StaticMap$map_nodesArgs<ExtArgs>
    _count?: boolean | StaticMapCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staticMap"]>

  export type StaticMapSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    map_id?: boolean
    name?: boolean
    image_url?: boolean
    created_on?: boolean
    updated_on?: boolean
    campaign_id?: boolean
    campaign?: boolean | StaticMap$campaignArgs<ExtArgs>
  }, ExtArgs["result"]["staticMap"]>

  export type StaticMapSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    map_id?: boolean
    name?: boolean
    image_url?: boolean
    created_on?: boolean
    updated_on?: boolean
    campaign_id?: boolean
    campaign?: boolean | StaticMap$campaignArgs<ExtArgs>
  }, ExtArgs["result"]["staticMap"]>

  export type StaticMapSelectScalar = {
    map_id?: boolean
    name?: boolean
    image_url?: boolean
    created_on?: boolean
    updated_on?: boolean
    campaign_id?: boolean
  }

  export type StaticMapOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"map_id" | "name" | "image_url" | "created_on" | "updated_on" | "campaign_id", ExtArgs["result"]["staticMap"]>
  export type StaticMapInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | StaticMap$campaignArgs<ExtArgs>
    map_nodes?: boolean | StaticMap$map_nodesArgs<ExtArgs>
    _count?: boolean | StaticMapCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StaticMapIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | StaticMap$campaignArgs<ExtArgs>
  }
  export type StaticMapIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | StaticMap$campaignArgs<ExtArgs>
  }

  export type $StaticMapPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StaticMap"
    objects: {
      campaign: Prisma.$CampaignPayload<ExtArgs> | null
      map_nodes: Prisma.$MapNodePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      map_id: string
      name: string
      image_url: string
      created_on: Date
      updated_on: Date
      campaign_id: string | null
    }, ExtArgs["result"]["staticMap"]>
    composites: {}
  }

  type StaticMapGetPayload<S extends boolean | null | undefined | StaticMapDefaultArgs> = $Result.GetResult<Prisma.$StaticMapPayload, S>

  type StaticMapCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StaticMapFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StaticMapCountAggregateInputType | true
    }

  export interface StaticMapDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StaticMap'], meta: { name: 'StaticMap' } }
    /**
     * Find zero or one StaticMap that matches the filter.
     * @param {StaticMapFindUniqueArgs} args - Arguments to find a StaticMap
     * @example
     * // Get one StaticMap
     * const staticMap = await prisma.staticMap.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StaticMapFindUniqueArgs>(args: SelectSubset<T, StaticMapFindUniqueArgs<ExtArgs>>): Prisma__StaticMapClient<$Result.GetResult<Prisma.$StaticMapPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one StaticMap that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StaticMapFindUniqueOrThrowArgs} args - Arguments to find a StaticMap
     * @example
     * // Get one StaticMap
     * const staticMap = await prisma.staticMap.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StaticMapFindUniqueOrThrowArgs>(args: SelectSubset<T, StaticMapFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StaticMapClient<$Result.GetResult<Prisma.$StaticMapPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first StaticMap that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaticMapFindFirstArgs} args - Arguments to find a StaticMap
     * @example
     * // Get one StaticMap
     * const staticMap = await prisma.staticMap.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StaticMapFindFirstArgs>(args?: SelectSubset<T, StaticMapFindFirstArgs<ExtArgs>>): Prisma__StaticMapClient<$Result.GetResult<Prisma.$StaticMapPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first StaticMap that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaticMapFindFirstOrThrowArgs} args - Arguments to find a StaticMap
     * @example
     * // Get one StaticMap
     * const staticMap = await prisma.staticMap.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StaticMapFindFirstOrThrowArgs>(args?: SelectSubset<T, StaticMapFindFirstOrThrowArgs<ExtArgs>>): Prisma__StaticMapClient<$Result.GetResult<Prisma.$StaticMapPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more StaticMaps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaticMapFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StaticMaps
     * const staticMaps = await prisma.staticMap.findMany()
     * 
     * // Get first 10 StaticMaps
     * const staticMaps = await prisma.staticMap.findMany({ take: 10 })
     * 
     * // Only select the `map_id`
     * const staticMapWithMap_idOnly = await prisma.staticMap.findMany({ select: { map_id: true } })
     * 
     */
    findMany<T extends StaticMapFindManyArgs>(args?: SelectSubset<T, StaticMapFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaticMapPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a StaticMap.
     * @param {StaticMapCreateArgs} args - Arguments to create a StaticMap.
     * @example
     * // Create one StaticMap
     * const StaticMap = await prisma.staticMap.create({
     *   data: {
     *     // ... data to create a StaticMap
     *   }
     * })
     * 
     */
    create<T extends StaticMapCreateArgs>(args: SelectSubset<T, StaticMapCreateArgs<ExtArgs>>): Prisma__StaticMapClient<$Result.GetResult<Prisma.$StaticMapPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many StaticMaps.
     * @param {StaticMapCreateManyArgs} args - Arguments to create many StaticMaps.
     * @example
     * // Create many StaticMaps
     * const staticMap = await prisma.staticMap.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StaticMapCreateManyArgs>(args?: SelectSubset<T, StaticMapCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StaticMaps and returns the data saved in the database.
     * @param {StaticMapCreateManyAndReturnArgs} args - Arguments to create many StaticMaps.
     * @example
     * // Create many StaticMaps
     * const staticMap = await prisma.staticMap.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StaticMaps and only return the `map_id`
     * const staticMapWithMap_idOnly = await prisma.staticMap.createManyAndReturn({
     *   select: { map_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StaticMapCreateManyAndReturnArgs>(args?: SelectSubset<T, StaticMapCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaticMapPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a StaticMap.
     * @param {StaticMapDeleteArgs} args - Arguments to delete one StaticMap.
     * @example
     * // Delete one StaticMap
     * const StaticMap = await prisma.staticMap.delete({
     *   where: {
     *     // ... filter to delete one StaticMap
     *   }
     * })
     * 
     */
    delete<T extends StaticMapDeleteArgs>(args: SelectSubset<T, StaticMapDeleteArgs<ExtArgs>>): Prisma__StaticMapClient<$Result.GetResult<Prisma.$StaticMapPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one StaticMap.
     * @param {StaticMapUpdateArgs} args - Arguments to update one StaticMap.
     * @example
     * // Update one StaticMap
     * const staticMap = await prisma.staticMap.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StaticMapUpdateArgs>(args: SelectSubset<T, StaticMapUpdateArgs<ExtArgs>>): Prisma__StaticMapClient<$Result.GetResult<Prisma.$StaticMapPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more StaticMaps.
     * @param {StaticMapDeleteManyArgs} args - Arguments to filter StaticMaps to delete.
     * @example
     * // Delete a few StaticMaps
     * const { count } = await prisma.staticMap.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StaticMapDeleteManyArgs>(args?: SelectSubset<T, StaticMapDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StaticMaps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaticMapUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StaticMaps
     * const staticMap = await prisma.staticMap.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StaticMapUpdateManyArgs>(args: SelectSubset<T, StaticMapUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StaticMaps and returns the data updated in the database.
     * @param {StaticMapUpdateManyAndReturnArgs} args - Arguments to update many StaticMaps.
     * @example
     * // Update many StaticMaps
     * const staticMap = await prisma.staticMap.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StaticMaps and only return the `map_id`
     * const staticMapWithMap_idOnly = await prisma.staticMap.updateManyAndReturn({
     *   select: { map_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StaticMapUpdateManyAndReturnArgs>(args: SelectSubset<T, StaticMapUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaticMapPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one StaticMap.
     * @param {StaticMapUpsertArgs} args - Arguments to update or create a StaticMap.
     * @example
     * // Update or create a StaticMap
     * const staticMap = await prisma.staticMap.upsert({
     *   create: {
     *     // ... data to create a StaticMap
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StaticMap we want to update
     *   }
     * })
     */
    upsert<T extends StaticMapUpsertArgs>(args: SelectSubset<T, StaticMapUpsertArgs<ExtArgs>>): Prisma__StaticMapClient<$Result.GetResult<Prisma.$StaticMapPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of StaticMaps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaticMapCountArgs} args - Arguments to filter StaticMaps to count.
     * @example
     * // Count the number of StaticMaps
     * const count = await prisma.staticMap.count({
     *   where: {
     *     // ... the filter for the StaticMaps we want to count
     *   }
     * })
    **/
    count<T extends StaticMapCountArgs>(
      args?: Subset<T, StaticMapCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StaticMapCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StaticMap.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaticMapAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StaticMapAggregateArgs>(args: Subset<T, StaticMapAggregateArgs>): Prisma.PrismaPromise<GetStaticMapAggregateType<T>>

    /**
     * Group by StaticMap.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaticMapGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StaticMapGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StaticMapGroupByArgs['orderBy'] }
        : { orderBy?: StaticMapGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StaticMapGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaticMapGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StaticMap model
   */
  readonly fields: StaticMapFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StaticMap.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StaticMapClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    campaign<T extends StaticMap$campaignArgs<ExtArgs> = {}>(args?: Subset<T, StaticMap$campaignArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    map_nodes<T extends StaticMap$map_nodesArgs<ExtArgs> = {}>(args?: Subset<T, StaticMap$map_nodesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MapNodePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StaticMap model
   */ 
  interface StaticMapFieldRefs {
    readonly map_id: FieldRef<"StaticMap", 'String'>
    readonly name: FieldRef<"StaticMap", 'String'>
    readonly image_url: FieldRef<"StaticMap", 'String'>
    readonly created_on: FieldRef<"StaticMap", 'DateTime'>
    readonly updated_on: FieldRef<"StaticMap", 'DateTime'>
    readonly campaign_id: FieldRef<"StaticMap", 'String'>
  }
    

  // Custom InputTypes
  /**
   * StaticMap findUnique
   */
  export type StaticMapFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaticMap
     */
    select?: StaticMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaticMap
     */
    omit?: StaticMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaticMapInclude<ExtArgs> | null
    /**
     * Filter, which StaticMap to fetch.
     */
    where: StaticMapWhereUniqueInput
  }

  /**
   * StaticMap findUniqueOrThrow
   */
  export type StaticMapFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaticMap
     */
    select?: StaticMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaticMap
     */
    omit?: StaticMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaticMapInclude<ExtArgs> | null
    /**
     * Filter, which StaticMap to fetch.
     */
    where: StaticMapWhereUniqueInput
  }

  /**
   * StaticMap findFirst
   */
  export type StaticMapFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaticMap
     */
    select?: StaticMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaticMap
     */
    omit?: StaticMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaticMapInclude<ExtArgs> | null
    /**
     * Filter, which StaticMap to fetch.
     */
    where?: StaticMapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaticMaps to fetch.
     */
    orderBy?: StaticMapOrderByWithRelationInput | StaticMapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StaticMaps.
     */
    cursor?: StaticMapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaticMaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaticMaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StaticMaps.
     */
    distinct?: StaticMapScalarFieldEnum | StaticMapScalarFieldEnum[]
  }

  /**
   * StaticMap findFirstOrThrow
   */
  export type StaticMapFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaticMap
     */
    select?: StaticMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaticMap
     */
    omit?: StaticMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaticMapInclude<ExtArgs> | null
    /**
     * Filter, which StaticMap to fetch.
     */
    where?: StaticMapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaticMaps to fetch.
     */
    orderBy?: StaticMapOrderByWithRelationInput | StaticMapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StaticMaps.
     */
    cursor?: StaticMapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaticMaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaticMaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StaticMaps.
     */
    distinct?: StaticMapScalarFieldEnum | StaticMapScalarFieldEnum[]
  }

  /**
   * StaticMap findMany
   */
  export type StaticMapFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaticMap
     */
    select?: StaticMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaticMap
     */
    omit?: StaticMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaticMapInclude<ExtArgs> | null
    /**
     * Filter, which StaticMaps to fetch.
     */
    where?: StaticMapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaticMaps to fetch.
     */
    orderBy?: StaticMapOrderByWithRelationInput | StaticMapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StaticMaps.
     */
    cursor?: StaticMapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaticMaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaticMaps.
     */
    skip?: number
    distinct?: StaticMapScalarFieldEnum | StaticMapScalarFieldEnum[]
  }

  /**
   * StaticMap create
   */
  export type StaticMapCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaticMap
     */
    select?: StaticMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaticMap
     */
    omit?: StaticMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaticMapInclude<ExtArgs> | null
    /**
     * The data needed to create a StaticMap.
     */
    data: XOR<StaticMapCreateInput, StaticMapUncheckedCreateInput>
  }

  /**
   * StaticMap createMany
   */
  export type StaticMapCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StaticMaps.
     */
    data: StaticMapCreateManyInput | StaticMapCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StaticMap createManyAndReturn
   */
  export type StaticMapCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaticMap
     */
    select?: StaticMapSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StaticMap
     */
    omit?: StaticMapOmit<ExtArgs> | null
    /**
     * The data used to create many StaticMaps.
     */
    data: StaticMapCreateManyInput | StaticMapCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaticMapIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StaticMap update
   */
  export type StaticMapUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaticMap
     */
    select?: StaticMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaticMap
     */
    omit?: StaticMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaticMapInclude<ExtArgs> | null
    /**
     * The data needed to update a StaticMap.
     */
    data: XOR<StaticMapUpdateInput, StaticMapUncheckedUpdateInput>
    /**
     * Choose, which StaticMap to update.
     */
    where: StaticMapWhereUniqueInput
  }

  /**
   * StaticMap updateMany
   */
  export type StaticMapUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StaticMaps.
     */
    data: XOR<StaticMapUpdateManyMutationInput, StaticMapUncheckedUpdateManyInput>
    /**
     * Filter which StaticMaps to update
     */
    where?: StaticMapWhereInput
  }

  /**
   * StaticMap updateManyAndReturn
   */
  export type StaticMapUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaticMap
     */
    select?: StaticMapSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StaticMap
     */
    omit?: StaticMapOmit<ExtArgs> | null
    /**
     * The data used to update StaticMaps.
     */
    data: XOR<StaticMapUpdateManyMutationInput, StaticMapUncheckedUpdateManyInput>
    /**
     * Filter which StaticMaps to update
     */
    where?: StaticMapWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaticMapIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StaticMap upsert
   */
  export type StaticMapUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaticMap
     */
    select?: StaticMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaticMap
     */
    omit?: StaticMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaticMapInclude<ExtArgs> | null
    /**
     * The filter to search for the StaticMap to update in case it exists.
     */
    where: StaticMapWhereUniqueInput
    /**
     * In case the StaticMap found by the `where` argument doesn't exist, create a new StaticMap with this data.
     */
    create: XOR<StaticMapCreateInput, StaticMapUncheckedCreateInput>
    /**
     * In case the StaticMap was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StaticMapUpdateInput, StaticMapUncheckedUpdateInput>
  }

  /**
   * StaticMap delete
   */
  export type StaticMapDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaticMap
     */
    select?: StaticMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaticMap
     */
    omit?: StaticMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaticMapInclude<ExtArgs> | null
    /**
     * Filter which StaticMap to delete.
     */
    where: StaticMapWhereUniqueInput
  }

  /**
   * StaticMap deleteMany
   */
  export type StaticMapDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StaticMaps to delete
     */
    where?: StaticMapWhereInput
  }

  /**
   * StaticMap.campaign
   */
  export type StaticMap$campaignArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    where?: CampaignWhereInput
  }

  /**
   * StaticMap.map_nodes
   */
  export type StaticMap$map_nodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MapNode
     */
    select?: MapNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MapNode
     */
    omit?: MapNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MapNodeInclude<ExtArgs> | null
    where?: MapNodeWhereInput
    orderBy?: MapNodeOrderByWithRelationInput | MapNodeOrderByWithRelationInput[]
    cursor?: MapNodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MapNodeScalarFieldEnum | MapNodeScalarFieldEnum[]
  }

  /**
   * StaticMap without action
   */
  export type StaticMapDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaticMap
     */
    select?: StaticMapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaticMap
     */
    omit?: StaticMapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaticMapInclude<ExtArgs> | null
  }


  /**
   * Model NodeType
   */

  export type AggregateNodeType = {
    _count: NodeTypeCountAggregateOutputType | null
    _min: NodeTypeMinAggregateOutputType | null
    _max: NodeTypeMaxAggregateOutputType | null
  }

  export type NodeTypeMinAggregateOutputType = {
    node_type_id: string | null
    name: string | null
    campaign_id: string | null
  }

  export type NodeTypeMaxAggregateOutputType = {
    node_type_id: string | null
    name: string | null
    campaign_id: string | null
  }

  export type NodeTypeCountAggregateOutputType = {
    node_type_id: number
    name: number
    allowed_attributes: number
    campaign_id: number
    _all: number
  }


  export type NodeTypeMinAggregateInputType = {
    node_type_id?: true
    name?: true
    campaign_id?: true
  }

  export type NodeTypeMaxAggregateInputType = {
    node_type_id?: true
    name?: true
    campaign_id?: true
  }

  export type NodeTypeCountAggregateInputType = {
    node_type_id?: true
    name?: true
    allowed_attributes?: true
    campaign_id?: true
    _all?: true
  }

  export type NodeTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NodeType to aggregate.
     */
    where?: NodeTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NodeTypes to fetch.
     */
    orderBy?: NodeTypeOrderByWithRelationInput | NodeTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NodeTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NodeTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NodeTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NodeTypes
    **/
    _count?: true | NodeTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NodeTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NodeTypeMaxAggregateInputType
  }

  export type GetNodeTypeAggregateType<T extends NodeTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateNodeType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNodeType[P]>
      : GetScalarType<T[P], AggregateNodeType[P]>
  }




  export type NodeTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NodeTypeWhereInput
    orderBy?: NodeTypeOrderByWithAggregationInput | NodeTypeOrderByWithAggregationInput[]
    by: NodeTypeScalarFieldEnum[] | NodeTypeScalarFieldEnum
    having?: NodeTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NodeTypeCountAggregateInputType | true
    _min?: NodeTypeMinAggregateInputType
    _max?: NodeTypeMaxAggregateInputType
  }

  export type NodeTypeGroupByOutputType = {
    node_type_id: string
    name: string
    allowed_attributes: string[]
    campaign_id: string
    _count: NodeTypeCountAggregateOutputType | null
    _min: NodeTypeMinAggregateOutputType | null
    _max: NodeTypeMaxAggregateOutputType | null
  }

  type GetNodeTypeGroupByPayload<T extends NodeTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NodeTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NodeTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NodeTypeGroupByOutputType[P]>
            : GetScalarType<T[P], NodeTypeGroupByOutputType[P]>
        }
      >
    >


  export type NodeTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    node_type_id?: boolean
    name?: boolean
    allowed_attributes?: boolean
    campaign_id?: boolean
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
    nodes?: boolean | NodeType$nodesArgs<ExtArgs>
    _count?: boolean | NodeTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nodeType"]>

  export type NodeTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    node_type_id?: boolean
    name?: boolean
    allowed_attributes?: boolean
    campaign_id?: boolean
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nodeType"]>

  export type NodeTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    node_type_id?: boolean
    name?: boolean
    allowed_attributes?: boolean
    campaign_id?: boolean
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nodeType"]>

  export type NodeTypeSelectScalar = {
    node_type_id?: boolean
    name?: boolean
    allowed_attributes?: boolean
    campaign_id?: boolean
  }

  export type NodeTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"node_type_id" | "name" | "allowed_attributes" | "campaign_id", ExtArgs["result"]["nodeType"]>
  export type NodeTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
    nodes?: boolean | NodeType$nodesArgs<ExtArgs>
    _count?: boolean | NodeTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type NodeTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }
  export type NodeTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }

  export type $NodeTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NodeType"
    objects: {
      campaign: Prisma.$CampaignPayload<ExtArgs>
      nodes: Prisma.$NodePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      node_type_id: string
      name: string
      allowed_attributes: string[]
      campaign_id: string
    }, ExtArgs["result"]["nodeType"]>
    composites: {}
  }

  type NodeTypeGetPayload<S extends boolean | null | undefined | NodeTypeDefaultArgs> = $Result.GetResult<Prisma.$NodeTypePayload, S>

  type NodeTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NodeTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NodeTypeCountAggregateInputType | true
    }

  export interface NodeTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NodeType'], meta: { name: 'NodeType' } }
    /**
     * Find zero or one NodeType that matches the filter.
     * @param {NodeTypeFindUniqueArgs} args - Arguments to find a NodeType
     * @example
     * // Get one NodeType
     * const nodeType = await prisma.nodeType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NodeTypeFindUniqueArgs>(args: SelectSubset<T, NodeTypeFindUniqueArgs<ExtArgs>>): Prisma__NodeTypeClient<$Result.GetResult<Prisma.$NodeTypePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one NodeType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NodeTypeFindUniqueOrThrowArgs} args - Arguments to find a NodeType
     * @example
     * // Get one NodeType
     * const nodeType = await prisma.nodeType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NodeTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, NodeTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NodeTypeClient<$Result.GetResult<Prisma.$NodeTypePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first NodeType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodeTypeFindFirstArgs} args - Arguments to find a NodeType
     * @example
     * // Get one NodeType
     * const nodeType = await prisma.nodeType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NodeTypeFindFirstArgs>(args?: SelectSubset<T, NodeTypeFindFirstArgs<ExtArgs>>): Prisma__NodeTypeClient<$Result.GetResult<Prisma.$NodeTypePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first NodeType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodeTypeFindFirstOrThrowArgs} args - Arguments to find a NodeType
     * @example
     * // Get one NodeType
     * const nodeType = await prisma.nodeType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NodeTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, NodeTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__NodeTypeClient<$Result.GetResult<Prisma.$NodeTypePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more NodeTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodeTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NodeTypes
     * const nodeTypes = await prisma.nodeType.findMany()
     * 
     * // Get first 10 NodeTypes
     * const nodeTypes = await prisma.nodeType.findMany({ take: 10 })
     * 
     * // Only select the `node_type_id`
     * const nodeTypeWithNode_type_idOnly = await prisma.nodeType.findMany({ select: { node_type_id: true } })
     * 
     */
    findMany<T extends NodeTypeFindManyArgs>(args?: SelectSubset<T, NodeTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NodeTypePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a NodeType.
     * @param {NodeTypeCreateArgs} args - Arguments to create a NodeType.
     * @example
     * // Create one NodeType
     * const NodeType = await prisma.nodeType.create({
     *   data: {
     *     // ... data to create a NodeType
     *   }
     * })
     * 
     */
    create<T extends NodeTypeCreateArgs>(args: SelectSubset<T, NodeTypeCreateArgs<ExtArgs>>): Prisma__NodeTypeClient<$Result.GetResult<Prisma.$NodeTypePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many NodeTypes.
     * @param {NodeTypeCreateManyArgs} args - Arguments to create many NodeTypes.
     * @example
     * // Create many NodeTypes
     * const nodeType = await prisma.nodeType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NodeTypeCreateManyArgs>(args?: SelectSubset<T, NodeTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NodeTypes and returns the data saved in the database.
     * @param {NodeTypeCreateManyAndReturnArgs} args - Arguments to create many NodeTypes.
     * @example
     * // Create many NodeTypes
     * const nodeType = await prisma.nodeType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NodeTypes and only return the `node_type_id`
     * const nodeTypeWithNode_type_idOnly = await prisma.nodeType.createManyAndReturn({
     *   select: { node_type_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NodeTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, NodeTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NodeTypePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a NodeType.
     * @param {NodeTypeDeleteArgs} args - Arguments to delete one NodeType.
     * @example
     * // Delete one NodeType
     * const NodeType = await prisma.nodeType.delete({
     *   where: {
     *     // ... filter to delete one NodeType
     *   }
     * })
     * 
     */
    delete<T extends NodeTypeDeleteArgs>(args: SelectSubset<T, NodeTypeDeleteArgs<ExtArgs>>): Prisma__NodeTypeClient<$Result.GetResult<Prisma.$NodeTypePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one NodeType.
     * @param {NodeTypeUpdateArgs} args - Arguments to update one NodeType.
     * @example
     * // Update one NodeType
     * const nodeType = await prisma.nodeType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NodeTypeUpdateArgs>(args: SelectSubset<T, NodeTypeUpdateArgs<ExtArgs>>): Prisma__NodeTypeClient<$Result.GetResult<Prisma.$NodeTypePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more NodeTypes.
     * @param {NodeTypeDeleteManyArgs} args - Arguments to filter NodeTypes to delete.
     * @example
     * // Delete a few NodeTypes
     * const { count } = await prisma.nodeType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NodeTypeDeleteManyArgs>(args?: SelectSubset<T, NodeTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NodeTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodeTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NodeTypes
     * const nodeType = await prisma.nodeType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NodeTypeUpdateManyArgs>(args: SelectSubset<T, NodeTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NodeTypes and returns the data updated in the database.
     * @param {NodeTypeUpdateManyAndReturnArgs} args - Arguments to update many NodeTypes.
     * @example
     * // Update many NodeTypes
     * const nodeType = await prisma.nodeType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more NodeTypes and only return the `node_type_id`
     * const nodeTypeWithNode_type_idOnly = await prisma.nodeType.updateManyAndReturn({
     *   select: { node_type_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NodeTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, NodeTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NodeTypePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one NodeType.
     * @param {NodeTypeUpsertArgs} args - Arguments to update or create a NodeType.
     * @example
     * // Update or create a NodeType
     * const nodeType = await prisma.nodeType.upsert({
     *   create: {
     *     // ... data to create a NodeType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NodeType we want to update
     *   }
     * })
     */
    upsert<T extends NodeTypeUpsertArgs>(args: SelectSubset<T, NodeTypeUpsertArgs<ExtArgs>>): Prisma__NodeTypeClient<$Result.GetResult<Prisma.$NodeTypePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of NodeTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodeTypeCountArgs} args - Arguments to filter NodeTypes to count.
     * @example
     * // Count the number of NodeTypes
     * const count = await prisma.nodeType.count({
     *   where: {
     *     // ... the filter for the NodeTypes we want to count
     *   }
     * })
    **/
    count<T extends NodeTypeCountArgs>(
      args?: Subset<T, NodeTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NodeTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NodeType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodeTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NodeTypeAggregateArgs>(args: Subset<T, NodeTypeAggregateArgs>): Prisma.PrismaPromise<GetNodeTypeAggregateType<T>>

    /**
     * Group by NodeType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodeTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NodeTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NodeTypeGroupByArgs['orderBy'] }
        : { orderBy?: NodeTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NodeTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNodeTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NodeType model
   */
  readonly fields: NodeTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NodeType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NodeTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    campaign<T extends CampaignDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CampaignDefaultArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    nodes<T extends NodeType$nodesArgs<ExtArgs> = {}>(args?: Subset<T, NodeType$nodesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NodePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NodeType model
   */ 
  interface NodeTypeFieldRefs {
    readonly node_type_id: FieldRef<"NodeType", 'String'>
    readonly name: FieldRef<"NodeType", 'String'>
    readonly allowed_attributes: FieldRef<"NodeType", 'String[]'>
    readonly campaign_id: FieldRef<"NodeType", 'String'>
  }
    

  // Custom InputTypes
  /**
   * NodeType findUnique
   */
  export type NodeTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeType
     */
    select?: NodeTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeType
     */
    omit?: NodeTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeTypeInclude<ExtArgs> | null
    /**
     * Filter, which NodeType to fetch.
     */
    where: NodeTypeWhereUniqueInput
  }

  /**
   * NodeType findUniqueOrThrow
   */
  export type NodeTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeType
     */
    select?: NodeTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeType
     */
    omit?: NodeTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeTypeInclude<ExtArgs> | null
    /**
     * Filter, which NodeType to fetch.
     */
    where: NodeTypeWhereUniqueInput
  }

  /**
   * NodeType findFirst
   */
  export type NodeTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeType
     */
    select?: NodeTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeType
     */
    omit?: NodeTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeTypeInclude<ExtArgs> | null
    /**
     * Filter, which NodeType to fetch.
     */
    where?: NodeTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NodeTypes to fetch.
     */
    orderBy?: NodeTypeOrderByWithRelationInput | NodeTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NodeTypes.
     */
    cursor?: NodeTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NodeTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NodeTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NodeTypes.
     */
    distinct?: NodeTypeScalarFieldEnum | NodeTypeScalarFieldEnum[]
  }

  /**
   * NodeType findFirstOrThrow
   */
  export type NodeTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeType
     */
    select?: NodeTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeType
     */
    omit?: NodeTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeTypeInclude<ExtArgs> | null
    /**
     * Filter, which NodeType to fetch.
     */
    where?: NodeTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NodeTypes to fetch.
     */
    orderBy?: NodeTypeOrderByWithRelationInput | NodeTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NodeTypes.
     */
    cursor?: NodeTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NodeTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NodeTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NodeTypes.
     */
    distinct?: NodeTypeScalarFieldEnum | NodeTypeScalarFieldEnum[]
  }

  /**
   * NodeType findMany
   */
  export type NodeTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeType
     */
    select?: NodeTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeType
     */
    omit?: NodeTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeTypeInclude<ExtArgs> | null
    /**
     * Filter, which NodeTypes to fetch.
     */
    where?: NodeTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NodeTypes to fetch.
     */
    orderBy?: NodeTypeOrderByWithRelationInput | NodeTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NodeTypes.
     */
    cursor?: NodeTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NodeTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NodeTypes.
     */
    skip?: number
    distinct?: NodeTypeScalarFieldEnum | NodeTypeScalarFieldEnum[]
  }

  /**
   * NodeType create
   */
  export type NodeTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeType
     */
    select?: NodeTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeType
     */
    omit?: NodeTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a NodeType.
     */
    data: XOR<NodeTypeCreateInput, NodeTypeUncheckedCreateInput>
  }

  /**
   * NodeType createMany
   */
  export type NodeTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NodeTypes.
     */
    data: NodeTypeCreateManyInput | NodeTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NodeType createManyAndReturn
   */
  export type NodeTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeType
     */
    select?: NodeTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NodeType
     */
    omit?: NodeTypeOmit<ExtArgs> | null
    /**
     * The data used to create many NodeTypes.
     */
    data: NodeTypeCreateManyInput | NodeTypeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeTypeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NodeType update
   */
  export type NodeTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeType
     */
    select?: NodeTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeType
     */
    omit?: NodeTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a NodeType.
     */
    data: XOR<NodeTypeUpdateInput, NodeTypeUncheckedUpdateInput>
    /**
     * Choose, which NodeType to update.
     */
    where: NodeTypeWhereUniqueInput
  }

  /**
   * NodeType updateMany
   */
  export type NodeTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NodeTypes.
     */
    data: XOR<NodeTypeUpdateManyMutationInput, NodeTypeUncheckedUpdateManyInput>
    /**
     * Filter which NodeTypes to update
     */
    where?: NodeTypeWhereInput
  }

  /**
   * NodeType updateManyAndReturn
   */
  export type NodeTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeType
     */
    select?: NodeTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NodeType
     */
    omit?: NodeTypeOmit<ExtArgs> | null
    /**
     * The data used to update NodeTypes.
     */
    data: XOR<NodeTypeUpdateManyMutationInput, NodeTypeUncheckedUpdateManyInput>
    /**
     * Filter which NodeTypes to update
     */
    where?: NodeTypeWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeTypeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * NodeType upsert
   */
  export type NodeTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeType
     */
    select?: NodeTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeType
     */
    omit?: NodeTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the NodeType to update in case it exists.
     */
    where: NodeTypeWhereUniqueInput
    /**
     * In case the NodeType found by the `where` argument doesn't exist, create a new NodeType with this data.
     */
    create: XOR<NodeTypeCreateInput, NodeTypeUncheckedCreateInput>
    /**
     * In case the NodeType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NodeTypeUpdateInput, NodeTypeUncheckedUpdateInput>
  }

  /**
   * NodeType delete
   */
  export type NodeTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeType
     */
    select?: NodeTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeType
     */
    omit?: NodeTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeTypeInclude<ExtArgs> | null
    /**
     * Filter which NodeType to delete.
     */
    where: NodeTypeWhereUniqueInput
  }

  /**
   * NodeType deleteMany
   */
  export type NodeTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NodeTypes to delete
     */
    where?: NodeTypeWhereInput
  }

  /**
   * NodeType.nodes
   */
  export type NodeType$nodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Node
     */
    select?: NodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Node
     */
    omit?: NodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeInclude<ExtArgs> | null
    where?: NodeWhereInput
    orderBy?: NodeOrderByWithRelationInput | NodeOrderByWithRelationInput[]
    cursor?: NodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NodeScalarFieldEnum | NodeScalarFieldEnum[]
  }

  /**
   * NodeType without action
   */
  export type NodeTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeType
     */
    select?: NodeTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeType
     */
    omit?: NodeTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeTypeInclude<ExtArgs> | null
  }


  /**
   * Model Attribute
   */

  export type AggregateAttribute = {
    _count: AttributeCountAggregateOutputType | null
    _avg: AttributeAvgAggregateOutputType | null
    _sum: AttributeSumAggregateOutputType | null
    _min: AttributeMinAggregateOutputType | null
    _max: AttributeMaxAggregateOutputType | null
  }

  export type AttributeAvgAggregateOutputType = {
    value: number | null
  }

  export type AttributeSumAggregateOutputType = {
    value: number | null
  }

  export type AttributeMinAggregateOutputType = {
    attribute_id: string | null
    title: string | null
    value: number | null
    node_id: string | null
  }

  export type AttributeMaxAggregateOutputType = {
    attribute_id: string | null
    title: string | null
    value: number | null
    node_id: string | null
  }

  export type AttributeCountAggregateOutputType = {
    attribute_id: number
    title: number
    value: number
    node_id: number
    _all: number
  }


  export type AttributeAvgAggregateInputType = {
    value?: true
  }

  export type AttributeSumAggregateInputType = {
    value?: true
  }

  export type AttributeMinAggregateInputType = {
    attribute_id?: true
    title?: true
    value?: true
    node_id?: true
  }

  export type AttributeMaxAggregateInputType = {
    attribute_id?: true
    title?: true
    value?: true
    node_id?: true
  }

  export type AttributeCountAggregateInputType = {
    attribute_id?: true
    title?: true
    value?: true
    node_id?: true
    _all?: true
  }

  export type AttributeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attribute to aggregate.
     */
    where?: AttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attributes to fetch.
     */
    orderBy?: AttributeOrderByWithRelationInput | AttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attributes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Attributes
    **/
    _count?: true | AttributeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AttributeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AttributeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttributeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttributeMaxAggregateInputType
  }

  export type GetAttributeAggregateType<T extends AttributeAggregateArgs> = {
        [P in keyof T & keyof AggregateAttribute]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttribute[P]>
      : GetScalarType<T[P], AggregateAttribute[P]>
  }




  export type AttributeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttributeWhereInput
    orderBy?: AttributeOrderByWithAggregationInput | AttributeOrderByWithAggregationInput[]
    by: AttributeScalarFieldEnum[] | AttributeScalarFieldEnum
    having?: AttributeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttributeCountAggregateInputType | true
    _avg?: AttributeAvgAggregateInputType
    _sum?: AttributeSumAggregateInputType
    _min?: AttributeMinAggregateInputType
    _max?: AttributeMaxAggregateInputType
  }

  export type AttributeGroupByOutputType = {
    attribute_id: string
    title: string
    value: number
    node_id: string
    _count: AttributeCountAggregateOutputType | null
    _avg: AttributeAvgAggregateOutputType | null
    _sum: AttributeSumAggregateOutputType | null
    _min: AttributeMinAggregateOutputType | null
    _max: AttributeMaxAggregateOutputType | null
  }

  type GetAttributeGroupByPayload<T extends AttributeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttributeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttributeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttributeGroupByOutputType[P]>
            : GetScalarType<T[P], AttributeGroupByOutputType[P]>
        }
      >
    >


  export type AttributeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    attribute_id?: boolean
    title?: boolean
    value?: boolean
    node_id?: boolean
    nodes?: boolean | NodeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attribute"]>

  export type AttributeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    attribute_id?: boolean
    title?: boolean
    value?: boolean
    node_id?: boolean
    nodes?: boolean | NodeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attribute"]>

  export type AttributeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    attribute_id?: boolean
    title?: boolean
    value?: boolean
    node_id?: boolean
    nodes?: boolean | NodeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attribute"]>

  export type AttributeSelectScalar = {
    attribute_id?: boolean
    title?: boolean
    value?: boolean
    node_id?: boolean
  }

  export type AttributeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"attribute_id" | "title" | "value" | "node_id", ExtArgs["result"]["attribute"]>
  export type AttributeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nodes?: boolean | NodeDefaultArgs<ExtArgs>
  }
  export type AttributeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nodes?: boolean | NodeDefaultArgs<ExtArgs>
  }
  export type AttributeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nodes?: boolean | NodeDefaultArgs<ExtArgs>
  }

  export type $AttributePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Attribute"
    objects: {
      nodes: Prisma.$NodePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      attribute_id: string
      title: string
      value: number
      node_id: string
    }, ExtArgs["result"]["attribute"]>
    composites: {}
  }

  type AttributeGetPayload<S extends boolean | null | undefined | AttributeDefaultArgs> = $Result.GetResult<Prisma.$AttributePayload, S>

  type AttributeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AttributeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AttributeCountAggregateInputType | true
    }

  export interface AttributeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Attribute'], meta: { name: 'Attribute' } }
    /**
     * Find zero or one Attribute that matches the filter.
     * @param {AttributeFindUniqueArgs} args - Arguments to find a Attribute
     * @example
     * // Get one Attribute
     * const attribute = await prisma.attribute.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AttributeFindUniqueArgs>(args: SelectSubset<T, AttributeFindUniqueArgs<ExtArgs>>): Prisma__AttributeClient<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Attribute that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AttributeFindUniqueOrThrowArgs} args - Arguments to find a Attribute
     * @example
     * // Get one Attribute
     * const attribute = await prisma.attribute.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AttributeFindUniqueOrThrowArgs>(args: SelectSubset<T, AttributeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AttributeClient<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Attribute that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttributeFindFirstArgs} args - Arguments to find a Attribute
     * @example
     * // Get one Attribute
     * const attribute = await prisma.attribute.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AttributeFindFirstArgs>(args?: SelectSubset<T, AttributeFindFirstArgs<ExtArgs>>): Prisma__AttributeClient<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Attribute that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttributeFindFirstOrThrowArgs} args - Arguments to find a Attribute
     * @example
     * // Get one Attribute
     * const attribute = await prisma.attribute.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AttributeFindFirstOrThrowArgs>(args?: SelectSubset<T, AttributeFindFirstOrThrowArgs<ExtArgs>>): Prisma__AttributeClient<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Attributes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttributeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Attributes
     * const attributes = await prisma.attribute.findMany()
     * 
     * // Get first 10 Attributes
     * const attributes = await prisma.attribute.findMany({ take: 10 })
     * 
     * // Only select the `attribute_id`
     * const attributeWithAttribute_idOnly = await prisma.attribute.findMany({ select: { attribute_id: true } })
     * 
     */
    findMany<T extends AttributeFindManyArgs>(args?: SelectSubset<T, AttributeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Attribute.
     * @param {AttributeCreateArgs} args - Arguments to create a Attribute.
     * @example
     * // Create one Attribute
     * const Attribute = await prisma.attribute.create({
     *   data: {
     *     // ... data to create a Attribute
     *   }
     * })
     * 
     */
    create<T extends AttributeCreateArgs>(args: SelectSubset<T, AttributeCreateArgs<ExtArgs>>): Prisma__AttributeClient<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Attributes.
     * @param {AttributeCreateManyArgs} args - Arguments to create many Attributes.
     * @example
     * // Create many Attributes
     * const attribute = await prisma.attribute.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AttributeCreateManyArgs>(args?: SelectSubset<T, AttributeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Attributes and returns the data saved in the database.
     * @param {AttributeCreateManyAndReturnArgs} args - Arguments to create many Attributes.
     * @example
     * // Create many Attributes
     * const attribute = await prisma.attribute.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Attributes and only return the `attribute_id`
     * const attributeWithAttribute_idOnly = await prisma.attribute.createManyAndReturn({
     *   select: { attribute_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AttributeCreateManyAndReturnArgs>(args?: SelectSubset<T, AttributeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Attribute.
     * @param {AttributeDeleteArgs} args - Arguments to delete one Attribute.
     * @example
     * // Delete one Attribute
     * const Attribute = await prisma.attribute.delete({
     *   where: {
     *     // ... filter to delete one Attribute
     *   }
     * })
     * 
     */
    delete<T extends AttributeDeleteArgs>(args: SelectSubset<T, AttributeDeleteArgs<ExtArgs>>): Prisma__AttributeClient<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Attribute.
     * @param {AttributeUpdateArgs} args - Arguments to update one Attribute.
     * @example
     * // Update one Attribute
     * const attribute = await prisma.attribute.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AttributeUpdateArgs>(args: SelectSubset<T, AttributeUpdateArgs<ExtArgs>>): Prisma__AttributeClient<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Attributes.
     * @param {AttributeDeleteManyArgs} args - Arguments to filter Attributes to delete.
     * @example
     * // Delete a few Attributes
     * const { count } = await prisma.attribute.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AttributeDeleteManyArgs>(args?: SelectSubset<T, AttributeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attributes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttributeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Attributes
     * const attribute = await prisma.attribute.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AttributeUpdateManyArgs>(args: SelectSubset<T, AttributeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attributes and returns the data updated in the database.
     * @param {AttributeUpdateManyAndReturnArgs} args - Arguments to update many Attributes.
     * @example
     * // Update many Attributes
     * const attribute = await prisma.attribute.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Attributes and only return the `attribute_id`
     * const attributeWithAttribute_idOnly = await prisma.attribute.updateManyAndReturn({
     *   select: { attribute_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AttributeUpdateManyAndReturnArgs>(args: SelectSubset<T, AttributeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Attribute.
     * @param {AttributeUpsertArgs} args - Arguments to update or create a Attribute.
     * @example
     * // Update or create a Attribute
     * const attribute = await prisma.attribute.upsert({
     *   create: {
     *     // ... data to create a Attribute
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Attribute we want to update
     *   }
     * })
     */
    upsert<T extends AttributeUpsertArgs>(args: SelectSubset<T, AttributeUpsertArgs<ExtArgs>>): Prisma__AttributeClient<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Attributes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttributeCountArgs} args - Arguments to filter Attributes to count.
     * @example
     * // Count the number of Attributes
     * const count = await prisma.attribute.count({
     *   where: {
     *     // ... the filter for the Attributes we want to count
     *   }
     * })
    **/
    count<T extends AttributeCountArgs>(
      args?: Subset<T, AttributeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttributeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Attribute.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttributeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttributeAggregateArgs>(args: Subset<T, AttributeAggregateArgs>): Prisma.PrismaPromise<GetAttributeAggregateType<T>>

    /**
     * Group by Attribute.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttributeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttributeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttributeGroupByArgs['orderBy'] }
        : { orderBy?: AttributeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttributeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttributeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Attribute model
   */
  readonly fields: AttributeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Attribute.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AttributeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    nodes<T extends NodeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NodeDefaultArgs<ExtArgs>>): Prisma__NodeClient<$Result.GetResult<Prisma.$NodePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Attribute model
   */ 
  interface AttributeFieldRefs {
    readonly attribute_id: FieldRef<"Attribute", 'String'>
    readonly title: FieldRef<"Attribute", 'String'>
    readonly value: FieldRef<"Attribute", 'Int'>
    readonly node_id: FieldRef<"Attribute", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Attribute findUnique
   */
  export type AttributeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attribute
     */
    omit?: AttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
    /**
     * Filter, which Attribute to fetch.
     */
    where: AttributeWhereUniqueInput
  }

  /**
   * Attribute findUniqueOrThrow
   */
  export type AttributeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attribute
     */
    omit?: AttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
    /**
     * Filter, which Attribute to fetch.
     */
    where: AttributeWhereUniqueInput
  }

  /**
   * Attribute findFirst
   */
  export type AttributeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attribute
     */
    omit?: AttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
    /**
     * Filter, which Attribute to fetch.
     */
    where?: AttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attributes to fetch.
     */
    orderBy?: AttributeOrderByWithRelationInput | AttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attributes.
     */
    cursor?: AttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attributes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attributes.
     */
    distinct?: AttributeScalarFieldEnum | AttributeScalarFieldEnum[]
  }

  /**
   * Attribute findFirstOrThrow
   */
  export type AttributeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attribute
     */
    omit?: AttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
    /**
     * Filter, which Attribute to fetch.
     */
    where?: AttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attributes to fetch.
     */
    orderBy?: AttributeOrderByWithRelationInput | AttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attributes.
     */
    cursor?: AttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attributes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attributes.
     */
    distinct?: AttributeScalarFieldEnum | AttributeScalarFieldEnum[]
  }

  /**
   * Attribute findMany
   */
  export type AttributeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attribute
     */
    omit?: AttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
    /**
     * Filter, which Attributes to fetch.
     */
    where?: AttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attributes to fetch.
     */
    orderBy?: AttributeOrderByWithRelationInput | AttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Attributes.
     */
    cursor?: AttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attributes.
     */
    skip?: number
    distinct?: AttributeScalarFieldEnum | AttributeScalarFieldEnum[]
  }

  /**
   * Attribute create
   */
  export type AttributeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attribute
     */
    omit?: AttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
    /**
     * The data needed to create a Attribute.
     */
    data: XOR<AttributeCreateInput, AttributeUncheckedCreateInput>
  }

  /**
   * Attribute createMany
   */
  export type AttributeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Attributes.
     */
    data: AttributeCreateManyInput | AttributeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Attribute createManyAndReturn
   */
  export type AttributeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Attribute
     */
    omit?: AttributeOmit<ExtArgs> | null
    /**
     * The data used to create many Attributes.
     */
    data: AttributeCreateManyInput | AttributeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Attribute update
   */
  export type AttributeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attribute
     */
    omit?: AttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
    /**
     * The data needed to update a Attribute.
     */
    data: XOR<AttributeUpdateInput, AttributeUncheckedUpdateInput>
    /**
     * Choose, which Attribute to update.
     */
    where: AttributeWhereUniqueInput
  }

  /**
   * Attribute updateMany
   */
  export type AttributeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Attributes.
     */
    data: XOR<AttributeUpdateManyMutationInput, AttributeUncheckedUpdateManyInput>
    /**
     * Filter which Attributes to update
     */
    where?: AttributeWhereInput
  }

  /**
   * Attribute updateManyAndReturn
   */
  export type AttributeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Attribute
     */
    omit?: AttributeOmit<ExtArgs> | null
    /**
     * The data used to update Attributes.
     */
    data: XOR<AttributeUpdateManyMutationInput, AttributeUncheckedUpdateManyInput>
    /**
     * Filter which Attributes to update
     */
    where?: AttributeWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Attribute upsert
   */
  export type AttributeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attribute
     */
    omit?: AttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
    /**
     * The filter to search for the Attribute to update in case it exists.
     */
    where: AttributeWhereUniqueInput
    /**
     * In case the Attribute found by the `where` argument doesn't exist, create a new Attribute with this data.
     */
    create: XOR<AttributeCreateInput, AttributeUncheckedCreateInput>
    /**
     * In case the Attribute was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttributeUpdateInput, AttributeUncheckedUpdateInput>
  }

  /**
   * Attribute delete
   */
  export type AttributeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attribute
     */
    omit?: AttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
    /**
     * Filter which Attribute to delete.
     */
    where: AttributeWhereUniqueInput
  }

  /**
   * Attribute deleteMany
   */
  export type AttributeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attributes to delete
     */
    where?: AttributeWhereInput
  }

  /**
   * Attribute without action
   */
  export type AttributeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attribute
     */
    omit?: AttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
  }


  /**
   * Model Node
   */

  export type AggregateNode = {
    _count: NodeCountAggregateOutputType | null
    _min: NodeMinAggregateOutputType | null
    _max: NodeMaxAggregateOutputType | null
  }

  export type NodeMinAggregateOutputType = {
    node_id: string | null
    name: string | null
    description: string | null
    long_description: string | null
    image_url: string | null
    created_on: Date | null
    updated_on: Date | null
    base_culture: string | null
    profession: string | null
    given_name_style: string | null
    family_name_style: string | null
    name_shape: string | null
    campaign_id: string | null
    node_type_id: string | null
    exclude_from_events: boolean | null
  }

  export type NodeMaxAggregateOutputType = {
    node_id: string | null
    name: string | null
    description: string | null
    long_description: string | null
    image_url: string | null
    created_on: Date | null
    updated_on: Date | null
    base_culture: string | null
    profession: string | null
    given_name_style: string | null
    family_name_style: string | null
    name_shape: string | null
    campaign_id: string | null
    node_type_id: string | null
    exclude_from_events: boolean | null
  }

  export type NodeCountAggregateOutputType = {
    node_id: number
    name: number
    description: number
    long_description: number
    image_url: number
    created_on: number
    updated_on: number
    base_culture: number
    profession: number
    given_name_style: number
    family_name_style: number
    name_shape: number
    campaign_id: number
    node_type_id: number
    exclude_from_events: number
    _all: number
  }


  export type NodeMinAggregateInputType = {
    node_id?: true
    name?: true
    description?: true
    long_description?: true
    image_url?: true
    created_on?: true
    updated_on?: true
    base_culture?: true
    profession?: true
    given_name_style?: true
    family_name_style?: true
    name_shape?: true
    campaign_id?: true
    node_type_id?: true
    exclude_from_events?: true
  }

  export type NodeMaxAggregateInputType = {
    node_id?: true
    name?: true
    description?: true
    long_description?: true
    image_url?: true
    created_on?: true
    updated_on?: true
    base_culture?: true
    profession?: true
    given_name_style?: true
    family_name_style?: true
    name_shape?: true
    campaign_id?: true
    node_type_id?: true
    exclude_from_events?: true
  }

  export type NodeCountAggregateInputType = {
    node_id?: true
    name?: true
    description?: true
    long_description?: true
    image_url?: true
    created_on?: true
    updated_on?: true
    base_culture?: true
    profession?: true
    given_name_style?: true
    family_name_style?: true
    name_shape?: true
    campaign_id?: true
    node_type_id?: true
    exclude_from_events?: true
    _all?: true
  }

  export type NodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Node to aggregate.
     */
    where?: NodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nodes to fetch.
     */
    orderBy?: NodeOrderByWithRelationInput | NodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Nodes
    **/
    _count?: true | NodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NodeMaxAggregateInputType
  }

  export type GetNodeAggregateType<T extends NodeAggregateArgs> = {
        [P in keyof T & keyof AggregateNode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNode[P]>
      : GetScalarType<T[P], AggregateNode[P]>
  }




  export type NodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NodeWhereInput
    orderBy?: NodeOrderByWithAggregationInput | NodeOrderByWithAggregationInput[]
    by: NodeScalarFieldEnum[] | NodeScalarFieldEnum
    having?: NodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NodeCountAggregateInputType | true
    _min?: NodeMinAggregateInputType
    _max?: NodeMaxAggregateInputType
  }

  export type NodeGroupByOutputType = {
    node_id: string
    name: string
    description: string | null
    long_description: string | null
    image_url: string | null
    created_on: Date
    updated_on: Date
    base_culture: string | null
    profession: string | null
    given_name_style: string | null
    family_name_style: string | null
    name_shape: string | null
    campaign_id: string | null
    node_type_id: string | null
    exclude_from_events: boolean | null
    _count: NodeCountAggregateOutputType | null
    _min: NodeMinAggregateOutputType | null
    _max: NodeMaxAggregateOutputType | null
  }

  type GetNodeGroupByPayload<T extends NodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NodeGroupByOutputType[P]>
            : GetScalarType<T[P], NodeGroupByOutputType[P]>
        }
      >
    >


  export type NodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    node_id?: boolean
    name?: boolean
    description?: boolean
    long_description?: boolean
    image_url?: boolean
    created_on?: boolean
    updated_on?: boolean
    base_culture?: boolean
    profession?: boolean
    given_name_style?: boolean
    family_name_style?: boolean
    name_shape?: boolean
    campaign_id?: boolean
    node_type_id?: boolean
    exclude_from_events?: boolean
    attributes?: boolean | Node$attributesArgs<ExtArgs>
    events?: boolean | Node$eventsArgs<ExtArgs>
    campaign?: boolean | Node$campaignArgs<ExtArgs>
    outgoing_relations?: boolean | Node$outgoing_relationsArgs<ExtArgs>
    incoming_relations?: boolean | Node$incoming_relationsArgs<ExtArgs>
    node_type?: boolean | Node$node_typeArgs<ExtArgs>
    map_node?: boolean | Node$map_nodeArgs<ExtArgs>
    _count?: boolean | NodeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["node"]>

  export type NodeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    node_id?: boolean
    name?: boolean
    description?: boolean
    long_description?: boolean
    image_url?: boolean
    created_on?: boolean
    updated_on?: boolean
    base_culture?: boolean
    profession?: boolean
    given_name_style?: boolean
    family_name_style?: boolean
    name_shape?: boolean
    campaign_id?: boolean
    node_type_id?: boolean
    exclude_from_events?: boolean
    campaign?: boolean | Node$campaignArgs<ExtArgs>
    node_type?: boolean | Node$node_typeArgs<ExtArgs>
  }, ExtArgs["result"]["node"]>

  export type NodeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    node_id?: boolean
    name?: boolean
    description?: boolean
    long_description?: boolean
    image_url?: boolean
    created_on?: boolean
    updated_on?: boolean
    base_culture?: boolean
    profession?: boolean
    given_name_style?: boolean
    family_name_style?: boolean
    name_shape?: boolean
    campaign_id?: boolean
    node_type_id?: boolean
    exclude_from_events?: boolean
    campaign?: boolean | Node$campaignArgs<ExtArgs>
    node_type?: boolean | Node$node_typeArgs<ExtArgs>
  }, ExtArgs["result"]["node"]>

  export type NodeSelectScalar = {
    node_id?: boolean
    name?: boolean
    description?: boolean
    long_description?: boolean
    image_url?: boolean
    created_on?: boolean
    updated_on?: boolean
    base_culture?: boolean
    profession?: boolean
    given_name_style?: boolean
    family_name_style?: boolean
    name_shape?: boolean
    campaign_id?: boolean
    node_type_id?: boolean
    exclude_from_events?: boolean
  }

  export type NodeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"node_id" | "name" | "description" | "long_description" | "image_url" | "created_on" | "updated_on" | "base_culture" | "profession" | "given_name_style" | "family_name_style" | "name_shape" | "campaign_id" | "node_type_id" | "exclude_from_events", ExtArgs["result"]["node"]>
  export type NodeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attributes?: boolean | Node$attributesArgs<ExtArgs>
    events?: boolean | Node$eventsArgs<ExtArgs>
    campaign?: boolean | Node$campaignArgs<ExtArgs>
    outgoing_relations?: boolean | Node$outgoing_relationsArgs<ExtArgs>
    incoming_relations?: boolean | Node$incoming_relationsArgs<ExtArgs>
    node_type?: boolean | Node$node_typeArgs<ExtArgs>
    map_node?: boolean | Node$map_nodeArgs<ExtArgs>
    _count?: boolean | NodeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type NodeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | Node$campaignArgs<ExtArgs>
    node_type?: boolean | Node$node_typeArgs<ExtArgs>
  }
  export type NodeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | Node$campaignArgs<ExtArgs>
    node_type?: boolean | Node$node_typeArgs<ExtArgs>
  }

  export type $NodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Node"
    objects: {
      attributes: Prisma.$AttributePayload<ExtArgs>[]
      events: Prisma.$EventPayload<ExtArgs>[]
      campaign: Prisma.$CampaignPayload<ExtArgs> | null
      outgoing_relations: Prisma.$NodeRelationshipPayload<ExtArgs>[]
      incoming_relations: Prisma.$NodeRelationshipPayload<ExtArgs>[]
      node_type: Prisma.$NodeTypePayload<ExtArgs> | null
      map_node: Prisma.$MapNodePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      node_id: string
      name: string
      description: string | null
      long_description: string | null
      image_url: string | null
      created_on: Date
      updated_on: Date
      base_culture: string | null
      profession: string | null
      given_name_style: string | null
      family_name_style: string | null
      name_shape: string | null
      campaign_id: string | null
      node_type_id: string | null
      exclude_from_events: boolean | null
    }, ExtArgs["result"]["node"]>
    composites: {}
  }

  type NodeGetPayload<S extends boolean | null | undefined | NodeDefaultArgs> = $Result.GetResult<Prisma.$NodePayload, S>

  type NodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NodeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NodeCountAggregateInputType | true
    }

  export interface NodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Node'], meta: { name: 'Node' } }
    /**
     * Find zero or one Node that matches the filter.
     * @param {NodeFindUniqueArgs} args - Arguments to find a Node
     * @example
     * // Get one Node
     * const node = await prisma.node.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NodeFindUniqueArgs>(args: SelectSubset<T, NodeFindUniqueArgs<ExtArgs>>): Prisma__NodeClient<$Result.GetResult<Prisma.$NodePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Node that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NodeFindUniqueOrThrowArgs} args - Arguments to find a Node
     * @example
     * // Get one Node
     * const node = await prisma.node.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NodeFindUniqueOrThrowArgs>(args: SelectSubset<T, NodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NodeClient<$Result.GetResult<Prisma.$NodePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Node that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodeFindFirstArgs} args - Arguments to find a Node
     * @example
     * // Get one Node
     * const node = await prisma.node.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NodeFindFirstArgs>(args?: SelectSubset<T, NodeFindFirstArgs<ExtArgs>>): Prisma__NodeClient<$Result.GetResult<Prisma.$NodePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Node that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodeFindFirstOrThrowArgs} args - Arguments to find a Node
     * @example
     * // Get one Node
     * const node = await prisma.node.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NodeFindFirstOrThrowArgs>(args?: SelectSubset<T, NodeFindFirstOrThrowArgs<ExtArgs>>): Prisma__NodeClient<$Result.GetResult<Prisma.$NodePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Nodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Nodes
     * const nodes = await prisma.node.findMany()
     * 
     * // Get first 10 Nodes
     * const nodes = await prisma.node.findMany({ take: 10 })
     * 
     * // Only select the `node_id`
     * const nodeWithNode_idOnly = await prisma.node.findMany({ select: { node_id: true } })
     * 
     */
    findMany<T extends NodeFindManyArgs>(args?: SelectSubset<T, NodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NodePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Node.
     * @param {NodeCreateArgs} args - Arguments to create a Node.
     * @example
     * // Create one Node
     * const Node = await prisma.node.create({
     *   data: {
     *     // ... data to create a Node
     *   }
     * })
     * 
     */
    create<T extends NodeCreateArgs>(args: SelectSubset<T, NodeCreateArgs<ExtArgs>>): Prisma__NodeClient<$Result.GetResult<Prisma.$NodePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Nodes.
     * @param {NodeCreateManyArgs} args - Arguments to create many Nodes.
     * @example
     * // Create many Nodes
     * const node = await prisma.node.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NodeCreateManyArgs>(args?: SelectSubset<T, NodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Nodes and returns the data saved in the database.
     * @param {NodeCreateManyAndReturnArgs} args - Arguments to create many Nodes.
     * @example
     * // Create many Nodes
     * const node = await prisma.node.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Nodes and only return the `node_id`
     * const nodeWithNode_idOnly = await prisma.node.createManyAndReturn({
     *   select: { node_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NodeCreateManyAndReturnArgs>(args?: SelectSubset<T, NodeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NodePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Node.
     * @param {NodeDeleteArgs} args - Arguments to delete one Node.
     * @example
     * // Delete one Node
     * const Node = await prisma.node.delete({
     *   where: {
     *     // ... filter to delete one Node
     *   }
     * })
     * 
     */
    delete<T extends NodeDeleteArgs>(args: SelectSubset<T, NodeDeleteArgs<ExtArgs>>): Prisma__NodeClient<$Result.GetResult<Prisma.$NodePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Node.
     * @param {NodeUpdateArgs} args - Arguments to update one Node.
     * @example
     * // Update one Node
     * const node = await prisma.node.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NodeUpdateArgs>(args: SelectSubset<T, NodeUpdateArgs<ExtArgs>>): Prisma__NodeClient<$Result.GetResult<Prisma.$NodePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Nodes.
     * @param {NodeDeleteManyArgs} args - Arguments to filter Nodes to delete.
     * @example
     * // Delete a few Nodes
     * const { count } = await prisma.node.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NodeDeleteManyArgs>(args?: SelectSubset<T, NodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Nodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Nodes
     * const node = await prisma.node.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NodeUpdateManyArgs>(args: SelectSubset<T, NodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Nodes and returns the data updated in the database.
     * @param {NodeUpdateManyAndReturnArgs} args - Arguments to update many Nodes.
     * @example
     * // Update many Nodes
     * const node = await prisma.node.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Nodes and only return the `node_id`
     * const nodeWithNode_idOnly = await prisma.node.updateManyAndReturn({
     *   select: { node_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NodeUpdateManyAndReturnArgs>(args: SelectSubset<T, NodeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NodePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Node.
     * @param {NodeUpsertArgs} args - Arguments to update or create a Node.
     * @example
     * // Update or create a Node
     * const node = await prisma.node.upsert({
     *   create: {
     *     // ... data to create a Node
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Node we want to update
     *   }
     * })
     */
    upsert<T extends NodeUpsertArgs>(args: SelectSubset<T, NodeUpsertArgs<ExtArgs>>): Prisma__NodeClient<$Result.GetResult<Prisma.$NodePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Nodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodeCountArgs} args - Arguments to filter Nodes to count.
     * @example
     * // Count the number of Nodes
     * const count = await prisma.node.count({
     *   where: {
     *     // ... the filter for the Nodes we want to count
     *   }
     * })
    **/
    count<T extends NodeCountArgs>(
      args?: Subset<T, NodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Node.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NodeAggregateArgs>(args: Subset<T, NodeAggregateArgs>): Prisma.PrismaPromise<GetNodeAggregateType<T>>

    /**
     * Group by Node.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NodeGroupByArgs['orderBy'] }
        : { orderBy?: NodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Node model
   */
  readonly fields: NodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Node.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    attributes<T extends Node$attributesArgs<ExtArgs> = {}>(args?: Subset<T, Node$attributesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    events<T extends Node$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Node$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    campaign<T extends Node$campaignArgs<ExtArgs> = {}>(args?: Subset<T, Node$campaignArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    outgoing_relations<T extends Node$outgoing_relationsArgs<ExtArgs> = {}>(args?: Subset<T, Node$outgoing_relationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NodeRelationshipPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    incoming_relations<T extends Node$incoming_relationsArgs<ExtArgs> = {}>(args?: Subset<T, Node$incoming_relationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NodeRelationshipPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    node_type<T extends Node$node_typeArgs<ExtArgs> = {}>(args?: Subset<T, Node$node_typeArgs<ExtArgs>>): Prisma__NodeTypeClient<$Result.GetResult<Prisma.$NodeTypePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    map_node<T extends Node$map_nodeArgs<ExtArgs> = {}>(args?: Subset<T, Node$map_nodeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MapNodePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Node model
   */ 
  interface NodeFieldRefs {
    readonly node_id: FieldRef<"Node", 'String'>
    readonly name: FieldRef<"Node", 'String'>
    readonly description: FieldRef<"Node", 'String'>
    readonly long_description: FieldRef<"Node", 'String'>
    readonly image_url: FieldRef<"Node", 'String'>
    readonly created_on: FieldRef<"Node", 'DateTime'>
    readonly updated_on: FieldRef<"Node", 'DateTime'>
    readonly base_culture: FieldRef<"Node", 'String'>
    readonly profession: FieldRef<"Node", 'String'>
    readonly given_name_style: FieldRef<"Node", 'String'>
    readonly family_name_style: FieldRef<"Node", 'String'>
    readonly name_shape: FieldRef<"Node", 'String'>
    readonly campaign_id: FieldRef<"Node", 'String'>
    readonly node_type_id: FieldRef<"Node", 'String'>
    readonly exclude_from_events: FieldRef<"Node", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Node findUnique
   */
  export type NodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Node
     */
    select?: NodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Node
     */
    omit?: NodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeInclude<ExtArgs> | null
    /**
     * Filter, which Node to fetch.
     */
    where: NodeWhereUniqueInput
  }

  /**
   * Node findUniqueOrThrow
   */
  export type NodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Node
     */
    select?: NodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Node
     */
    omit?: NodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeInclude<ExtArgs> | null
    /**
     * Filter, which Node to fetch.
     */
    where: NodeWhereUniqueInput
  }

  /**
   * Node findFirst
   */
  export type NodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Node
     */
    select?: NodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Node
     */
    omit?: NodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeInclude<ExtArgs> | null
    /**
     * Filter, which Node to fetch.
     */
    where?: NodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nodes to fetch.
     */
    orderBy?: NodeOrderByWithRelationInput | NodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Nodes.
     */
    cursor?: NodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Nodes.
     */
    distinct?: NodeScalarFieldEnum | NodeScalarFieldEnum[]
  }

  /**
   * Node findFirstOrThrow
   */
  export type NodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Node
     */
    select?: NodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Node
     */
    omit?: NodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeInclude<ExtArgs> | null
    /**
     * Filter, which Node to fetch.
     */
    where?: NodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nodes to fetch.
     */
    orderBy?: NodeOrderByWithRelationInput | NodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Nodes.
     */
    cursor?: NodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Nodes.
     */
    distinct?: NodeScalarFieldEnum | NodeScalarFieldEnum[]
  }

  /**
   * Node findMany
   */
  export type NodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Node
     */
    select?: NodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Node
     */
    omit?: NodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeInclude<ExtArgs> | null
    /**
     * Filter, which Nodes to fetch.
     */
    where?: NodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nodes to fetch.
     */
    orderBy?: NodeOrderByWithRelationInput | NodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Nodes.
     */
    cursor?: NodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nodes.
     */
    skip?: number
    distinct?: NodeScalarFieldEnum | NodeScalarFieldEnum[]
  }

  /**
   * Node create
   */
  export type NodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Node
     */
    select?: NodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Node
     */
    omit?: NodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeInclude<ExtArgs> | null
    /**
     * The data needed to create a Node.
     */
    data: XOR<NodeCreateInput, NodeUncheckedCreateInput>
  }

  /**
   * Node createMany
   */
  export type NodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Nodes.
     */
    data: NodeCreateManyInput | NodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Node createManyAndReturn
   */
  export type NodeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Node
     */
    select?: NodeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Node
     */
    omit?: NodeOmit<ExtArgs> | null
    /**
     * The data used to create many Nodes.
     */
    data: NodeCreateManyInput | NodeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Node update
   */
  export type NodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Node
     */
    select?: NodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Node
     */
    omit?: NodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeInclude<ExtArgs> | null
    /**
     * The data needed to update a Node.
     */
    data: XOR<NodeUpdateInput, NodeUncheckedUpdateInput>
    /**
     * Choose, which Node to update.
     */
    where: NodeWhereUniqueInput
  }

  /**
   * Node updateMany
   */
  export type NodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Nodes.
     */
    data: XOR<NodeUpdateManyMutationInput, NodeUncheckedUpdateManyInput>
    /**
     * Filter which Nodes to update
     */
    where?: NodeWhereInput
  }

  /**
   * Node updateManyAndReturn
   */
  export type NodeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Node
     */
    select?: NodeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Node
     */
    omit?: NodeOmit<ExtArgs> | null
    /**
     * The data used to update Nodes.
     */
    data: XOR<NodeUpdateManyMutationInput, NodeUncheckedUpdateManyInput>
    /**
     * Filter which Nodes to update
     */
    where?: NodeWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Node upsert
   */
  export type NodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Node
     */
    select?: NodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Node
     */
    omit?: NodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeInclude<ExtArgs> | null
    /**
     * The filter to search for the Node to update in case it exists.
     */
    where: NodeWhereUniqueInput
    /**
     * In case the Node found by the `where` argument doesn't exist, create a new Node with this data.
     */
    create: XOR<NodeCreateInput, NodeUncheckedCreateInput>
    /**
     * In case the Node was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NodeUpdateInput, NodeUncheckedUpdateInput>
  }

  /**
   * Node delete
   */
  export type NodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Node
     */
    select?: NodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Node
     */
    omit?: NodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeInclude<ExtArgs> | null
    /**
     * Filter which Node to delete.
     */
    where: NodeWhereUniqueInput
  }

  /**
   * Node deleteMany
   */
  export type NodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Nodes to delete
     */
    where?: NodeWhereInput
  }

  /**
   * Node.attributes
   */
  export type Node$attributesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attribute
     */
    omit?: AttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
    where?: AttributeWhereInput
    orderBy?: AttributeOrderByWithRelationInput | AttributeOrderByWithRelationInput[]
    cursor?: AttributeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttributeScalarFieldEnum | AttributeScalarFieldEnum[]
  }

  /**
   * Node.events
   */
  export type Node$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Node.campaign
   */
  export type Node$campaignArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    where?: CampaignWhereInput
  }

  /**
   * Node.outgoing_relations
   */
  export type Node$outgoing_relationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeRelationship
     */
    select?: NodeRelationshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeRelationship
     */
    omit?: NodeRelationshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeRelationshipInclude<ExtArgs> | null
    where?: NodeRelationshipWhereInput
    orderBy?: NodeRelationshipOrderByWithRelationInput | NodeRelationshipOrderByWithRelationInput[]
    cursor?: NodeRelationshipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NodeRelationshipScalarFieldEnum | NodeRelationshipScalarFieldEnum[]
  }

  /**
   * Node.incoming_relations
   */
  export type Node$incoming_relationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeRelationship
     */
    select?: NodeRelationshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeRelationship
     */
    omit?: NodeRelationshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeRelationshipInclude<ExtArgs> | null
    where?: NodeRelationshipWhereInput
    orderBy?: NodeRelationshipOrderByWithRelationInput | NodeRelationshipOrderByWithRelationInput[]
    cursor?: NodeRelationshipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NodeRelationshipScalarFieldEnum | NodeRelationshipScalarFieldEnum[]
  }

  /**
   * Node.node_type
   */
  export type Node$node_typeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeType
     */
    select?: NodeTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeType
     */
    omit?: NodeTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeTypeInclude<ExtArgs> | null
    where?: NodeTypeWhereInput
  }

  /**
   * Node.map_node
   */
  export type Node$map_nodeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MapNode
     */
    select?: MapNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MapNode
     */
    omit?: MapNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MapNodeInclude<ExtArgs> | null
    where?: MapNodeWhereInput
    orderBy?: MapNodeOrderByWithRelationInput | MapNodeOrderByWithRelationInput[]
    cursor?: MapNodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MapNodeScalarFieldEnum | MapNodeScalarFieldEnum[]
  }

  /**
   * Node without action
   */
  export type NodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Node
     */
    select?: NodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Node
     */
    omit?: NodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeInclude<ExtArgs> | null
  }


  /**
   * Model MapNode
   */

  export type AggregateMapNode = {
    _count: MapNodeCountAggregateOutputType | null
    _avg: MapNodeAvgAggregateOutputType | null
    _sum: MapNodeSumAggregateOutputType | null
    _min: MapNodeMinAggregateOutputType | null
    _max: MapNodeMaxAggregateOutputType | null
  }

  export type MapNodeAvgAggregateOutputType = {
    coordinates: number | null
  }

  export type MapNodeSumAggregateOutputType = {
    coordinates: number[]
  }

  export type MapNodeMinAggregateOutputType = {
    map_node_id: string | null
    moveable: boolean | null
    title: string | null
    description: string | null
    icon_url: string | null
    icon: string | null
    created_on: Date | null
    updated_on: Date | null
    map_id: string | null
    node_id: string | null
  }

  export type MapNodeMaxAggregateOutputType = {
    map_node_id: string | null
    moveable: boolean | null
    title: string | null
    description: string | null
    icon_url: string | null
    icon: string | null
    created_on: Date | null
    updated_on: Date | null
    map_id: string | null
    node_id: string | null
  }

  export type MapNodeCountAggregateOutputType = {
    map_node_id: number
    coordinates: number
    moveable: number
    title: number
    description: number
    icon_url: number
    icon: number
    created_on: number
    updated_on: number
    map_id: number
    node_id: number
    _all: number
  }


  export type MapNodeAvgAggregateInputType = {
    coordinates?: true
  }

  export type MapNodeSumAggregateInputType = {
    coordinates?: true
  }

  export type MapNodeMinAggregateInputType = {
    map_node_id?: true
    moveable?: true
    title?: true
    description?: true
    icon_url?: true
    icon?: true
    created_on?: true
    updated_on?: true
    map_id?: true
    node_id?: true
  }

  export type MapNodeMaxAggregateInputType = {
    map_node_id?: true
    moveable?: true
    title?: true
    description?: true
    icon_url?: true
    icon?: true
    created_on?: true
    updated_on?: true
    map_id?: true
    node_id?: true
  }

  export type MapNodeCountAggregateInputType = {
    map_node_id?: true
    coordinates?: true
    moveable?: true
    title?: true
    description?: true
    icon_url?: true
    icon?: true
    created_on?: true
    updated_on?: true
    map_id?: true
    node_id?: true
    _all?: true
  }

  export type MapNodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MapNode to aggregate.
     */
    where?: MapNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MapNodes to fetch.
     */
    orderBy?: MapNodeOrderByWithRelationInput | MapNodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MapNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MapNodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MapNodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MapNodes
    **/
    _count?: true | MapNodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MapNodeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MapNodeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MapNodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MapNodeMaxAggregateInputType
  }

  export type GetMapNodeAggregateType<T extends MapNodeAggregateArgs> = {
        [P in keyof T & keyof AggregateMapNode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMapNode[P]>
      : GetScalarType<T[P], AggregateMapNode[P]>
  }




  export type MapNodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MapNodeWhereInput
    orderBy?: MapNodeOrderByWithAggregationInput | MapNodeOrderByWithAggregationInput[]
    by: MapNodeScalarFieldEnum[] | MapNodeScalarFieldEnum
    having?: MapNodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MapNodeCountAggregateInputType | true
    _avg?: MapNodeAvgAggregateInputType
    _sum?: MapNodeSumAggregateInputType
    _min?: MapNodeMinAggregateInputType
    _max?: MapNodeMaxAggregateInputType
  }

  export type MapNodeGroupByOutputType = {
    map_node_id: string
    coordinates: number[]
    moveable: boolean | null
    title: string | null
    description: string | null
    icon_url: string | null
    icon: string | null
    created_on: Date
    updated_on: Date
    map_id: string
    node_id: string | null
    _count: MapNodeCountAggregateOutputType | null
    _avg: MapNodeAvgAggregateOutputType | null
    _sum: MapNodeSumAggregateOutputType | null
    _min: MapNodeMinAggregateOutputType | null
    _max: MapNodeMaxAggregateOutputType | null
  }

  type GetMapNodeGroupByPayload<T extends MapNodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MapNodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MapNodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MapNodeGroupByOutputType[P]>
            : GetScalarType<T[P], MapNodeGroupByOutputType[P]>
        }
      >
    >


  export type MapNodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    map_node_id?: boolean
    coordinates?: boolean
    moveable?: boolean
    title?: boolean
    description?: boolean
    icon_url?: boolean
    icon?: boolean
    created_on?: boolean
    updated_on?: boolean
    map_id?: boolean
    node_id?: boolean
    map?: boolean | StaticMapDefaultArgs<ExtArgs>
    node?: boolean | MapNode$nodeArgs<ExtArgs>
  }, ExtArgs["result"]["mapNode"]>

  export type MapNodeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    map_node_id?: boolean
    coordinates?: boolean
    moveable?: boolean
    title?: boolean
    description?: boolean
    icon_url?: boolean
    icon?: boolean
    created_on?: boolean
    updated_on?: boolean
    map_id?: boolean
    node_id?: boolean
    map?: boolean | StaticMapDefaultArgs<ExtArgs>
    node?: boolean | MapNode$nodeArgs<ExtArgs>
  }, ExtArgs["result"]["mapNode"]>

  export type MapNodeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    map_node_id?: boolean
    coordinates?: boolean
    moveable?: boolean
    title?: boolean
    description?: boolean
    icon_url?: boolean
    icon?: boolean
    created_on?: boolean
    updated_on?: boolean
    map_id?: boolean
    node_id?: boolean
    map?: boolean | StaticMapDefaultArgs<ExtArgs>
    node?: boolean | MapNode$nodeArgs<ExtArgs>
  }, ExtArgs["result"]["mapNode"]>

  export type MapNodeSelectScalar = {
    map_node_id?: boolean
    coordinates?: boolean
    moveable?: boolean
    title?: boolean
    description?: boolean
    icon_url?: boolean
    icon?: boolean
    created_on?: boolean
    updated_on?: boolean
    map_id?: boolean
    node_id?: boolean
  }

  export type MapNodeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"map_node_id" | "coordinates" | "moveable" | "title" | "description" | "icon_url" | "icon" | "created_on" | "updated_on" | "map_id" | "node_id", ExtArgs["result"]["mapNode"]>
  export type MapNodeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    map?: boolean | StaticMapDefaultArgs<ExtArgs>
    node?: boolean | MapNode$nodeArgs<ExtArgs>
  }
  export type MapNodeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    map?: boolean | StaticMapDefaultArgs<ExtArgs>
    node?: boolean | MapNode$nodeArgs<ExtArgs>
  }
  export type MapNodeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    map?: boolean | StaticMapDefaultArgs<ExtArgs>
    node?: boolean | MapNode$nodeArgs<ExtArgs>
  }

  export type $MapNodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MapNode"
    objects: {
      map: Prisma.$StaticMapPayload<ExtArgs>
      node: Prisma.$NodePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      map_node_id: string
      coordinates: number[]
      moveable: boolean | null
      title: string | null
      description: string | null
      icon_url: string | null
      icon: string | null
      created_on: Date
      updated_on: Date
      map_id: string
      node_id: string | null
    }, ExtArgs["result"]["mapNode"]>
    composites: {}
  }

  type MapNodeGetPayload<S extends boolean | null | undefined | MapNodeDefaultArgs> = $Result.GetResult<Prisma.$MapNodePayload, S>

  type MapNodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MapNodeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MapNodeCountAggregateInputType | true
    }

  export interface MapNodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MapNode'], meta: { name: 'MapNode' } }
    /**
     * Find zero or one MapNode that matches the filter.
     * @param {MapNodeFindUniqueArgs} args - Arguments to find a MapNode
     * @example
     * // Get one MapNode
     * const mapNode = await prisma.mapNode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MapNodeFindUniqueArgs>(args: SelectSubset<T, MapNodeFindUniqueArgs<ExtArgs>>): Prisma__MapNodeClient<$Result.GetResult<Prisma.$MapNodePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one MapNode that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MapNodeFindUniqueOrThrowArgs} args - Arguments to find a MapNode
     * @example
     * // Get one MapNode
     * const mapNode = await prisma.mapNode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MapNodeFindUniqueOrThrowArgs>(args: SelectSubset<T, MapNodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MapNodeClient<$Result.GetResult<Prisma.$MapNodePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first MapNode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MapNodeFindFirstArgs} args - Arguments to find a MapNode
     * @example
     * // Get one MapNode
     * const mapNode = await prisma.mapNode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MapNodeFindFirstArgs>(args?: SelectSubset<T, MapNodeFindFirstArgs<ExtArgs>>): Prisma__MapNodeClient<$Result.GetResult<Prisma.$MapNodePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first MapNode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MapNodeFindFirstOrThrowArgs} args - Arguments to find a MapNode
     * @example
     * // Get one MapNode
     * const mapNode = await prisma.mapNode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MapNodeFindFirstOrThrowArgs>(args?: SelectSubset<T, MapNodeFindFirstOrThrowArgs<ExtArgs>>): Prisma__MapNodeClient<$Result.GetResult<Prisma.$MapNodePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more MapNodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MapNodeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MapNodes
     * const mapNodes = await prisma.mapNode.findMany()
     * 
     * // Get first 10 MapNodes
     * const mapNodes = await prisma.mapNode.findMany({ take: 10 })
     * 
     * // Only select the `map_node_id`
     * const mapNodeWithMap_node_idOnly = await prisma.mapNode.findMany({ select: { map_node_id: true } })
     * 
     */
    findMany<T extends MapNodeFindManyArgs>(args?: SelectSubset<T, MapNodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MapNodePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a MapNode.
     * @param {MapNodeCreateArgs} args - Arguments to create a MapNode.
     * @example
     * // Create one MapNode
     * const MapNode = await prisma.mapNode.create({
     *   data: {
     *     // ... data to create a MapNode
     *   }
     * })
     * 
     */
    create<T extends MapNodeCreateArgs>(args: SelectSubset<T, MapNodeCreateArgs<ExtArgs>>): Prisma__MapNodeClient<$Result.GetResult<Prisma.$MapNodePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many MapNodes.
     * @param {MapNodeCreateManyArgs} args - Arguments to create many MapNodes.
     * @example
     * // Create many MapNodes
     * const mapNode = await prisma.mapNode.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MapNodeCreateManyArgs>(args?: SelectSubset<T, MapNodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MapNodes and returns the data saved in the database.
     * @param {MapNodeCreateManyAndReturnArgs} args - Arguments to create many MapNodes.
     * @example
     * // Create many MapNodes
     * const mapNode = await prisma.mapNode.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MapNodes and only return the `map_node_id`
     * const mapNodeWithMap_node_idOnly = await prisma.mapNode.createManyAndReturn({
     *   select: { map_node_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MapNodeCreateManyAndReturnArgs>(args?: SelectSubset<T, MapNodeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MapNodePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a MapNode.
     * @param {MapNodeDeleteArgs} args - Arguments to delete one MapNode.
     * @example
     * // Delete one MapNode
     * const MapNode = await prisma.mapNode.delete({
     *   where: {
     *     // ... filter to delete one MapNode
     *   }
     * })
     * 
     */
    delete<T extends MapNodeDeleteArgs>(args: SelectSubset<T, MapNodeDeleteArgs<ExtArgs>>): Prisma__MapNodeClient<$Result.GetResult<Prisma.$MapNodePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one MapNode.
     * @param {MapNodeUpdateArgs} args - Arguments to update one MapNode.
     * @example
     * // Update one MapNode
     * const mapNode = await prisma.mapNode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MapNodeUpdateArgs>(args: SelectSubset<T, MapNodeUpdateArgs<ExtArgs>>): Prisma__MapNodeClient<$Result.GetResult<Prisma.$MapNodePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more MapNodes.
     * @param {MapNodeDeleteManyArgs} args - Arguments to filter MapNodes to delete.
     * @example
     * // Delete a few MapNodes
     * const { count } = await prisma.mapNode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MapNodeDeleteManyArgs>(args?: SelectSubset<T, MapNodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MapNodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MapNodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MapNodes
     * const mapNode = await prisma.mapNode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MapNodeUpdateManyArgs>(args: SelectSubset<T, MapNodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MapNodes and returns the data updated in the database.
     * @param {MapNodeUpdateManyAndReturnArgs} args - Arguments to update many MapNodes.
     * @example
     * // Update many MapNodes
     * const mapNode = await prisma.mapNode.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MapNodes and only return the `map_node_id`
     * const mapNodeWithMap_node_idOnly = await prisma.mapNode.updateManyAndReturn({
     *   select: { map_node_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MapNodeUpdateManyAndReturnArgs>(args: SelectSubset<T, MapNodeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MapNodePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one MapNode.
     * @param {MapNodeUpsertArgs} args - Arguments to update or create a MapNode.
     * @example
     * // Update or create a MapNode
     * const mapNode = await prisma.mapNode.upsert({
     *   create: {
     *     // ... data to create a MapNode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MapNode we want to update
     *   }
     * })
     */
    upsert<T extends MapNodeUpsertArgs>(args: SelectSubset<T, MapNodeUpsertArgs<ExtArgs>>): Prisma__MapNodeClient<$Result.GetResult<Prisma.$MapNodePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of MapNodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MapNodeCountArgs} args - Arguments to filter MapNodes to count.
     * @example
     * // Count the number of MapNodes
     * const count = await prisma.mapNode.count({
     *   where: {
     *     // ... the filter for the MapNodes we want to count
     *   }
     * })
    **/
    count<T extends MapNodeCountArgs>(
      args?: Subset<T, MapNodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MapNodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MapNode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MapNodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MapNodeAggregateArgs>(args: Subset<T, MapNodeAggregateArgs>): Prisma.PrismaPromise<GetMapNodeAggregateType<T>>

    /**
     * Group by MapNode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MapNodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MapNodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MapNodeGroupByArgs['orderBy'] }
        : { orderBy?: MapNodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MapNodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMapNodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MapNode model
   */
  readonly fields: MapNodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MapNode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MapNodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    map<T extends StaticMapDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StaticMapDefaultArgs<ExtArgs>>): Prisma__StaticMapClient<$Result.GetResult<Prisma.$StaticMapPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    node<T extends MapNode$nodeArgs<ExtArgs> = {}>(args?: Subset<T, MapNode$nodeArgs<ExtArgs>>): Prisma__NodeClient<$Result.GetResult<Prisma.$NodePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MapNode model
   */ 
  interface MapNodeFieldRefs {
    readonly map_node_id: FieldRef<"MapNode", 'String'>
    readonly coordinates: FieldRef<"MapNode", 'Int[]'>
    readonly moveable: FieldRef<"MapNode", 'Boolean'>
    readonly title: FieldRef<"MapNode", 'String'>
    readonly description: FieldRef<"MapNode", 'String'>
    readonly icon_url: FieldRef<"MapNode", 'String'>
    readonly icon: FieldRef<"MapNode", 'String'>
    readonly created_on: FieldRef<"MapNode", 'DateTime'>
    readonly updated_on: FieldRef<"MapNode", 'DateTime'>
    readonly map_id: FieldRef<"MapNode", 'String'>
    readonly node_id: FieldRef<"MapNode", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MapNode findUnique
   */
  export type MapNodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MapNode
     */
    select?: MapNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MapNode
     */
    omit?: MapNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MapNodeInclude<ExtArgs> | null
    /**
     * Filter, which MapNode to fetch.
     */
    where: MapNodeWhereUniqueInput
  }

  /**
   * MapNode findUniqueOrThrow
   */
  export type MapNodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MapNode
     */
    select?: MapNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MapNode
     */
    omit?: MapNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MapNodeInclude<ExtArgs> | null
    /**
     * Filter, which MapNode to fetch.
     */
    where: MapNodeWhereUniqueInput
  }

  /**
   * MapNode findFirst
   */
  export type MapNodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MapNode
     */
    select?: MapNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MapNode
     */
    omit?: MapNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MapNodeInclude<ExtArgs> | null
    /**
     * Filter, which MapNode to fetch.
     */
    where?: MapNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MapNodes to fetch.
     */
    orderBy?: MapNodeOrderByWithRelationInput | MapNodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MapNodes.
     */
    cursor?: MapNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MapNodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MapNodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MapNodes.
     */
    distinct?: MapNodeScalarFieldEnum | MapNodeScalarFieldEnum[]
  }

  /**
   * MapNode findFirstOrThrow
   */
  export type MapNodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MapNode
     */
    select?: MapNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MapNode
     */
    omit?: MapNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MapNodeInclude<ExtArgs> | null
    /**
     * Filter, which MapNode to fetch.
     */
    where?: MapNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MapNodes to fetch.
     */
    orderBy?: MapNodeOrderByWithRelationInput | MapNodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MapNodes.
     */
    cursor?: MapNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MapNodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MapNodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MapNodes.
     */
    distinct?: MapNodeScalarFieldEnum | MapNodeScalarFieldEnum[]
  }

  /**
   * MapNode findMany
   */
  export type MapNodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MapNode
     */
    select?: MapNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MapNode
     */
    omit?: MapNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MapNodeInclude<ExtArgs> | null
    /**
     * Filter, which MapNodes to fetch.
     */
    where?: MapNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MapNodes to fetch.
     */
    orderBy?: MapNodeOrderByWithRelationInput | MapNodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MapNodes.
     */
    cursor?: MapNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MapNodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MapNodes.
     */
    skip?: number
    distinct?: MapNodeScalarFieldEnum | MapNodeScalarFieldEnum[]
  }

  /**
   * MapNode create
   */
  export type MapNodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MapNode
     */
    select?: MapNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MapNode
     */
    omit?: MapNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MapNodeInclude<ExtArgs> | null
    /**
     * The data needed to create a MapNode.
     */
    data: XOR<MapNodeCreateInput, MapNodeUncheckedCreateInput>
  }

  /**
   * MapNode createMany
   */
  export type MapNodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MapNodes.
     */
    data: MapNodeCreateManyInput | MapNodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MapNode createManyAndReturn
   */
  export type MapNodeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MapNode
     */
    select?: MapNodeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MapNode
     */
    omit?: MapNodeOmit<ExtArgs> | null
    /**
     * The data used to create many MapNodes.
     */
    data: MapNodeCreateManyInput | MapNodeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MapNodeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MapNode update
   */
  export type MapNodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MapNode
     */
    select?: MapNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MapNode
     */
    omit?: MapNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MapNodeInclude<ExtArgs> | null
    /**
     * The data needed to update a MapNode.
     */
    data: XOR<MapNodeUpdateInput, MapNodeUncheckedUpdateInput>
    /**
     * Choose, which MapNode to update.
     */
    where: MapNodeWhereUniqueInput
  }

  /**
   * MapNode updateMany
   */
  export type MapNodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MapNodes.
     */
    data: XOR<MapNodeUpdateManyMutationInput, MapNodeUncheckedUpdateManyInput>
    /**
     * Filter which MapNodes to update
     */
    where?: MapNodeWhereInput
  }

  /**
   * MapNode updateManyAndReturn
   */
  export type MapNodeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MapNode
     */
    select?: MapNodeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MapNode
     */
    omit?: MapNodeOmit<ExtArgs> | null
    /**
     * The data used to update MapNodes.
     */
    data: XOR<MapNodeUpdateManyMutationInput, MapNodeUncheckedUpdateManyInput>
    /**
     * Filter which MapNodes to update
     */
    where?: MapNodeWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MapNodeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MapNode upsert
   */
  export type MapNodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MapNode
     */
    select?: MapNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MapNode
     */
    omit?: MapNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MapNodeInclude<ExtArgs> | null
    /**
     * The filter to search for the MapNode to update in case it exists.
     */
    where: MapNodeWhereUniqueInput
    /**
     * In case the MapNode found by the `where` argument doesn't exist, create a new MapNode with this data.
     */
    create: XOR<MapNodeCreateInput, MapNodeUncheckedCreateInput>
    /**
     * In case the MapNode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MapNodeUpdateInput, MapNodeUncheckedUpdateInput>
  }

  /**
   * MapNode delete
   */
  export type MapNodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MapNode
     */
    select?: MapNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MapNode
     */
    omit?: MapNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MapNodeInclude<ExtArgs> | null
    /**
     * Filter which MapNode to delete.
     */
    where: MapNodeWhereUniqueInput
  }

  /**
   * MapNode deleteMany
   */
  export type MapNodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MapNodes to delete
     */
    where?: MapNodeWhereInput
  }

  /**
   * MapNode.node
   */
  export type MapNode$nodeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Node
     */
    select?: NodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Node
     */
    omit?: NodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeInclude<ExtArgs> | null
    where?: NodeWhereInput
  }

  /**
   * MapNode without action
   */
  export type MapNodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MapNode
     */
    select?: MapNodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MapNode
     */
    omit?: MapNodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MapNodeInclude<ExtArgs> | null
  }


  /**
   * Model NodeRelationship
   */

  export type AggregateNodeRelationship = {
    _count: NodeRelationshipCountAggregateOutputType | null
    _avg: NodeRelationshipAvgAggregateOutputType | null
    _sum: NodeRelationshipSumAggregateOutputType | null
    _min: NodeRelationshipMinAggregateOutputType | null
    _max: NodeRelationshipMaxAggregateOutputType | null
  }

  export type NodeRelationshipAvgAggregateOutputType = {
    relationship_score: number | null
  }

  export type NodeRelationshipSumAggregateOutputType = {
    relationship_score: number | null
  }

  export type NodeRelationshipMinAggregateOutputType = {
    node_relationship_id: string | null
    self_id: string | null
    relation_title: string | null
    target_id: string | null
    relationship_score: number | null
    is_in_range: boolean | null
    updated_on: Date | null
  }

  export type NodeRelationshipMaxAggregateOutputType = {
    node_relationship_id: string | null
    self_id: string | null
    relation_title: string | null
    target_id: string | null
    relationship_score: number | null
    is_in_range: boolean | null
    updated_on: Date | null
  }

  export type NodeRelationshipCountAggregateOutputType = {
    node_relationship_id: number
    self_id: number
    relation_title: number
    target_id: number
    relationship_score: number
    is_in_range: number
    updated_on: number
    _all: number
  }


  export type NodeRelationshipAvgAggregateInputType = {
    relationship_score?: true
  }

  export type NodeRelationshipSumAggregateInputType = {
    relationship_score?: true
  }

  export type NodeRelationshipMinAggregateInputType = {
    node_relationship_id?: true
    self_id?: true
    relation_title?: true
    target_id?: true
    relationship_score?: true
    is_in_range?: true
    updated_on?: true
  }

  export type NodeRelationshipMaxAggregateInputType = {
    node_relationship_id?: true
    self_id?: true
    relation_title?: true
    target_id?: true
    relationship_score?: true
    is_in_range?: true
    updated_on?: true
  }

  export type NodeRelationshipCountAggregateInputType = {
    node_relationship_id?: true
    self_id?: true
    relation_title?: true
    target_id?: true
    relationship_score?: true
    is_in_range?: true
    updated_on?: true
    _all?: true
  }

  export type NodeRelationshipAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NodeRelationship to aggregate.
     */
    where?: NodeRelationshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NodeRelationships to fetch.
     */
    orderBy?: NodeRelationshipOrderByWithRelationInput | NodeRelationshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NodeRelationshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NodeRelationships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NodeRelationships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NodeRelationships
    **/
    _count?: true | NodeRelationshipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NodeRelationshipAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NodeRelationshipSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NodeRelationshipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NodeRelationshipMaxAggregateInputType
  }

  export type GetNodeRelationshipAggregateType<T extends NodeRelationshipAggregateArgs> = {
        [P in keyof T & keyof AggregateNodeRelationship]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNodeRelationship[P]>
      : GetScalarType<T[P], AggregateNodeRelationship[P]>
  }




  export type NodeRelationshipGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NodeRelationshipWhereInput
    orderBy?: NodeRelationshipOrderByWithAggregationInput | NodeRelationshipOrderByWithAggregationInput[]
    by: NodeRelationshipScalarFieldEnum[] | NodeRelationshipScalarFieldEnum
    having?: NodeRelationshipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NodeRelationshipCountAggregateInputType | true
    _avg?: NodeRelationshipAvgAggregateInputType
    _sum?: NodeRelationshipSumAggregateInputType
    _min?: NodeRelationshipMinAggregateInputType
    _max?: NodeRelationshipMaxAggregateInputType
  }

  export type NodeRelationshipGroupByOutputType = {
    node_relationship_id: string
    self_id: string
    relation_title: string
    target_id: string
    relationship_score: number
    is_in_range: boolean | null
    updated_on: Date
    _count: NodeRelationshipCountAggregateOutputType | null
    _avg: NodeRelationshipAvgAggregateOutputType | null
    _sum: NodeRelationshipSumAggregateOutputType | null
    _min: NodeRelationshipMinAggregateOutputType | null
    _max: NodeRelationshipMaxAggregateOutputType | null
  }

  type GetNodeRelationshipGroupByPayload<T extends NodeRelationshipGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NodeRelationshipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NodeRelationshipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NodeRelationshipGroupByOutputType[P]>
            : GetScalarType<T[P], NodeRelationshipGroupByOutputType[P]>
        }
      >
    >


  export type NodeRelationshipSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    node_relationship_id?: boolean
    self_id?: boolean
    relation_title?: boolean
    target_id?: boolean
    relationship_score?: boolean
    is_in_range?: boolean
    updated_on?: boolean
    outgoing_relations?: boolean | NodeDefaultArgs<ExtArgs>
    incoming_relations?: boolean | NodeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nodeRelationship"]>

  export type NodeRelationshipSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    node_relationship_id?: boolean
    self_id?: boolean
    relation_title?: boolean
    target_id?: boolean
    relationship_score?: boolean
    is_in_range?: boolean
    updated_on?: boolean
    outgoing_relations?: boolean | NodeDefaultArgs<ExtArgs>
    incoming_relations?: boolean | NodeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nodeRelationship"]>

  export type NodeRelationshipSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    node_relationship_id?: boolean
    self_id?: boolean
    relation_title?: boolean
    target_id?: boolean
    relationship_score?: boolean
    is_in_range?: boolean
    updated_on?: boolean
    outgoing_relations?: boolean | NodeDefaultArgs<ExtArgs>
    incoming_relations?: boolean | NodeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nodeRelationship"]>

  export type NodeRelationshipSelectScalar = {
    node_relationship_id?: boolean
    self_id?: boolean
    relation_title?: boolean
    target_id?: boolean
    relationship_score?: boolean
    is_in_range?: boolean
    updated_on?: boolean
  }

  export type NodeRelationshipOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"node_relationship_id" | "self_id" | "relation_title" | "target_id" | "relationship_score" | "is_in_range" | "updated_on", ExtArgs["result"]["nodeRelationship"]>
  export type NodeRelationshipInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    outgoing_relations?: boolean | NodeDefaultArgs<ExtArgs>
    incoming_relations?: boolean | NodeDefaultArgs<ExtArgs>
  }
  export type NodeRelationshipIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    outgoing_relations?: boolean | NodeDefaultArgs<ExtArgs>
    incoming_relations?: boolean | NodeDefaultArgs<ExtArgs>
  }
  export type NodeRelationshipIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    outgoing_relations?: boolean | NodeDefaultArgs<ExtArgs>
    incoming_relations?: boolean | NodeDefaultArgs<ExtArgs>
  }

  export type $NodeRelationshipPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NodeRelationship"
    objects: {
      outgoing_relations: Prisma.$NodePayload<ExtArgs>
      incoming_relations: Prisma.$NodePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      node_relationship_id: string
      self_id: string
      relation_title: string
      target_id: string
      relationship_score: number
      is_in_range: boolean | null
      updated_on: Date
    }, ExtArgs["result"]["nodeRelationship"]>
    composites: {}
  }

  type NodeRelationshipGetPayload<S extends boolean | null | undefined | NodeRelationshipDefaultArgs> = $Result.GetResult<Prisma.$NodeRelationshipPayload, S>

  type NodeRelationshipCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NodeRelationshipFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NodeRelationshipCountAggregateInputType | true
    }

  export interface NodeRelationshipDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NodeRelationship'], meta: { name: 'NodeRelationship' } }
    /**
     * Find zero or one NodeRelationship that matches the filter.
     * @param {NodeRelationshipFindUniqueArgs} args - Arguments to find a NodeRelationship
     * @example
     * // Get one NodeRelationship
     * const nodeRelationship = await prisma.nodeRelationship.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NodeRelationshipFindUniqueArgs>(args: SelectSubset<T, NodeRelationshipFindUniqueArgs<ExtArgs>>): Prisma__NodeRelationshipClient<$Result.GetResult<Prisma.$NodeRelationshipPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one NodeRelationship that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NodeRelationshipFindUniqueOrThrowArgs} args - Arguments to find a NodeRelationship
     * @example
     * // Get one NodeRelationship
     * const nodeRelationship = await prisma.nodeRelationship.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NodeRelationshipFindUniqueOrThrowArgs>(args: SelectSubset<T, NodeRelationshipFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NodeRelationshipClient<$Result.GetResult<Prisma.$NodeRelationshipPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first NodeRelationship that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodeRelationshipFindFirstArgs} args - Arguments to find a NodeRelationship
     * @example
     * // Get one NodeRelationship
     * const nodeRelationship = await prisma.nodeRelationship.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NodeRelationshipFindFirstArgs>(args?: SelectSubset<T, NodeRelationshipFindFirstArgs<ExtArgs>>): Prisma__NodeRelationshipClient<$Result.GetResult<Prisma.$NodeRelationshipPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first NodeRelationship that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodeRelationshipFindFirstOrThrowArgs} args - Arguments to find a NodeRelationship
     * @example
     * // Get one NodeRelationship
     * const nodeRelationship = await prisma.nodeRelationship.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NodeRelationshipFindFirstOrThrowArgs>(args?: SelectSubset<T, NodeRelationshipFindFirstOrThrowArgs<ExtArgs>>): Prisma__NodeRelationshipClient<$Result.GetResult<Prisma.$NodeRelationshipPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more NodeRelationships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodeRelationshipFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NodeRelationships
     * const nodeRelationships = await prisma.nodeRelationship.findMany()
     * 
     * // Get first 10 NodeRelationships
     * const nodeRelationships = await prisma.nodeRelationship.findMany({ take: 10 })
     * 
     * // Only select the `node_relationship_id`
     * const nodeRelationshipWithNode_relationship_idOnly = await prisma.nodeRelationship.findMany({ select: { node_relationship_id: true } })
     * 
     */
    findMany<T extends NodeRelationshipFindManyArgs>(args?: SelectSubset<T, NodeRelationshipFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NodeRelationshipPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a NodeRelationship.
     * @param {NodeRelationshipCreateArgs} args - Arguments to create a NodeRelationship.
     * @example
     * // Create one NodeRelationship
     * const NodeRelationship = await prisma.nodeRelationship.create({
     *   data: {
     *     // ... data to create a NodeRelationship
     *   }
     * })
     * 
     */
    create<T extends NodeRelationshipCreateArgs>(args: SelectSubset<T, NodeRelationshipCreateArgs<ExtArgs>>): Prisma__NodeRelationshipClient<$Result.GetResult<Prisma.$NodeRelationshipPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many NodeRelationships.
     * @param {NodeRelationshipCreateManyArgs} args - Arguments to create many NodeRelationships.
     * @example
     * // Create many NodeRelationships
     * const nodeRelationship = await prisma.nodeRelationship.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NodeRelationshipCreateManyArgs>(args?: SelectSubset<T, NodeRelationshipCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NodeRelationships and returns the data saved in the database.
     * @param {NodeRelationshipCreateManyAndReturnArgs} args - Arguments to create many NodeRelationships.
     * @example
     * // Create many NodeRelationships
     * const nodeRelationship = await prisma.nodeRelationship.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NodeRelationships and only return the `node_relationship_id`
     * const nodeRelationshipWithNode_relationship_idOnly = await prisma.nodeRelationship.createManyAndReturn({
     *   select: { node_relationship_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NodeRelationshipCreateManyAndReturnArgs>(args?: SelectSubset<T, NodeRelationshipCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NodeRelationshipPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a NodeRelationship.
     * @param {NodeRelationshipDeleteArgs} args - Arguments to delete one NodeRelationship.
     * @example
     * // Delete one NodeRelationship
     * const NodeRelationship = await prisma.nodeRelationship.delete({
     *   where: {
     *     // ... filter to delete one NodeRelationship
     *   }
     * })
     * 
     */
    delete<T extends NodeRelationshipDeleteArgs>(args: SelectSubset<T, NodeRelationshipDeleteArgs<ExtArgs>>): Prisma__NodeRelationshipClient<$Result.GetResult<Prisma.$NodeRelationshipPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one NodeRelationship.
     * @param {NodeRelationshipUpdateArgs} args - Arguments to update one NodeRelationship.
     * @example
     * // Update one NodeRelationship
     * const nodeRelationship = await prisma.nodeRelationship.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NodeRelationshipUpdateArgs>(args: SelectSubset<T, NodeRelationshipUpdateArgs<ExtArgs>>): Prisma__NodeRelationshipClient<$Result.GetResult<Prisma.$NodeRelationshipPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more NodeRelationships.
     * @param {NodeRelationshipDeleteManyArgs} args - Arguments to filter NodeRelationships to delete.
     * @example
     * // Delete a few NodeRelationships
     * const { count } = await prisma.nodeRelationship.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NodeRelationshipDeleteManyArgs>(args?: SelectSubset<T, NodeRelationshipDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NodeRelationships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodeRelationshipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NodeRelationships
     * const nodeRelationship = await prisma.nodeRelationship.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NodeRelationshipUpdateManyArgs>(args: SelectSubset<T, NodeRelationshipUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NodeRelationships and returns the data updated in the database.
     * @param {NodeRelationshipUpdateManyAndReturnArgs} args - Arguments to update many NodeRelationships.
     * @example
     * // Update many NodeRelationships
     * const nodeRelationship = await prisma.nodeRelationship.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more NodeRelationships and only return the `node_relationship_id`
     * const nodeRelationshipWithNode_relationship_idOnly = await prisma.nodeRelationship.updateManyAndReturn({
     *   select: { node_relationship_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NodeRelationshipUpdateManyAndReturnArgs>(args: SelectSubset<T, NodeRelationshipUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NodeRelationshipPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one NodeRelationship.
     * @param {NodeRelationshipUpsertArgs} args - Arguments to update or create a NodeRelationship.
     * @example
     * // Update or create a NodeRelationship
     * const nodeRelationship = await prisma.nodeRelationship.upsert({
     *   create: {
     *     // ... data to create a NodeRelationship
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NodeRelationship we want to update
     *   }
     * })
     */
    upsert<T extends NodeRelationshipUpsertArgs>(args: SelectSubset<T, NodeRelationshipUpsertArgs<ExtArgs>>): Prisma__NodeRelationshipClient<$Result.GetResult<Prisma.$NodeRelationshipPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of NodeRelationships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodeRelationshipCountArgs} args - Arguments to filter NodeRelationships to count.
     * @example
     * // Count the number of NodeRelationships
     * const count = await prisma.nodeRelationship.count({
     *   where: {
     *     // ... the filter for the NodeRelationships we want to count
     *   }
     * })
    **/
    count<T extends NodeRelationshipCountArgs>(
      args?: Subset<T, NodeRelationshipCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NodeRelationshipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NodeRelationship.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodeRelationshipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NodeRelationshipAggregateArgs>(args: Subset<T, NodeRelationshipAggregateArgs>): Prisma.PrismaPromise<GetNodeRelationshipAggregateType<T>>

    /**
     * Group by NodeRelationship.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodeRelationshipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NodeRelationshipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NodeRelationshipGroupByArgs['orderBy'] }
        : { orderBy?: NodeRelationshipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NodeRelationshipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNodeRelationshipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NodeRelationship model
   */
  readonly fields: NodeRelationshipFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NodeRelationship.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NodeRelationshipClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    outgoing_relations<T extends NodeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NodeDefaultArgs<ExtArgs>>): Prisma__NodeClient<$Result.GetResult<Prisma.$NodePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    incoming_relations<T extends NodeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NodeDefaultArgs<ExtArgs>>): Prisma__NodeClient<$Result.GetResult<Prisma.$NodePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NodeRelationship model
   */ 
  interface NodeRelationshipFieldRefs {
    readonly node_relationship_id: FieldRef<"NodeRelationship", 'String'>
    readonly self_id: FieldRef<"NodeRelationship", 'String'>
    readonly relation_title: FieldRef<"NodeRelationship", 'String'>
    readonly target_id: FieldRef<"NodeRelationship", 'String'>
    readonly relationship_score: FieldRef<"NodeRelationship", 'Int'>
    readonly is_in_range: FieldRef<"NodeRelationship", 'Boolean'>
    readonly updated_on: FieldRef<"NodeRelationship", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * NodeRelationship findUnique
   */
  export type NodeRelationshipFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeRelationship
     */
    select?: NodeRelationshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeRelationship
     */
    omit?: NodeRelationshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeRelationshipInclude<ExtArgs> | null
    /**
     * Filter, which NodeRelationship to fetch.
     */
    where: NodeRelationshipWhereUniqueInput
  }

  /**
   * NodeRelationship findUniqueOrThrow
   */
  export type NodeRelationshipFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeRelationship
     */
    select?: NodeRelationshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeRelationship
     */
    omit?: NodeRelationshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeRelationshipInclude<ExtArgs> | null
    /**
     * Filter, which NodeRelationship to fetch.
     */
    where: NodeRelationshipWhereUniqueInput
  }

  /**
   * NodeRelationship findFirst
   */
  export type NodeRelationshipFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeRelationship
     */
    select?: NodeRelationshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeRelationship
     */
    omit?: NodeRelationshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeRelationshipInclude<ExtArgs> | null
    /**
     * Filter, which NodeRelationship to fetch.
     */
    where?: NodeRelationshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NodeRelationships to fetch.
     */
    orderBy?: NodeRelationshipOrderByWithRelationInput | NodeRelationshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NodeRelationships.
     */
    cursor?: NodeRelationshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NodeRelationships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NodeRelationships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NodeRelationships.
     */
    distinct?: NodeRelationshipScalarFieldEnum | NodeRelationshipScalarFieldEnum[]
  }

  /**
   * NodeRelationship findFirstOrThrow
   */
  export type NodeRelationshipFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeRelationship
     */
    select?: NodeRelationshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeRelationship
     */
    omit?: NodeRelationshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeRelationshipInclude<ExtArgs> | null
    /**
     * Filter, which NodeRelationship to fetch.
     */
    where?: NodeRelationshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NodeRelationships to fetch.
     */
    orderBy?: NodeRelationshipOrderByWithRelationInput | NodeRelationshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NodeRelationships.
     */
    cursor?: NodeRelationshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NodeRelationships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NodeRelationships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NodeRelationships.
     */
    distinct?: NodeRelationshipScalarFieldEnum | NodeRelationshipScalarFieldEnum[]
  }

  /**
   * NodeRelationship findMany
   */
  export type NodeRelationshipFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeRelationship
     */
    select?: NodeRelationshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeRelationship
     */
    omit?: NodeRelationshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeRelationshipInclude<ExtArgs> | null
    /**
     * Filter, which NodeRelationships to fetch.
     */
    where?: NodeRelationshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NodeRelationships to fetch.
     */
    orderBy?: NodeRelationshipOrderByWithRelationInput | NodeRelationshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NodeRelationships.
     */
    cursor?: NodeRelationshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NodeRelationships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NodeRelationships.
     */
    skip?: number
    distinct?: NodeRelationshipScalarFieldEnum | NodeRelationshipScalarFieldEnum[]
  }

  /**
   * NodeRelationship create
   */
  export type NodeRelationshipCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeRelationship
     */
    select?: NodeRelationshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeRelationship
     */
    omit?: NodeRelationshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeRelationshipInclude<ExtArgs> | null
    /**
     * The data needed to create a NodeRelationship.
     */
    data: XOR<NodeRelationshipCreateInput, NodeRelationshipUncheckedCreateInput>
  }

  /**
   * NodeRelationship createMany
   */
  export type NodeRelationshipCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NodeRelationships.
     */
    data: NodeRelationshipCreateManyInput | NodeRelationshipCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NodeRelationship createManyAndReturn
   */
  export type NodeRelationshipCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeRelationship
     */
    select?: NodeRelationshipSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NodeRelationship
     */
    omit?: NodeRelationshipOmit<ExtArgs> | null
    /**
     * The data used to create many NodeRelationships.
     */
    data: NodeRelationshipCreateManyInput | NodeRelationshipCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeRelationshipIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NodeRelationship update
   */
  export type NodeRelationshipUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeRelationship
     */
    select?: NodeRelationshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeRelationship
     */
    omit?: NodeRelationshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeRelationshipInclude<ExtArgs> | null
    /**
     * The data needed to update a NodeRelationship.
     */
    data: XOR<NodeRelationshipUpdateInput, NodeRelationshipUncheckedUpdateInput>
    /**
     * Choose, which NodeRelationship to update.
     */
    where: NodeRelationshipWhereUniqueInput
  }

  /**
   * NodeRelationship updateMany
   */
  export type NodeRelationshipUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NodeRelationships.
     */
    data: XOR<NodeRelationshipUpdateManyMutationInput, NodeRelationshipUncheckedUpdateManyInput>
    /**
     * Filter which NodeRelationships to update
     */
    where?: NodeRelationshipWhereInput
  }

  /**
   * NodeRelationship updateManyAndReturn
   */
  export type NodeRelationshipUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeRelationship
     */
    select?: NodeRelationshipSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NodeRelationship
     */
    omit?: NodeRelationshipOmit<ExtArgs> | null
    /**
     * The data used to update NodeRelationships.
     */
    data: XOR<NodeRelationshipUpdateManyMutationInput, NodeRelationshipUncheckedUpdateManyInput>
    /**
     * Filter which NodeRelationships to update
     */
    where?: NodeRelationshipWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeRelationshipIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * NodeRelationship upsert
   */
  export type NodeRelationshipUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeRelationship
     */
    select?: NodeRelationshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeRelationship
     */
    omit?: NodeRelationshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeRelationshipInclude<ExtArgs> | null
    /**
     * The filter to search for the NodeRelationship to update in case it exists.
     */
    where: NodeRelationshipWhereUniqueInput
    /**
     * In case the NodeRelationship found by the `where` argument doesn't exist, create a new NodeRelationship with this data.
     */
    create: XOR<NodeRelationshipCreateInput, NodeRelationshipUncheckedCreateInput>
    /**
     * In case the NodeRelationship was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NodeRelationshipUpdateInput, NodeRelationshipUncheckedUpdateInput>
  }

  /**
   * NodeRelationship delete
   */
  export type NodeRelationshipDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeRelationship
     */
    select?: NodeRelationshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeRelationship
     */
    omit?: NodeRelationshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeRelationshipInclude<ExtArgs> | null
    /**
     * Filter which NodeRelationship to delete.
     */
    where: NodeRelationshipWhereUniqueInput
  }

  /**
   * NodeRelationship deleteMany
   */
  export type NodeRelationshipDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NodeRelationships to delete
     */
    where?: NodeRelationshipWhereInput
  }

  /**
   * NodeRelationship without action
   */
  export type NodeRelationshipDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodeRelationship
     */
    select?: NodeRelationshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NodeRelationship
     */
    omit?: NodeRelationshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodeRelationshipInclude<ExtArgs> | null
  }


  /**
   * Model SessionRecap
   */

  export type AggregateSessionRecap = {
    _count: SessionRecapCountAggregateOutputType | null
    _min: SessionRecapMinAggregateOutputType | null
    _max: SessionRecapMaxAggregateOutputType | null
  }

  export type SessionRecapMinAggregateOutputType = {
    session_recap_id: string | null
    title: string | null
    description: string | null
    play_date: Date | null
    created_on: Date | null
    updated_on: Date | null
    campaign_id: string | null
    published_on: Date | null
  }

  export type SessionRecapMaxAggregateOutputType = {
    session_recap_id: string | null
    title: string | null
    description: string | null
    play_date: Date | null
    created_on: Date | null
    updated_on: Date | null
    campaign_id: string | null
    published_on: Date | null
  }

  export type SessionRecapCountAggregateOutputType = {
    session_recap_id: number
    title: number
    description: number
    play_date: number
    created_on: number
    updated_on: number
    campaign_id: number
    published_on: number
    _all: number
  }


  export type SessionRecapMinAggregateInputType = {
    session_recap_id?: true
    title?: true
    description?: true
    play_date?: true
    created_on?: true
    updated_on?: true
    campaign_id?: true
    published_on?: true
  }

  export type SessionRecapMaxAggregateInputType = {
    session_recap_id?: true
    title?: true
    description?: true
    play_date?: true
    created_on?: true
    updated_on?: true
    campaign_id?: true
    published_on?: true
  }

  export type SessionRecapCountAggregateInputType = {
    session_recap_id?: true
    title?: true
    description?: true
    play_date?: true
    created_on?: true
    updated_on?: true
    campaign_id?: true
    published_on?: true
    _all?: true
  }

  export type SessionRecapAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SessionRecap to aggregate.
     */
    where?: SessionRecapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionRecaps to fetch.
     */
    orderBy?: SessionRecapOrderByWithRelationInput | SessionRecapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionRecapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionRecaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionRecaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SessionRecaps
    **/
    _count?: true | SessionRecapCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionRecapMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionRecapMaxAggregateInputType
  }

  export type GetSessionRecapAggregateType<T extends SessionRecapAggregateArgs> = {
        [P in keyof T & keyof AggregateSessionRecap]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSessionRecap[P]>
      : GetScalarType<T[P], AggregateSessionRecap[P]>
  }




  export type SessionRecapGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionRecapWhereInput
    orderBy?: SessionRecapOrderByWithAggregationInput | SessionRecapOrderByWithAggregationInput[]
    by: SessionRecapScalarFieldEnum[] | SessionRecapScalarFieldEnum
    having?: SessionRecapScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionRecapCountAggregateInputType | true
    _min?: SessionRecapMinAggregateInputType
    _max?: SessionRecapMaxAggregateInputType
  }

  export type SessionRecapGroupByOutputType = {
    session_recap_id: string
    title: string
    description: string | null
    play_date: Date
    created_on: Date
    updated_on: Date
    campaign_id: string | null
    published_on: Date | null
    _count: SessionRecapCountAggregateOutputType | null
    _min: SessionRecapMinAggregateOutputType | null
    _max: SessionRecapMaxAggregateOutputType | null
  }

  type GetSessionRecapGroupByPayload<T extends SessionRecapGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionRecapGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionRecapGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionRecapGroupByOutputType[P]>
            : GetScalarType<T[P], SessionRecapGroupByOutputType[P]>
        }
      >
    >


  export type SessionRecapSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    session_recap_id?: boolean
    title?: boolean
    description?: boolean
    play_date?: boolean
    created_on?: boolean
    updated_on?: boolean
    campaign_id?: boolean
    published_on?: boolean
    campaign?: boolean | SessionRecap$campaignArgs<ExtArgs>
  }, ExtArgs["result"]["sessionRecap"]>

  export type SessionRecapSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    session_recap_id?: boolean
    title?: boolean
    description?: boolean
    play_date?: boolean
    created_on?: boolean
    updated_on?: boolean
    campaign_id?: boolean
    published_on?: boolean
    campaign?: boolean | SessionRecap$campaignArgs<ExtArgs>
  }, ExtArgs["result"]["sessionRecap"]>

  export type SessionRecapSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    session_recap_id?: boolean
    title?: boolean
    description?: boolean
    play_date?: boolean
    created_on?: boolean
    updated_on?: boolean
    campaign_id?: boolean
    published_on?: boolean
    campaign?: boolean | SessionRecap$campaignArgs<ExtArgs>
  }, ExtArgs["result"]["sessionRecap"]>

  export type SessionRecapSelectScalar = {
    session_recap_id?: boolean
    title?: boolean
    description?: boolean
    play_date?: boolean
    created_on?: boolean
    updated_on?: boolean
    campaign_id?: boolean
    published_on?: boolean
  }

  export type SessionRecapOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"session_recap_id" | "title" | "description" | "play_date" | "created_on" | "updated_on" | "campaign_id" | "published_on", ExtArgs["result"]["sessionRecap"]>
  export type SessionRecapInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | SessionRecap$campaignArgs<ExtArgs>
  }
  export type SessionRecapIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | SessionRecap$campaignArgs<ExtArgs>
  }
  export type SessionRecapIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | SessionRecap$campaignArgs<ExtArgs>
  }

  export type $SessionRecapPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SessionRecap"
    objects: {
      campaign: Prisma.$CampaignPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      session_recap_id: string
      title: string
      description: string | null
      play_date: Date
      created_on: Date
      updated_on: Date
      campaign_id: string | null
      published_on: Date | null
    }, ExtArgs["result"]["sessionRecap"]>
    composites: {}
  }

  type SessionRecapGetPayload<S extends boolean | null | undefined | SessionRecapDefaultArgs> = $Result.GetResult<Prisma.$SessionRecapPayload, S>

  type SessionRecapCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionRecapFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionRecapCountAggregateInputType | true
    }

  export interface SessionRecapDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SessionRecap'], meta: { name: 'SessionRecap' } }
    /**
     * Find zero or one SessionRecap that matches the filter.
     * @param {SessionRecapFindUniqueArgs} args - Arguments to find a SessionRecap
     * @example
     * // Get one SessionRecap
     * const sessionRecap = await prisma.sessionRecap.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionRecapFindUniqueArgs>(args: SelectSubset<T, SessionRecapFindUniqueArgs<ExtArgs>>): Prisma__SessionRecapClient<$Result.GetResult<Prisma.$SessionRecapPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one SessionRecap that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionRecapFindUniqueOrThrowArgs} args - Arguments to find a SessionRecap
     * @example
     * // Get one SessionRecap
     * const sessionRecap = await prisma.sessionRecap.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionRecapFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionRecapFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionRecapClient<$Result.GetResult<Prisma.$SessionRecapPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first SessionRecap that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionRecapFindFirstArgs} args - Arguments to find a SessionRecap
     * @example
     * // Get one SessionRecap
     * const sessionRecap = await prisma.sessionRecap.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionRecapFindFirstArgs>(args?: SelectSubset<T, SessionRecapFindFirstArgs<ExtArgs>>): Prisma__SessionRecapClient<$Result.GetResult<Prisma.$SessionRecapPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first SessionRecap that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionRecapFindFirstOrThrowArgs} args - Arguments to find a SessionRecap
     * @example
     * // Get one SessionRecap
     * const sessionRecap = await prisma.sessionRecap.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionRecapFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionRecapFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionRecapClient<$Result.GetResult<Prisma.$SessionRecapPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more SessionRecaps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionRecapFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SessionRecaps
     * const sessionRecaps = await prisma.sessionRecap.findMany()
     * 
     * // Get first 10 SessionRecaps
     * const sessionRecaps = await prisma.sessionRecap.findMany({ take: 10 })
     * 
     * // Only select the `session_recap_id`
     * const sessionRecapWithSession_recap_idOnly = await prisma.sessionRecap.findMany({ select: { session_recap_id: true } })
     * 
     */
    findMany<T extends SessionRecapFindManyArgs>(args?: SelectSubset<T, SessionRecapFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionRecapPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a SessionRecap.
     * @param {SessionRecapCreateArgs} args - Arguments to create a SessionRecap.
     * @example
     * // Create one SessionRecap
     * const SessionRecap = await prisma.sessionRecap.create({
     *   data: {
     *     // ... data to create a SessionRecap
     *   }
     * })
     * 
     */
    create<T extends SessionRecapCreateArgs>(args: SelectSubset<T, SessionRecapCreateArgs<ExtArgs>>): Prisma__SessionRecapClient<$Result.GetResult<Prisma.$SessionRecapPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many SessionRecaps.
     * @param {SessionRecapCreateManyArgs} args - Arguments to create many SessionRecaps.
     * @example
     * // Create many SessionRecaps
     * const sessionRecap = await prisma.sessionRecap.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionRecapCreateManyArgs>(args?: SelectSubset<T, SessionRecapCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SessionRecaps and returns the data saved in the database.
     * @param {SessionRecapCreateManyAndReturnArgs} args - Arguments to create many SessionRecaps.
     * @example
     * // Create many SessionRecaps
     * const sessionRecap = await prisma.sessionRecap.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SessionRecaps and only return the `session_recap_id`
     * const sessionRecapWithSession_recap_idOnly = await prisma.sessionRecap.createManyAndReturn({
     *   select: { session_recap_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionRecapCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionRecapCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionRecapPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a SessionRecap.
     * @param {SessionRecapDeleteArgs} args - Arguments to delete one SessionRecap.
     * @example
     * // Delete one SessionRecap
     * const SessionRecap = await prisma.sessionRecap.delete({
     *   where: {
     *     // ... filter to delete one SessionRecap
     *   }
     * })
     * 
     */
    delete<T extends SessionRecapDeleteArgs>(args: SelectSubset<T, SessionRecapDeleteArgs<ExtArgs>>): Prisma__SessionRecapClient<$Result.GetResult<Prisma.$SessionRecapPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one SessionRecap.
     * @param {SessionRecapUpdateArgs} args - Arguments to update one SessionRecap.
     * @example
     * // Update one SessionRecap
     * const sessionRecap = await prisma.sessionRecap.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionRecapUpdateArgs>(args: SelectSubset<T, SessionRecapUpdateArgs<ExtArgs>>): Prisma__SessionRecapClient<$Result.GetResult<Prisma.$SessionRecapPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more SessionRecaps.
     * @param {SessionRecapDeleteManyArgs} args - Arguments to filter SessionRecaps to delete.
     * @example
     * // Delete a few SessionRecaps
     * const { count } = await prisma.sessionRecap.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionRecapDeleteManyArgs>(args?: SelectSubset<T, SessionRecapDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SessionRecaps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionRecapUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SessionRecaps
     * const sessionRecap = await prisma.sessionRecap.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionRecapUpdateManyArgs>(args: SelectSubset<T, SessionRecapUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SessionRecaps and returns the data updated in the database.
     * @param {SessionRecapUpdateManyAndReturnArgs} args - Arguments to update many SessionRecaps.
     * @example
     * // Update many SessionRecaps
     * const sessionRecap = await prisma.sessionRecap.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SessionRecaps and only return the `session_recap_id`
     * const sessionRecapWithSession_recap_idOnly = await prisma.sessionRecap.updateManyAndReturn({
     *   select: { session_recap_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionRecapUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionRecapUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionRecapPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one SessionRecap.
     * @param {SessionRecapUpsertArgs} args - Arguments to update or create a SessionRecap.
     * @example
     * // Update or create a SessionRecap
     * const sessionRecap = await prisma.sessionRecap.upsert({
     *   create: {
     *     // ... data to create a SessionRecap
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SessionRecap we want to update
     *   }
     * })
     */
    upsert<T extends SessionRecapUpsertArgs>(args: SelectSubset<T, SessionRecapUpsertArgs<ExtArgs>>): Prisma__SessionRecapClient<$Result.GetResult<Prisma.$SessionRecapPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of SessionRecaps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionRecapCountArgs} args - Arguments to filter SessionRecaps to count.
     * @example
     * // Count the number of SessionRecaps
     * const count = await prisma.sessionRecap.count({
     *   where: {
     *     // ... the filter for the SessionRecaps we want to count
     *   }
     * })
    **/
    count<T extends SessionRecapCountArgs>(
      args?: Subset<T, SessionRecapCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionRecapCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SessionRecap.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionRecapAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionRecapAggregateArgs>(args: Subset<T, SessionRecapAggregateArgs>): Prisma.PrismaPromise<GetSessionRecapAggregateType<T>>

    /**
     * Group by SessionRecap.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionRecapGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionRecapGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionRecapGroupByArgs['orderBy'] }
        : { orderBy?: SessionRecapGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionRecapGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionRecapGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SessionRecap model
   */
  readonly fields: SessionRecapFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SessionRecap.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionRecapClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    campaign<T extends SessionRecap$campaignArgs<ExtArgs> = {}>(args?: Subset<T, SessionRecap$campaignArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SessionRecap model
   */ 
  interface SessionRecapFieldRefs {
    readonly session_recap_id: FieldRef<"SessionRecap", 'String'>
    readonly title: FieldRef<"SessionRecap", 'String'>
    readonly description: FieldRef<"SessionRecap", 'String'>
    readonly play_date: FieldRef<"SessionRecap", 'DateTime'>
    readonly created_on: FieldRef<"SessionRecap", 'DateTime'>
    readonly updated_on: FieldRef<"SessionRecap", 'DateTime'>
    readonly campaign_id: FieldRef<"SessionRecap", 'String'>
    readonly published_on: FieldRef<"SessionRecap", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SessionRecap findUnique
   */
  export type SessionRecapFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionRecap
     */
    select?: SessionRecapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionRecap
     */
    omit?: SessionRecapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionRecapInclude<ExtArgs> | null
    /**
     * Filter, which SessionRecap to fetch.
     */
    where: SessionRecapWhereUniqueInput
  }

  /**
   * SessionRecap findUniqueOrThrow
   */
  export type SessionRecapFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionRecap
     */
    select?: SessionRecapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionRecap
     */
    omit?: SessionRecapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionRecapInclude<ExtArgs> | null
    /**
     * Filter, which SessionRecap to fetch.
     */
    where: SessionRecapWhereUniqueInput
  }

  /**
   * SessionRecap findFirst
   */
  export type SessionRecapFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionRecap
     */
    select?: SessionRecapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionRecap
     */
    omit?: SessionRecapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionRecapInclude<ExtArgs> | null
    /**
     * Filter, which SessionRecap to fetch.
     */
    where?: SessionRecapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionRecaps to fetch.
     */
    orderBy?: SessionRecapOrderByWithRelationInput | SessionRecapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionRecaps.
     */
    cursor?: SessionRecapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionRecaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionRecaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionRecaps.
     */
    distinct?: SessionRecapScalarFieldEnum | SessionRecapScalarFieldEnum[]
  }

  /**
   * SessionRecap findFirstOrThrow
   */
  export type SessionRecapFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionRecap
     */
    select?: SessionRecapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionRecap
     */
    omit?: SessionRecapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionRecapInclude<ExtArgs> | null
    /**
     * Filter, which SessionRecap to fetch.
     */
    where?: SessionRecapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionRecaps to fetch.
     */
    orderBy?: SessionRecapOrderByWithRelationInput | SessionRecapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionRecaps.
     */
    cursor?: SessionRecapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionRecaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionRecaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionRecaps.
     */
    distinct?: SessionRecapScalarFieldEnum | SessionRecapScalarFieldEnum[]
  }

  /**
   * SessionRecap findMany
   */
  export type SessionRecapFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionRecap
     */
    select?: SessionRecapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionRecap
     */
    omit?: SessionRecapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionRecapInclude<ExtArgs> | null
    /**
     * Filter, which SessionRecaps to fetch.
     */
    where?: SessionRecapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionRecaps to fetch.
     */
    orderBy?: SessionRecapOrderByWithRelationInput | SessionRecapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SessionRecaps.
     */
    cursor?: SessionRecapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionRecaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionRecaps.
     */
    skip?: number
    distinct?: SessionRecapScalarFieldEnum | SessionRecapScalarFieldEnum[]
  }

  /**
   * SessionRecap create
   */
  export type SessionRecapCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionRecap
     */
    select?: SessionRecapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionRecap
     */
    omit?: SessionRecapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionRecapInclude<ExtArgs> | null
    /**
     * The data needed to create a SessionRecap.
     */
    data: XOR<SessionRecapCreateInput, SessionRecapUncheckedCreateInput>
  }

  /**
   * SessionRecap createMany
   */
  export type SessionRecapCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SessionRecaps.
     */
    data: SessionRecapCreateManyInput | SessionRecapCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SessionRecap createManyAndReturn
   */
  export type SessionRecapCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionRecap
     */
    select?: SessionRecapSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SessionRecap
     */
    omit?: SessionRecapOmit<ExtArgs> | null
    /**
     * The data used to create many SessionRecaps.
     */
    data: SessionRecapCreateManyInput | SessionRecapCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionRecapIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SessionRecap update
   */
  export type SessionRecapUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionRecap
     */
    select?: SessionRecapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionRecap
     */
    omit?: SessionRecapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionRecapInclude<ExtArgs> | null
    /**
     * The data needed to update a SessionRecap.
     */
    data: XOR<SessionRecapUpdateInput, SessionRecapUncheckedUpdateInput>
    /**
     * Choose, which SessionRecap to update.
     */
    where: SessionRecapWhereUniqueInput
  }

  /**
   * SessionRecap updateMany
   */
  export type SessionRecapUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SessionRecaps.
     */
    data: XOR<SessionRecapUpdateManyMutationInput, SessionRecapUncheckedUpdateManyInput>
    /**
     * Filter which SessionRecaps to update
     */
    where?: SessionRecapWhereInput
  }

  /**
   * SessionRecap updateManyAndReturn
   */
  export type SessionRecapUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionRecap
     */
    select?: SessionRecapSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SessionRecap
     */
    omit?: SessionRecapOmit<ExtArgs> | null
    /**
     * The data used to update SessionRecaps.
     */
    data: XOR<SessionRecapUpdateManyMutationInput, SessionRecapUncheckedUpdateManyInput>
    /**
     * Filter which SessionRecaps to update
     */
    where?: SessionRecapWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionRecapIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SessionRecap upsert
   */
  export type SessionRecapUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionRecap
     */
    select?: SessionRecapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionRecap
     */
    omit?: SessionRecapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionRecapInclude<ExtArgs> | null
    /**
     * The filter to search for the SessionRecap to update in case it exists.
     */
    where: SessionRecapWhereUniqueInput
    /**
     * In case the SessionRecap found by the `where` argument doesn't exist, create a new SessionRecap with this data.
     */
    create: XOR<SessionRecapCreateInput, SessionRecapUncheckedCreateInput>
    /**
     * In case the SessionRecap was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionRecapUpdateInput, SessionRecapUncheckedUpdateInput>
  }

  /**
   * SessionRecap delete
   */
  export type SessionRecapDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionRecap
     */
    select?: SessionRecapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionRecap
     */
    omit?: SessionRecapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionRecapInclude<ExtArgs> | null
    /**
     * Filter which SessionRecap to delete.
     */
    where: SessionRecapWhereUniqueInput
  }

  /**
   * SessionRecap deleteMany
   */
  export type SessionRecapDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SessionRecaps to delete
     */
    where?: SessionRecapWhereInput
  }

  /**
   * SessionRecap.campaign
   */
  export type SessionRecap$campaignArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    where?: CampaignWhereInput
  }

  /**
   * SessionRecap without action
   */
  export type SessionRecapDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionRecap
     */
    select?: SessionRecapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionRecap
     */
    omit?: SessionRecapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionRecapInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    updated_on: 'updated_on',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    identifier: 'identifier',
    token: 'token',
    expires: 'expires'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const EventPublishProviderScalarFieldEnum: {
    id: 'id',
    provider: 'provider',
    url: 'url',
    campaign_id: 'campaign_id'
  };

  export type EventPublishProviderScalarFieldEnum = (typeof EventPublishProviderScalarFieldEnum)[keyof typeof EventPublishProviderScalarFieldEnum]


  export const CampaignScalarFieldEnum: {
    campaign_id: 'campaign_id',
    title: 'title',
    description: 'description',
    image: 'image',
    header_image: 'header_image',
    allow_ai_events: 'allow_ai_events',
    overview_map_id: 'overview_map_id',
    created_on: 'created_on'
  };

  export type CampaignScalarFieldEnum = (typeof CampaignScalarFieldEnum)[keyof typeof CampaignScalarFieldEnum]


  export const UserCampaignScalarFieldEnum: {
    user_campaign_id: 'user_campaign_id',
    user_id: 'user_id',
    campaign_id: 'campaign_id',
    created_on: 'created_on',
    updated_on: 'updated_on',
    last_visited_on: 'last_visited_on'
  };

  export type UserCampaignScalarFieldEnum = (typeof UserCampaignScalarFieldEnum)[keyof typeof UserCampaignScalarFieldEnum]


  export const EventTemplateScalarFieldEnum: {
    event_template_id: 'event_template_id',
    title: 'title',
    description: 'description',
    type: 'type',
    icon_url: 'icon_url',
    rarity: 'rarity',
    relationship: 'relationship',
    compare: 'compare',
    exclude_from_random: 'exclude_from_random',
    results: 'results',
    campaign_id: 'campaign_id',
    node_references: 'node_references'
  };

  export type EventTemplateScalarFieldEnum = (typeof EventTemplateScalarFieldEnum)[keyof typeof EventTemplateScalarFieldEnum]


  export const EventScalarFieldEnum: {
    event_id: 'event_id',
    name: 'name',
    description: 'description',
    type: 'type',
    rarity: 'rarity',
    created_on: 'created_on',
    updated_on: 'updated_on'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const StaticMapScalarFieldEnum: {
    map_id: 'map_id',
    name: 'name',
    image_url: 'image_url',
    created_on: 'created_on',
    updated_on: 'updated_on',
    campaign_id: 'campaign_id'
  };

  export type StaticMapScalarFieldEnum = (typeof StaticMapScalarFieldEnum)[keyof typeof StaticMapScalarFieldEnum]


  export const NodeTypeScalarFieldEnum: {
    node_type_id: 'node_type_id',
    name: 'name',
    allowed_attributes: 'allowed_attributes',
    campaign_id: 'campaign_id'
  };

  export type NodeTypeScalarFieldEnum = (typeof NodeTypeScalarFieldEnum)[keyof typeof NodeTypeScalarFieldEnum]


  export const AttributeScalarFieldEnum: {
    attribute_id: 'attribute_id',
    title: 'title',
    value: 'value',
    node_id: 'node_id'
  };

  export type AttributeScalarFieldEnum = (typeof AttributeScalarFieldEnum)[keyof typeof AttributeScalarFieldEnum]


  export const NodeScalarFieldEnum: {
    node_id: 'node_id',
    name: 'name',
    description: 'description',
    long_description: 'long_description',
    image_url: 'image_url',
    created_on: 'created_on',
    updated_on: 'updated_on',
    base_culture: 'base_culture',
    profession: 'profession',
    given_name_style: 'given_name_style',
    family_name_style: 'family_name_style',
    name_shape: 'name_shape',
    campaign_id: 'campaign_id',
    node_type_id: 'node_type_id',
    exclude_from_events: 'exclude_from_events'
  };

  export type NodeScalarFieldEnum = (typeof NodeScalarFieldEnum)[keyof typeof NodeScalarFieldEnum]


  export const MapNodeScalarFieldEnum: {
    map_node_id: 'map_node_id',
    coordinates: 'coordinates',
    moveable: 'moveable',
    title: 'title',
    description: 'description',
    icon_url: 'icon_url',
    icon: 'icon',
    created_on: 'created_on',
    updated_on: 'updated_on',
    map_id: 'map_id',
    node_id: 'node_id'
  };

  export type MapNodeScalarFieldEnum = (typeof MapNodeScalarFieldEnum)[keyof typeof MapNodeScalarFieldEnum]


  export const NodeRelationshipScalarFieldEnum: {
    node_relationship_id: 'node_relationship_id',
    self_id: 'self_id',
    relation_title: 'relation_title',
    target_id: 'target_id',
    relationship_score: 'relationship_score',
    is_in_range: 'is_in_range',
    updated_on: 'updated_on'
  };

  export type NodeRelationshipScalarFieldEnum = (typeof NodeRelationshipScalarFieldEnum)[keyof typeof NodeRelationshipScalarFieldEnum]


  export const SessionRecapScalarFieldEnum: {
    session_recap_id: 'session_recap_id',
    title: 'title',
    description: 'description',
    play_date: 'play_date',
    created_on: 'created_on',
    updated_on: 'updated_on',
    campaign_id: 'campaign_id',
    published_on: 'published_on'
  };

  export type SessionRecapScalarFieldEnum = (typeof SessionRecapScalarFieldEnum)[keyof typeof SessionRecapScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const AccountOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountOrderByRelevanceFieldEnum = (typeof AccountOrderByRelevanceFieldEnum)[keyof typeof AccountOrderByRelevanceFieldEnum]


  export const SessionOrderByRelevanceFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId'
  };

  export type SessionOrderByRelevanceFieldEnum = (typeof SessionOrderByRelevanceFieldEnum)[keyof typeof SessionOrderByRelevanceFieldEnum]


  export const UserOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    image: 'image',
    role: 'role'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const VerificationTokenOrderByRelevanceFieldEnum: {
    identifier: 'identifier',
    token: 'token'
  };

  export type VerificationTokenOrderByRelevanceFieldEnum = (typeof VerificationTokenOrderByRelevanceFieldEnum)[keyof typeof VerificationTokenOrderByRelevanceFieldEnum]


  export const EventPublishProviderOrderByRelevanceFieldEnum: {
    id: 'id',
    provider: 'provider',
    url: 'url',
    campaign_id: 'campaign_id'
  };

  export type EventPublishProviderOrderByRelevanceFieldEnum = (typeof EventPublishProviderOrderByRelevanceFieldEnum)[keyof typeof EventPublishProviderOrderByRelevanceFieldEnum]


  export const CampaignOrderByRelevanceFieldEnum: {
    campaign_id: 'campaign_id',
    title: 'title',
    description: 'description',
    image: 'image',
    header_image: 'header_image',
    overview_map_id: 'overview_map_id'
  };

  export type CampaignOrderByRelevanceFieldEnum = (typeof CampaignOrderByRelevanceFieldEnum)[keyof typeof CampaignOrderByRelevanceFieldEnum]


  export const UserCampaignOrderByRelevanceFieldEnum: {
    user_campaign_id: 'user_campaign_id',
    user_id: 'user_id',
    campaign_id: 'campaign_id'
  };

  export type UserCampaignOrderByRelevanceFieldEnum = (typeof UserCampaignOrderByRelevanceFieldEnum)[keyof typeof UserCampaignOrderByRelevanceFieldEnum]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const EventTemplateOrderByRelevanceFieldEnum: {
    event_template_id: 'event_template_id',
    title: 'title',
    description: 'description',
    type: 'type',
    icon_url: 'icon_url',
    relationship: 'relationship',
    compare: 'compare',
    campaign_id: 'campaign_id',
    node_references: 'node_references'
  };

  export type EventTemplateOrderByRelevanceFieldEnum = (typeof EventTemplateOrderByRelevanceFieldEnum)[keyof typeof EventTemplateOrderByRelevanceFieldEnum]


  export const EventOrderByRelevanceFieldEnum: {
    event_id: 'event_id',
    name: 'name',
    description: 'description',
    type: 'type'
  };

  export type EventOrderByRelevanceFieldEnum = (typeof EventOrderByRelevanceFieldEnum)[keyof typeof EventOrderByRelevanceFieldEnum]


  export const StaticMapOrderByRelevanceFieldEnum: {
    map_id: 'map_id',
    name: 'name',
    image_url: 'image_url',
    campaign_id: 'campaign_id'
  };

  export type StaticMapOrderByRelevanceFieldEnum = (typeof StaticMapOrderByRelevanceFieldEnum)[keyof typeof StaticMapOrderByRelevanceFieldEnum]


  export const NodeTypeOrderByRelevanceFieldEnum: {
    node_type_id: 'node_type_id',
    name: 'name',
    allowed_attributes: 'allowed_attributes',
    campaign_id: 'campaign_id'
  };

  export type NodeTypeOrderByRelevanceFieldEnum = (typeof NodeTypeOrderByRelevanceFieldEnum)[keyof typeof NodeTypeOrderByRelevanceFieldEnum]


  export const AttributeOrderByRelevanceFieldEnum: {
    attribute_id: 'attribute_id',
    title: 'title',
    node_id: 'node_id'
  };

  export type AttributeOrderByRelevanceFieldEnum = (typeof AttributeOrderByRelevanceFieldEnum)[keyof typeof AttributeOrderByRelevanceFieldEnum]


  export const NodeOrderByRelevanceFieldEnum: {
    node_id: 'node_id',
    name: 'name',
    description: 'description',
    long_description: 'long_description',
    image_url: 'image_url',
    base_culture: 'base_culture',
    profession: 'profession',
    given_name_style: 'given_name_style',
    family_name_style: 'family_name_style',
    name_shape: 'name_shape',
    campaign_id: 'campaign_id',
    node_type_id: 'node_type_id'
  };

  export type NodeOrderByRelevanceFieldEnum = (typeof NodeOrderByRelevanceFieldEnum)[keyof typeof NodeOrderByRelevanceFieldEnum]


  export const MapNodeOrderByRelevanceFieldEnum: {
    map_node_id: 'map_node_id',
    title: 'title',
    description: 'description',
    icon_url: 'icon_url',
    icon: 'icon',
    map_id: 'map_id',
    node_id: 'node_id'
  };

  export type MapNodeOrderByRelevanceFieldEnum = (typeof MapNodeOrderByRelevanceFieldEnum)[keyof typeof MapNodeOrderByRelevanceFieldEnum]


  export const NodeRelationshipOrderByRelevanceFieldEnum: {
    node_relationship_id: 'node_relationship_id',
    self_id: 'self_id',
    relation_title: 'relation_title',
    target_id: 'target_id'
  };

  export type NodeRelationshipOrderByRelevanceFieldEnum = (typeof NodeRelationshipOrderByRelevanceFieldEnum)[keyof typeof NodeRelationshipOrderByRelevanceFieldEnum]


  export const SessionRecapOrderByRelevanceFieldEnum: {
    session_recap_id: 'session_recap_id',
    title: 'title',
    description: 'description',
    campaign_id: 'campaign_id'
  };

  export type SessionRecapOrderByRelevanceFieldEnum = (typeof SessionRecapOrderByRelevanceFieldEnum)[keyof typeof SessionRecapOrderByRelevanceFieldEnum]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: AccountOrderByRelevanceInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: SessionOrderByRelevanceInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionToken?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "sessionToken">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    sessionToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    expires?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    email?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    updated_on?: DateTimeNullableFilter<"User"> | Date | string | null
    role?: StringFilter<"User"> | string
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    campaigns?: CampaignListRelationFilter
    user_campaigns?: UserCampaignListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    updated_on?: SortOrderInput | SortOrder
    role?: SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    campaigns?: CampaignOrderByRelationAggregateInput
    user_campaigns?: UserCampaignOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    updated_on?: DateTimeNullableFilter<"User"> | Date | string | null
    role?: StringFilter<"User"> | string
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    campaigns?: CampaignListRelationFilter
    user_campaigns?: UserCampaignListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    updated_on?: SortOrderInput | SortOrder
    role?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    emailVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    updated_on?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    role?: StringWithAggregatesFilter<"User"> | string
  }

  export type VerificationTokenWhereInput = {
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _relevance?: VerificationTokenOrderByRelevanceInput
  }

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    token?: string
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }, "token" | "identifier_token">

  export type VerificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    OR?: VerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    identifier?: StringWithAggregatesFilter<"VerificationToken"> | string
    token?: StringWithAggregatesFilter<"VerificationToken"> | string
    expires?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
  }

  export type EventPublishProviderWhereInput = {
    AND?: EventPublishProviderWhereInput | EventPublishProviderWhereInput[]
    OR?: EventPublishProviderWhereInput[]
    NOT?: EventPublishProviderWhereInput | EventPublishProviderWhereInput[]
    id?: StringFilter<"EventPublishProvider"> | string
    provider?: StringFilter<"EventPublishProvider"> | string
    url?: StringFilter<"EventPublishProvider"> | string
    campaign_id?: StringFilter<"EventPublishProvider"> | string
    campaign?: XOR<CampaignNullableScalarRelationFilter, CampaignWhereInput> | null
  }

  export type EventPublishProviderOrderByWithRelationInput = {
    id?: SortOrder
    provider?: SortOrder
    url?: SortOrder
    campaign_id?: SortOrder
    campaign?: CampaignOrderByWithRelationInput
    _relevance?: EventPublishProviderOrderByRelevanceInput
  }

  export type EventPublishProviderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EventPublishProviderWhereInput | EventPublishProviderWhereInput[]
    OR?: EventPublishProviderWhereInput[]
    NOT?: EventPublishProviderWhereInput | EventPublishProviderWhereInput[]
    provider?: StringFilter<"EventPublishProvider"> | string
    url?: StringFilter<"EventPublishProvider"> | string
    campaign_id?: StringFilter<"EventPublishProvider"> | string
    campaign?: XOR<CampaignNullableScalarRelationFilter, CampaignWhereInput> | null
  }, "id">

  export type EventPublishProviderOrderByWithAggregationInput = {
    id?: SortOrder
    provider?: SortOrder
    url?: SortOrder
    campaign_id?: SortOrder
    _count?: EventPublishProviderCountOrderByAggregateInput
    _max?: EventPublishProviderMaxOrderByAggregateInput
    _min?: EventPublishProviderMinOrderByAggregateInput
  }

  export type EventPublishProviderScalarWhereWithAggregatesInput = {
    AND?: EventPublishProviderScalarWhereWithAggregatesInput | EventPublishProviderScalarWhereWithAggregatesInput[]
    OR?: EventPublishProviderScalarWhereWithAggregatesInput[]
    NOT?: EventPublishProviderScalarWhereWithAggregatesInput | EventPublishProviderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EventPublishProvider"> | string
    provider?: StringWithAggregatesFilter<"EventPublishProvider"> | string
    url?: StringWithAggregatesFilter<"EventPublishProvider"> | string
    campaign_id?: StringWithAggregatesFilter<"EventPublishProvider"> | string
  }

  export type CampaignWhereInput = {
    AND?: CampaignWhereInput | CampaignWhereInput[]
    OR?: CampaignWhereInput[]
    NOT?: CampaignWhereInput | CampaignWhereInput[]
    campaign_id?: StringFilter<"Campaign"> | string
    title?: StringFilter<"Campaign"> | string
    description?: StringFilter<"Campaign"> | string
    image?: StringNullableFilter<"Campaign"> | string | null
    header_image?: StringNullableFilter<"Campaign"> | string | null
    allow_ai_events?: BoolFilter<"Campaign"> | boolean
    overview_map_id?: StringNullableFilter<"Campaign"> | string | null
    created_on?: DateTimeFilter<"Campaign"> | Date | string
    node_types?: NodeTypeListRelationFilter
    users?: UserListRelationFilter
    static_maps?: StaticMapListRelationFilter
    session_recaps?: SessionRecapListRelationFilter
    nodes?: NodeListRelationFilter
    event_templates?: EventTemplateListRelationFilter
    event_publish_provider?: EventPublishProviderListRelationFilter
    user_campaigns?: UserCampaignListRelationFilter
  }

  export type CampaignOrderByWithRelationInput = {
    campaign_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrderInput | SortOrder
    header_image?: SortOrderInput | SortOrder
    allow_ai_events?: SortOrder
    overview_map_id?: SortOrderInput | SortOrder
    created_on?: SortOrder
    node_types?: NodeTypeOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
    static_maps?: StaticMapOrderByRelationAggregateInput
    session_recaps?: SessionRecapOrderByRelationAggregateInput
    nodes?: NodeOrderByRelationAggregateInput
    event_templates?: EventTemplateOrderByRelationAggregateInput
    event_publish_provider?: EventPublishProviderOrderByRelationAggregateInput
    user_campaigns?: UserCampaignOrderByRelationAggregateInput
    _relevance?: CampaignOrderByRelevanceInput
  }

  export type CampaignWhereUniqueInput = Prisma.AtLeast<{
    campaign_id?: string
    AND?: CampaignWhereInput | CampaignWhereInput[]
    OR?: CampaignWhereInput[]
    NOT?: CampaignWhereInput | CampaignWhereInput[]
    title?: StringFilter<"Campaign"> | string
    description?: StringFilter<"Campaign"> | string
    image?: StringNullableFilter<"Campaign"> | string | null
    header_image?: StringNullableFilter<"Campaign"> | string | null
    allow_ai_events?: BoolFilter<"Campaign"> | boolean
    overview_map_id?: StringNullableFilter<"Campaign"> | string | null
    created_on?: DateTimeFilter<"Campaign"> | Date | string
    node_types?: NodeTypeListRelationFilter
    users?: UserListRelationFilter
    static_maps?: StaticMapListRelationFilter
    session_recaps?: SessionRecapListRelationFilter
    nodes?: NodeListRelationFilter
    event_templates?: EventTemplateListRelationFilter
    event_publish_provider?: EventPublishProviderListRelationFilter
    user_campaigns?: UserCampaignListRelationFilter
  }, "campaign_id">

  export type CampaignOrderByWithAggregationInput = {
    campaign_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrderInput | SortOrder
    header_image?: SortOrderInput | SortOrder
    allow_ai_events?: SortOrder
    overview_map_id?: SortOrderInput | SortOrder
    created_on?: SortOrder
    _count?: CampaignCountOrderByAggregateInput
    _max?: CampaignMaxOrderByAggregateInput
    _min?: CampaignMinOrderByAggregateInput
  }

  export type CampaignScalarWhereWithAggregatesInput = {
    AND?: CampaignScalarWhereWithAggregatesInput | CampaignScalarWhereWithAggregatesInput[]
    OR?: CampaignScalarWhereWithAggregatesInput[]
    NOT?: CampaignScalarWhereWithAggregatesInput | CampaignScalarWhereWithAggregatesInput[]
    campaign_id?: StringWithAggregatesFilter<"Campaign"> | string
    title?: StringWithAggregatesFilter<"Campaign"> | string
    description?: StringWithAggregatesFilter<"Campaign"> | string
    image?: StringNullableWithAggregatesFilter<"Campaign"> | string | null
    header_image?: StringNullableWithAggregatesFilter<"Campaign"> | string | null
    allow_ai_events?: BoolWithAggregatesFilter<"Campaign"> | boolean
    overview_map_id?: StringNullableWithAggregatesFilter<"Campaign"> | string | null
    created_on?: DateTimeWithAggregatesFilter<"Campaign"> | Date | string
  }

  export type UserCampaignWhereInput = {
    AND?: UserCampaignWhereInput | UserCampaignWhereInput[]
    OR?: UserCampaignWhereInput[]
    NOT?: UserCampaignWhereInput | UserCampaignWhereInput[]
    user_campaign_id?: StringFilter<"UserCampaign"> | string
    user_id?: StringFilter<"UserCampaign"> | string
    campaign_id?: StringFilter<"UserCampaign"> | string
    created_on?: DateTimeFilter<"UserCampaign"> | Date | string
    updated_on?: DateTimeFilter<"UserCampaign"> | Date | string
    last_visited_on?: DateTimeFilter<"UserCampaign"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    campaign?: XOR<CampaignScalarRelationFilter, CampaignWhereInput>
  }

  export type UserCampaignOrderByWithRelationInput = {
    user_campaign_id?: SortOrder
    user_id?: SortOrder
    campaign_id?: SortOrder
    created_on?: SortOrder
    updated_on?: SortOrder
    last_visited_on?: SortOrder
    user?: UserOrderByWithRelationInput
    campaign?: CampaignOrderByWithRelationInput
    _relevance?: UserCampaignOrderByRelevanceInput
  }

  export type UserCampaignWhereUniqueInput = Prisma.AtLeast<{
    user_campaign_id?: string
    AND?: UserCampaignWhereInput | UserCampaignWhereInput[]
    OR?: UserCampaignWhereInput[]
    NOT?: UserCampaignWhereInput | UserCampaignWhereInput[]
    user_id?: StringFilter<"UserCampaign"> | string
    campaign_id?: StringFilter<"UserCampaign"> | string
    created_on?: DateTimeFilter<"UserCampaign"> | Date | string
    updated_on?: DateTimeFilter<"UserCampaign"> | Date | string
    last_visited_on?: DateTimeFilter<"UserCampaign"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    campaign?: XOR<CampaignScalarRelationFilter, CampaignWhereInput>
  }, "user_campaign_id">

  export type UserCampaignOrderByWithAggregationInput = {
    user_campaign_id?: SortOrder
    user_id?: SortOrder
    campaign_id?: SortOrder
    created_on?: SortOrder
    updated_on?: SortOrder
    last_visited_on?: SortOrder
    _count?: UserCampaignCountOrderByAggregateInput
    _max?: UserCampaignMaxOrderByAggregateInput
    _min?: UserCampaignMinOrderByAggregateInput
  }

  export type UserCampaignScalarWhereWithAggregatesInput = {
    AND?: UserCampaignScalarWhereWithAggregatesInput | UserCampaignScalarWhereWithAggregatesInput[]
    OR?: UserCampaignScalarWhereWithAggregatesInput[]
    NOT?: UserCampaignScalarWhereWithAggregatesInput | UserCampaignScalarWhereWithAggregatesInput[]
    user_campaign_id?: StringWithAggregatesFilter<"UserCampaign"> | string
    user_id?: StringWithAggregatesFilter<"UserCampaign"> | string
    campaign_id?: StringWithAggregatesFilter<"UserCampaign"> | string
    created_on?: DateTimeWithAggregatesFilter<"UserCampaign"> | Date | string
    updated_on?: DateTimeWithAggregatesFilter<"UserCampaign"> | Date | string
    last_visited_on?: DateTimeWithAggregatesFilter<"UserCampaign"> | Date | string
  }

  export type EventTemplateWhereInput = {
    AND?: EventTemplateWhereInput | EventTemplateWhereInput[]
    OR?: EventTemplateWhereInput[]
    NOT?: EventTemplateWhereInput | EventTemplateWhereInput[]
    event_template_id?: StringFilter<"EventTemplate"> | string
    title?: StringFilter<"EventTemplate"> | string
    description?: StringFilter<"EventTemplate"> | string
    type?: StringFilter<"EventTemplate"> | string
    icon_url?: StringFilter<"EventTemplate"> | string
    rarity?: IntFilter<"EventTemplate"> | number
    relationship?: StringNullableFilter<"EventTemplate"> | string | null
    compare?: StringNullableFilter<"EventTemplate"> | string | null
    exclude_from_random?: BoolNullableFilter<"EventTemplate"> | boolean | null
    results?: JsonFilter<"EventTemplate">
    campaign_id?: StringNullableFilter<"EventTemplate"> | string | null
    node_references?: StringNullableFilter<"EventTemplate"> | string | null
    campaign?: XOR<CampaignNullableScalarRelationFilter, CampaignWhereInput> | null
  }

  export type EventTemplateOrderByWithRelationInput = {
    event_template_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    icon_url?: SortOrder
    rarity?: SortOrder
    relationship?: SortOrderInput | SortOrder
    compare?: SortOrderInput | SortOrder
    exclude_from_random?: SortOrderInput | SortOrder
    results?: SortOrder
    campaign_id?: SortOrderInput | SortOrder
    node_references?: SortOrderInput | SortOrder
    campaign?: CampaignOrderByWithRelationInput
    _relevance?: EventTemplateOrderByRelevanceInput
  }

  export type EventTemplateWhereUniqueInput = Prisma.AtLeast<{
    event_template_id?: string
    AND?: EventTemplateWhereInput | EventTemplateWhereInput[]
    OR?: EventTemplateWhereInput[]
    NOT?: EventTemplateWhereInput | EventTemplateWhereInput[]
    title?: StringFilter<"EventTemplate"> | string
    description?: StringFilter<"EventTemplate"> | string
    type?: StringFilter<"EventTemplate"> | string
    icon_url?: StringFilter<"EventTemplate"> | string
    rarity?: IntFilter<"EventTemplate"> | number
    relationship?: StringNullableFilter<"EventTemplate"> | string | null
    compare?: StringNullableFilter<"EventTemplate"> | string | null
    exclude_from_random?: BoolNullableFilter<"EventTemplate"> | boolean | null
    results?: JsonFilter<"EventTemplate">
    campaign_id?: StringNullableFilter<"EventTemplate"> | string | null
    node_references?: StringNullableFilter<"EventTemplate"> | string | null
    campaign?: XOR<CampaignNullableScalarRelationFilter, CampaignWhereInput> | null
  }, "event_template_id">

  export type EventTemplateOrderByWithAggregationInput = {
    event_template_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    icon_url?: SortOrder
    rarity?: SortOrder
    relationship?: SortOrderInput | SortOrder
    compare?: SortOrderInput | SortOrder
    exclude_from_random?: SortOrderInput | SortOrder
    results?: SortOrder
    campaign_id?: SortOrderInput | SortOrder
    node_references?: SortOrderInput | SortOrder
    _count?: EventTemplateCountOrderByAggregateInput
    _avg?: EventTemplateAvgOrderByAggregateInput
    _max?: EventTemplateMaxOrderByAggregateInput
    _min?: EventTemplateMinOrderByAggregateInput
    _sum?: EventTemplateSumOrderByAggregateInput
  }

  export type EventTemplateScalarWhereWithAggregatesInput = {
    AND?: EventTemplateScalarWhereWithAggregatesInput | EventTemplateScalarWhereWithAggregatesInput[]
    OR?: EventTemplateScalarWhereWithAggregatesInput[]
    NOT?: EventTemplateScalarWhereWithAggregatesInput | EventTemplateScalarWhereWithAggregatesInput[]
    event_template_id?: StringWithAggregatesFilter<"EventTemplate"> | string
    title?: StringWithAggregatesFilter<"EventTemplate"> | string
    description?: StringWithAggregatesFilter<"EventTemplate"> | string
    type?: StringWithAggregatesFilter<"EventTemplate"> | string
    icon_url?: StringWithAggregatesFilter<"EventTemplate"> | string
    rarity?: IntWithAggregatesFilter<"EventTemplate"> | number
    relationship?: StringNullableWithAggregatesFilter<"EventTemplate"> | string | null
    compare?: StringNullableWithAggregatesFilter<"EventTemplate"> | string | null
    exclude_from_random?: BoolNullableWithAggregatesFilter<"EventTemplate"> | boolean | null
    results?: JsonWithAggregatesFilter<"EventTemplate">
    campaign_id?: StringNullableWithAggregatesFilter<"EventTemplate"> | string | null
    node_references?: StringNullableWithAggregatesFilter<"EventTemplate"> | string | null
  }

  export type EventWhereInput = {
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    event_id?: StringFilter<"Event"> | string
    name?: StringFilter<"Event"> | string
    description?: StringNullableFilter<"Event"> | string | null
    type?: StringNullableFilter<"Event"> | string | null
    rarity?: IntFilter<"Event"> | number
    created_on?: DateTimeFilter<"Event"> | Date | string
    updated_on?: DateTimeFilter<"Event"> | Date | string
    nodes?: NodeListRelationFilter
  }

  export type EventOrderByWithRelationInput = {
    event_id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    rarity?: SortOrder
    created_on?: SortOrder
    updated_on?: SortOrder
    nodes?: NodeOrderByRelationAggregateInput
    _relevance?: EventOrderByRelevanceInput
  }

  export type EventWhereUniqueInput = Prisma.AtLeast<{
    event_id?: string
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    name?: StringFilter<"Event"> | string
    description?: StringNullableFilter<"Event"> | string | null
    type?: StringNullableFilter<"Event"> | string | null
    rarity?: IntFilter<"Event"> | number
    created_on?: DateTimeFilter<"Event"> | Date | string
    updated_on?: DateTimeFilter<"Event"> | Date | string
    nodes?: NodeListRelationFilter
  }, "event_id">

  export type EventOrderByWithAggregationInput = {
    event_id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    rarity?: SortOrder
    created_on?: SortOrder
    updated_on?: SortOrder
    _count?: EventCountOrderByAggregateInput
    _avg?: EventAvgOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
    _sum?: EventSumOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    OR?: EventScalarWhereWithAggregatesInput[]
    NOT?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    event_id?: StringWithAggregatesFilter<"Event"> | string
    name?: StringWithAggregatesFilter<"Event"> | string
    description?: StringNullableWithAggregatesFilter<"Event"> | string | null
    type?: StringNullableWithAggregatesFilter<"Event"> | string | null
    rarity?: IntWithAggregatesFilter<"Event"> | number
    created_on?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    updated_on?: DateTimeWithAggregatesFilter<"Event"> | Date | string
  }

  export type StaticMapWhereInput = {
    AND?: StaticMapWhereInput | StaticMapWhereInput[]
    OR?: StaticMapWhereInput[]
    NOT?: StaticMapWhereInput | StaticMapWhereInput[]
    map_id?: StringFilter<"StaticMap"> | string
    name?: StringFilter<"StaticMap"> | string
    image_url?: StringFilter<"StaticMap"> | string
    created_on?: DateTimeFilter<"StaticMap"> | Date | string
    updated_on?: DateTimeFilter<"StaticMap"> | Date | string
    campaign_id?: StringNullableFilter<"StaticMap"> | string | null
    campaign?: XOR<CampaignNullableScalarRelationFilter, CampaignWhereInput> | null
    map_nodes?: MapNodeListRelationFilter
  }

  export type StaticMapOrderByWithRelationInput = {
    map_id?: SortOrder
    name?: SortOrder
    image_url?: SortOrder
    created_on?: SortOrder
    updated_on?: SortOrder
    campaign_id?: SortOrderInput | SortOrder
    campaign?: CampaignOrderByWithRelationInput
    map_nodes?: MapNodeOrderByRelationAggregateInput
    _relevance?: StaticMapOrderByRelevanceInput
  }

  export type StaticMapWhereUniqueInput = Prisma.AtLeast<{
    map_id?: string
    AND?: StaticMapWhereInput | StaticMapWhereInput[]
    OR?: StaticMapWhereInput[]
    NOT?: StaticMapWhereInput | StaticMapWhereInput[]
    name?: StringFilter<"StaticMap"> | string
    image_url?: StringFilter<"StaticMap"> | string
    created_on?: DateTimeFilter<"StaticMap"> | Date | string
    updated_on?: DateTimeFilter<"StaticMap"> | Date | string
    campaign_id?: StringNullableFilter<"StaticMap"> | string | null
    campaign?: XOR<CampaignNullableScalarRelationFilter, CampaignWhereInput> | null
    map_nodes?: MapNodeListRelationFilter
  }, "map_id">

  export type StaticMapOrderByWithAggregationInput = {
    map_id?: SortOrder
    name?: SortOrder
    image_url?: SortOrder
    created_on?: SortOrder
    updated_on?: SortOrder
    campaign_id?: SortOrderInput | SortOrder
    _count?: StaticMapCountOrderByAggregateInput
    _max?: StaticMapMaxOrderByAggregateInput
    _min?: StaticMapMinOrderByAggregateInput
  }

  export type StaticMapScalarWhereWithAggregatesInput = {
    AND?: StaticMapScalarWhereWithAggregatesInput | StaticMapScalarWhereWithAggregatesInput[]
    OR?: StaticMapScalarWhereWithAggregatesInput[]
    NOT?: StaticMapScalarWhereWithAggregatesInput | StaticMapScalarWhereWithAggregatesInput[]
    map_id?: StringWithAggregatesFilter<"StaticMap"> | string
    name?: StringWithAggregatesFilter<"StaticMap"> | string
    image_url?: StringWithAggregatesFilter<"StaticMap"> | string
    created_on?: DateTimeWithAggregatesFilter<"StaticMap"> | Date | string
    updated_on?: DateTimeWithAggregatesFilter<"StaticMap"> | Date | string
    campaign_id?: StringNullableWithAggregatesFilter<"StaticMap"> | string | null
  }

  export type NodeTypeWhereInput = {
    AND?: NodeTypeWhereInput | NodeTypeWhereInput[]
    OR?: NodeTypeWhereInput[]
    NOT?: NodeTypeWhereInput | NodeTypeWhereInput[]
    node_type_id?: StringFilter<"NodeType"> | string
    name?: StringFilter<"NodeType"> | string
    allowed_attributes?: StringNullableListFilter<"NodeType">
    campaign_id?: StringFilter<"NodeType"> | string
    campaign?: XOR<CampaignScalarRelationFilter, CampaignWhereInput>
    nodes?: NodeListRelationFilter
  }

  export type NodeTypeOrderByWithRelationInput = {
    node_type_id?: SortOrder
    name?: SortOrder
    allowed_attributes?: SortOrder
    campaign_id?: SortOrder
    campaign?: CampaignOrderByWithRelationInput
    nodes?: NodeOrderByRelationAggregateInput
    _relevance?: NodeTypeOrderByRelevanceInput
  }

  export type NodeTypeWhereUniqueInput = Prisma.AtLeast<{
    node_type_id?: string
    AND?: NodeTypeWhereInput | NodeTypeWhereInput[]
    OR?: NodeTypeWhereInput[]
    NOT?: NodeTypeWhereInput | NodeTypeWhereInput[]
    name?: StringFilter<"NodeType"> | string
    allowed_attributes?: StringNullableListFilter<"NodeType">
    campaign_id?: StringFilter<"NodeType"> | string
    campaign?: XOR<CampaignScalarRelationFilter, CampaignWhereInput>
    nodes?: NodeListRelationFilter
  }, "node_type_id">

  export type NodeTypeOrderByWithAggregationInput = {
    node_type_id?: SortOrder
    name?: SortOrder
    allowed_attributes?: SortOrder
    campaign_id?: SortOrder
    _count?: NodeTypeCountOrderByAggregateInput
    _max?: NodeTypeMaxOrderByAggregateInput
    _min?: NodeTypeMinOrderByAggregateInput
  }

  export type NodeTypeScalarWhereWithAggregatesInput = {
    AND?: NodeTypeScalarWhereWithAggregatesInput | NodeTypeScalarWhereWithAggregatesInput[]
    OR?: NodeTypeScalarWhereWithAggregatesInput[]
    NOT?: NodeTypeScalarWhereWithAggregatesInput | NodeTypeScalarWhereWithAggregatesInput[]
    node_type_id?: StringWithAggregatesFilter<"NodeType"> | string
    name?: StringWithAggregatesFilter<"NodeType"> | string
    allowed_attributes?: StringNullableListFilter<"NodeType">
    campaign_id?: StringWithAggregatesFilter<"NodeType"> | string
  }

  export type AttributeWhereInput = {
    AND?: AttributeWhereInput | AttributeWhereInput[]
    OR?: AttributeWhereInput[]
    NOT?: AttributeWhereInput | AttributeWhereInput[]
    attribute_id?: StringFilter<"Attribute"> | string
    title?: StringFilter<"Attribute"> | string
    value?: IntFilter<"Attribute"> | number
    node_id?: StringFilter<"Attribute"> | string
    nodes?: XOR<NodeScalarRelationFilter, NodeWhereInput>
  }

  export type AttributeOrderByWithRelationInput = {
    attribute_id?: SortOrder
    title?: SortOrder
    value?: SortOrder
    node_id?: SortOrder
    nodes?: NodeOrderByWithRelationInput
    _relevance?: AttributeOrderByRelevanceInput
  }

  export type AttributeWhereUniqueInput = Prisma.AtLeast<{
    attribute_id?: string
    AND?: AttributeWhereInput | AttributeWhereInput[]
    OR?: AttributeWhereInput[]
    NOT?: AttributeWhereInput | AttributeWhereInput[]
    title?: StringFilter<"Attribute"> | string
    value?: IntFilter<"Attribute"> | number
    node_id?: StringFilter<"Attribute"> | string
    nodes?: XOR<NodeScalarRelationFilter, NodeWhereInput>
  }, "attribute_id">

  export type AttributeOrderByWithAggregationInput = {
    attribute_id?: SortOrder
    title?: SortOrder
    value?: SortOrder
    node_id?: SortOrder
    _count?: AttributeCountOrderByAggregateInput
    _avg?: AttributeAvgOrderByAggregateInput
    _max?: AttributeMaxOrderByAggregateInput
    _min?: AttributeMinOrderByAggregateInput
    _sum?: AttributeSumOrderByAggregateInput
  }

  export type AttributeScalarWhereWithAggregatesInput = {
    AND?: AttributeScalarWhereWithAggregatesInput | AttributeScalarWhereWithAggregatesInput[]
    OR?: AttributeScalarWhereWithAggregatesInput[]
    NOT?: AttributeScalarWhereWithAggregatesInput | AttributeScalarWhereWithAggregatesInput[]
    attribute_id?: StringWithAggregatesFilter<"Attribute"> | string
    title?: StringWithAggregatesFilter<"Attribute"> | string
    value?: IntWithAggregatesFilter<"Attribute"> | number
    node_id?: StringWithAggregatesFilter<"Attribute"> | string
  }

  export type NodeWhereInput = {
    AND?: NodeWhereInput | NodeWhereInput[]
    OR?: NodeWhereInput[]
    NOT?: NodeWhereInput | NodeWhereInput[]
    node_id?: StringFilter<"Node"> | string
    name?: StringFilter<"Node"> | string
    description?: StringNullableFilter<"Node"> | string | null
    long_description?: StringNullableFilter<"Node"> | string | null
    image_url?: StringNullableFilter<"Node"> | string | null
    created_on?: DateTimeFilter<"Node"> | Date | string
    updated_on?: DateTimeFilter<"Node"> | Date | string
    base_culture?: StringNullableFilter<"Node"> | string | null
    profession?: StringNullableFilter<"Node"> | string | null
    given_name_style?: StringNullableFilter<"Node"> | string | null
    family_name_style?: StringNullableFilter<"Node"> | string | null
    name_shape?: StringNullableFilter<"Node"> | string | null
    campaign_id?: StringNullableFilter<"Node"> | string | null
    node_type_id?: StringNullableFilter<"Node"> | string | null
    exclude_from_events?: BoolNullableFilter<"Node"> | boolean | null
    attributes?: AttributeListRelationFilter
    events?: EventListRelationFilter
    campaign?: XOR<CampaignNullableScalarRelationFilter, CampaignWhereInput> | null
    outgoing_relations?: NodeRelationshipListRelationFilter
    incoming_relations?: NodeRelationshipListRelationFilter
    node_type?: XOR<NodeTypeNullableScalarRelationFilter, NodeTypeWhereInput> | null
    map_node?: MapNodeListRelationFilter
  }

  export type NodeOrderByWithRelationInput = {
    node_id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    long_description?: SortOrderInput | SortOrder
    image_url?: SortOrderInput | SortOrder
    created_on?: SortOrder
    updated_on?: SortOrder
    base_culture?: SortOrderInput | SortOrder
    profession?: SortOrderInput | SortOrder
    given_name_style?: SortOrderInput | SortOrder
    family_name_style?: SortOrderInput | SortOrder
    name_shape?: SortOrderInput | SortOrder
    campaign_id?: SortOrderInput | SortOrder
    node_type_id?: SortOrderInput | SortOrder
    exclude_from_events?: SortOrderInput | SortOrder
    attributes?: AttributeOrderByRelationAggregateInput
    events?: EventOrderByRelationAggregateInput
    campaign?: CampaignOrderByWithRelationInput
    outgoing_relations?: NodeRelationshipOrderByRelationAggregateInput
    incoming_relations?: NodeRelationshipOrderByRelationAggregateInput
    node_type?: NodeTypeOrderByWithRelationInput
    map_node?: MapNodeOrderByRelationAggregateInput
    _relevance?: NodeOrderByRelevanceInput
  }

  export type NodeWhereUniqueInput = Prisma.AtLeast<{
    node_id?: string
    AND?: NodeWhereInput | NodeWhereInput[]
    OR?: NodeWhereInput[]
    NOT?: NodeWhereInput | NodeWhereInput[]
    name?: StringFilter<"Node"> | string
    description?: StringNullableFilter<"Node"> | string | null
    long_description?: StringNullableFilter<"Node"> | string | null
    image_url?: StringNullableFilter<"Node"> | string | null
    created_on?: DateTimeFilter<"Node"> | Date | string
    updated_on?: DateTimeFilter<"Node"> | Date | string
    base_culture?: StringNullableFilter<"Node"> | string | null
    profession?: StringNullableFilter<"Node"> | string | null
    given_name_style?: StringNullableFilter<"Node"> | string | null
    family_name_style?: StringNullableFilter<"Node"> | string | null
    name_shape?: StringNullableFilter<"Node"> | string | null
    campaign_id?: StringNullableFilter<"Node"> | string | null
    node_type_id?: StringNullableFilter<"Node"> | string | null
    exclude_from_events?: BoolNullableFilter<"Node"> | boolean | null
    attributes?: AttributeListRelationFilter
    events?: EventListRelationFilter
    campaign?: XOR<CampaignNullableScalarRelationFilter, CampaignWhereInput> | null
    outgoing_relations?: NodeRelationshipListRelationFilter
    incoming_relations?: NodeRelationshipListRelationFilter
    node_type?: XOR<NodeTypeNullableScalarRelationFilter, NodeTypeWhereInput> | null
    map_node?: MapNodeListRelationFilter
  }, "node_id">

  export type NodeOrderByWithAggregationInput = {
    node_id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    long_description?: SortOrderInput | SortOrder
    image_url?: SortOrderInput | SortOrder
    created_on?: SortOrder
    updated_on?: SortOrder
    base_culture?: SortOrderInput | SortOrder
    profession?: SortOrderInput | SortOrder
    given_name_style?: SortOrderInput | SortOrder
    family_name_style?: SortOrderInput | SortOrder
    name_shape?: SortOrderInput | SortOrder
    campaign_id?: SortOrderInput | SortOrder
    node_type_id?: SortOrderInput | SortOrder
    exclude_from_events?: SortOrderInput | SortOrder
    _count?: NodeCountOrderByAggregateInput
    _max?: NodeMaxOrderByAggregateInput
    _min?: NodeMinOrderByAggregateInput
  }

  export type NodeScalarWhereWithAggregatesInput = {
    AND?: NodeScalarWhereWithAggregatesInput | NodeScalarWhereWithAggregatesInput[]
    OR?: NodeScalarWhereWithAggregatesInput[]
    NOT?: NodeScalarWhereWithAggregatesInput | NodeScalarWhereWithAggregatesInput[]
    node_id?: StringWithAggregatesFilter<"Node"> | string
    name?: StringWithAggregatesFilter<"Node"> | string
    description?: StringNullableWithAggregatesFilter<"Node"> | string | null
    long_description?: StringNullableWithAggregatesFilter<"Node"> | string | null
    image_url?: StringNullableWithAggregatesFilter<"Node"> | string | null
    created_on?: DateTimeWithAggregatesFilter<"Node"> | Date | string
    updated_on?: DateTimeWithAggregatesFilter<"Node"> | Date | string
    base_culture?: StringNullableWithAggregatesFilter<"Node"> | string | null
    profession?: StringNullableWithAggregatesFilter<"Node"> | string | null
    given_name_style?: StringNullableWithAggregatesFilter<"Node"> | string | null
    family_name_style?: StringNullableWithAggregatesFilter<"Node"> | string | null
    name_shape?: StringNullableWithAggregatesFilter<"Node"> | string | null
    campaign_id?: StringNullableWithAggregatesFilter<"Node"> | string | null
    node_type_id?: StringNullableWithAggregatesFilter<"Node"> | string | null
    exclude_from_events?: BoolNullableWithAggregatesFilter<"Node"> | boolean | null
  }

  export type MapNodeWhereInput = {
    AND?: MapNodeWhereInput | MapNodeWhereInput[]
    OR?: MapNodeWhereInput[]
    NOT?: MapNodeWhereInput | MapNodeWhereInput[]
    map_node_id?: StringFilter<"MapNode"> | string
    coordinates?: IntNullableListFilter<"MapNode">
    moveable?: BoolNullableFilter<"MapNode"> | boolean | null
    title?: StringNullableFilter<"MapNode"> | string | null
    description?: StringNullableFilter<"MapNode"> | string | null
    icon_url?: StringNullableFilter<"MapNode"> | string | null
    icon?: StringNullableFilter<"MapNode"> | string | null
    created_on?: DateTimeFilter<"MapNode"> | Date | string
    updated_on?: DateTimeFilter<"MapNode"> | Date | string
    map_id?: StringFilter<"MapNode"> | string
    node_id?: StringNullableFilter<"MapNode"> | string | null
    map?: XOR<StaticMapScalarRelationFilter, StaticMapWhereInput>
    node?: XOR<NodeNullableScalarRelationFilter, NodeWhereInput> | null
  }

  export type MapNodeOrderByWithRelationInput = {
    map_node_id?: SortOrder
    coordinates?: SortOrder
    moveable?: SortOrderInput | SortOrder
    title?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    icon_url?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    created_on?: SortOrder
    updated_on?: SortOrder
    map_id?: SortOrder
    node_id?: SortOrderInput | SortOrder
    map?: StaticMapOrderByWithRelationInput
    node?: NodeOrderByWithRelationInput
    _relevance?: MapNodeOrderByRelevanceInput
  }

  export type MapNodeWhereUniqueInput = Prisma.AtLeast<{
    map_node_id?: string
    AND?: MapNodeWhereInput | MapNodeWhereInput[]
    OR?: MapNodeWhereInput[]
    NOT?: MapNodeWhereInput | MapNodeWhereInput[]
    coordinates?: IntNullableListFilter<"MapNode">
    moveable?: BoolNullableFilter<"MapNode"> | boolean | null
    title?: StringNullableFilter<"MapNode"> | string | null
    description?: StringNullableFilter<"MapNode"> | string | null
    icon_url?: StringNullableFilter<"MapNode"> | string | null
    icon?: StringNullableFilter<"MapNode"> | string | null
    created_on?: DateTimeFilter<"MapNode"> | Date | string
    updated_on?: DateTimeFilter<"MapNode"> | Date | string
    map_id?: StringFilter<"MapNode"> | string
    node_id?: StringNullableFilter<"MapNode"> | string | null
    map?: XOR<StaticMapScalarRelationFilter, StaticMapWhereInput>
    node?: XOR<NodeNullableScalarRelationFilter, NodeWhereInput> | null
  }, "map_node_id">

  export type MapNodeOrderByWithAggregationInput = {
    map_node_id?: SortOrder
    coordinates?: SortOrder
    moveable?: SortOrderInput | SortOrder
    title?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    icon_url?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    created_on?: SortOrder
    updated_on?: SortOrder
    map_id?: SortOrder
    node_id?: SortOrderInput | SortOrder
    _count?: MapNodeCountOrderByAggregateInput
    _avg?: MapNodeAvgOrderByAggregateInput
    _max?: MapNodeMaxOrderByAggregateInput
    _min?: MapNodeMinOrderByAggregateInput
    _sum?: MapNodeSumOrderByAggregateInput
  }

  export type MapNodeScalarWhereWithAggregatesInput = {
    AND?: MapNodeScalarWhereWithAggregatesInput | MapNodeScalarWhereWithAggregatesInput[]
    OR?: MapNodeScalarWhereWithAggregatesInput[]
    NOT?: MapNodeScalarWhereWithAggregatesInput | MapNodeScalarWhereWithAggregatesInput[]
    map_node_id?: StringWithAggregatesFilter<"MapNode"> | string
    coordinates?: IntNullableListFilter<"MapNode">
    moveable?: BoolNullableWithAggregatesFilter<"MapNode"> | boolean | null
    title?: StringNullableWithAggregatesFilter<"MapNode"> | string | null
    description?: StringNullableWithAggregatesFilter<"MapNode"> | string | null
    icon_url?: StringNullableWithAggregatesFilter<"MapNode"> | string | null
    icon?: StringNullableWithAggregatesFilter<"MapNode"> | string | null
    created_on?: DateTimeWithAggregatesFilter<"MapNode"> | Date | string
    updated_on?: DateTimeWithAggregatesFilter<"MapNode"> | Date | string
    map_id?: StringWithAggregatesFilter<"MapNode"> | string
    node_id?: StringNullableWithAggregatesFilter<"MapNode"> | string | null
  }

  export type NodeRelationshipWhereInput = {
    AND?: NodeRelationshipWhereInput | NodeRelationshipWhereInput[]
    OR?: NodeRelationshipWhereInput[]
    NOT?: NodeRelationshipWhereInput | NodeRelationshipWhereInput[]
    node_relationship_id?: StringFilter<"NodeRelationship"> | string
    self_id?: StringFilter<"NodeRelationship"> | string
    relation_title?: StringFilter<"NodeRelationship"> | string
    target_id?: StringFilter<"NodeRelationship"> | string
    relationship_score?: IntFilter<"NodeRelationship"> | number
    is_in_range?: BoolNullableFilter<"NodeRelationship"> | boolean | null
    updated_on?: DateTimeFilter<"NodeRelationship"> | Date | string
    outgoing_relations?: XOR<NodeScalarRelationFilter, NodeWhereInput>
    incoming_relations?: XOR<NodeScalarRelationFilter, NodeWhereInput>
  }

  export type NodeRelationshipOrderByWithRelationInput = {
    node_relationship_id?: SortOrder
    self_id?: SortOrder
    relation_title?: SortOrder
    target_id?: SortOrder
    relationship_score?: SortOrder
    is_in_range?: SortOrderInput | SortOrder
    updated_on?: SortOrder
    outgoing_relations?: NodeOrderByWithRelationInput
    incoming_relations?: NodeOrderByWithRelationInput
    _relevance?: NodeRelationshipOrderByRelevanceInput
  }

  export type NodeRelationshipWhereUniqueInput = Prisma.AtLeast<{
    node_relationship_id?: string
    self_id_target_id?: NodeRelationshipSelf_idTarget_idCompoundUniqueInput
    AND?: NodeRelationshipWhereInput | NodeRelationshipWhereInput[]
    OR?: NodeRelationshipWhereInput[]
    NOT?: NodeRelationshipWhereInput | NodeRelationshipWhereInput[]
    self_id?: StringFilter<"NodeRelationship"> | string
    relation_title?: StringFilter<"NodeRelationship"> | string
    target_id?: StringFilter<"NodeRelationship"> | string
    relationship_score?: IntFilter<"NodeRelationship"> | number
    is_in_range?: BoolNullableFilter<"NodeRelationship"> | boolean | null
    updated_on?: DateTimeFilter<"NodeRelationship"> | Date | string
    outgoing_relations?: XOR<NodeScalarRelationFilter, NodeWhereInput>
    incoming_relations?: XOR<NodeScalarRelationFilter, NodeWhereInput>
  }, "node_relationship_id" | "self_id_target_id">

  export type NodeRelationshipOrderByWithAggregationInput = {
    node_relationship_id?: SortOrder
    self_id?: SortOrder
    relation_title?: SortOrder
    target_id?: SortOrder
    relationship_score?: SortOrder
    is_in_range?: SortOrderInput | SortOrder
    updated_on?: SortOrder
    _count?: NodeRelationshipCountOrderByAggregateInput
    _avg?: NodeRelationshipAvgOrderByAggregateInput
    _max?: NodeRelationshipMaxOrderByAggregateInput
    _min?: NodeRelationshipMinOrderByAggregateInput
    _sum?: NodeRelationshipSumOrderByAggregateInput
  }

  export type NodeRelationshipScalarWhereWithAggregatesInput = {
    AND?: NodeRelationshipScalarWhereWithAggregatesInput | NodeRelationshipScalarWhereWithAggregatesInput[]
    OR?: NodeRelationshipScalarWhereWithAggregatesInput[]
    NOT?: NodeRelationshipScalarWhereWithAggregatesInput | NodeRelationshipScalarWhereWithAggregatesInput[]
    node_relationship_id?: StringWithAggregatesFilter<"NodeRelationship"> | string
    self_id?: StringWithAggregatesFilter<"NodeRelationship"> | string
    relation_title?: StringWithAggregatesFilter<"NodeRelationship"> | string
    target_id?: StringWithAggregatesFilter<"NodeRelationship"> | string
    relationship_score?: IntWithAggregatesFilter<"NodeRelationship"> | number
    is_in_range?: BoolNullableWithAggregatesFilter<"NodeRelationship"> | boolean | null
    updated_on?: DateTimeWithAggregatesFilter<"NodeRelationship"> | Date | string
  }

  export type SessionRecapWhereInput = {
    AND?: SessionRecapWhereInput | SessionRecapWhereInput[]
    OR?: SessionRecapWhereInput[]
    NOT?: SessionRecapWhereInput | SessionRecapWhereInput[]
    session_recap_id?: StringFilter<"SessionRecap"> | string
    title?: StringFilter<"SessionRecap"> | string
    description?: StringNullableFilter<"SessionRecap"> | string | null
    play_date?: DateTimeFilter<"SessionRecap"> | Date | string
    created_on?: DateTimeFilter<"SessionRecap"> | Date | string
    updated_on?: DateTimeFilter<"SessionRecap"> | Date | string
    campaign_id?: StringNullableFilter<"SessionRecap"> | string | null
    published_on?: DateTimeNullableFilter<"SessionRecap"> | Date | string | null
    campaign?: XOR<CampaignNullableScalarRelationFilter, CampaignWhereInput> | null
  }

  export type SessionRecapOrderByWithRelationInput = {
    session_recap_id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    play_date?: SortOrder
    created_on?: SortOrder
    updated_on?: SortOrder
    campaign_id?: SortOrderInput | SortOrder
    published_on?: SortOrderInput | SortOrder
    campaign?: CampaignOrderByWithRelationInput
    _relevance?: SessionRecapOrderByRelevanceInput
  }

  export type SessionRecapWhereUniqueInput = Prisma.AtLeast<{
    session_recap_id?: string
    AND?: SessionRecapWhereInput | SessionRecapWhereInput[]
    OR?: SessionRecapWhereInput[]
    NOT?: SessionRecapWhereInput | SessionRecapWhereInput[]
    title?: StringFilter<"SessionRecap"> | string
    description?: StringNullableFilter<"SessionRecap"> | string | null
    play_date?: DateTimeFilter<"SessionRecap"> | Date | string
    created_on?: DateTimeFilter<"SessionRecap"> | Date | string
    updated_on?: DateTimeFilter<"SessionRecap"> | Date | string
    campaign_id?: StringNullableFilter<"SessionRecap"> | string | null
    published_on?: DateTimeNullableFilter<"SessionRecap"> | Date | string | null
    campaign?: XOR<CampaignNullableScalarRelationFilter, CampaignWhereInput> | null
  }, "session_recap_id">

  export type SessionRecapOrderByWithAggregationInput = {
    session_recap_id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    play_date?: SortOrder
    created_on?: SortOrder
    updated_on?: SortOrder
    campaign_id?: SortOrderInput | SortOrder
    published_on?: SortOrderInput | SortOrder
    _count?: SessionRecapCountOrderByAggregateInput
    _max?: SessionRecapMaxOrderByAggregateInput
    _min?: SessionRecapMinOrderByAggregateInput
  }

  export type SessionRecapScalarWhereWithAggregatesInput = {
    AND?: SessionRecapScalarWhereWithAggregatesInput | SessionRecapScalarWhereWithAggregatesInput[]
    OR?: SessionRecapScalarWhereWithAggregatesInput[]
    NOT?: SessionRecapScalarWhereWithAggregatesInput | SessionRecapScalarWhereWithAggregatesInput[]
    session_recap_id?: StringWithAggregatesFilter<"SessionRecap"> | string
    title?: StringWithAggregatesFilter<"SessionRecap"> | string
    description?: StringNullableWithAggregatesFilter<"SessionRecap"> | string | null
    play_date?: DateTimeWithAggregatesFilter<"SessionRecap"> | Date | string
    created_on?: DateTimeWithAggregatesFilter<"SessionRecap"> | Date | string
    updated_on?: DateTimeWithAggregatesFilter<"SessionRecap"> | Date | string
    campaign_id?: StringNullableWithAggregatesFilter<"SessionRecap"> | string | null
    published_on?: DateTimeNullableWithAggregatesFilter<"SessionRecap"> | Date | string | null
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    updated_on?: Date | string | null
    role?: string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    campaigns?: CampaignCreateNestedManyWithoutUsersInput
    user_campaigns?: UserCampaignCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    updated_on?: Date | string | null
    role?: string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    campaigns?: CampaignUncheckedCreateNestedManyWithoutUsersInput
    user_campaigns?: UserCampaignUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    updated_on?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: StringFieldUpdateOperationsInput | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    campaigns?: CampaignUpdateManyWithoutUsersNestedInput
    user_campaigns?: UserCampaignUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    updated_on?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: StringFieldUpdateOperationsInput | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    campaigns?: CampaignUncheckedUpdateManyWithoutUsersNestedInput
    user_campaigns?: UserCampaignUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    updated_on?: Date | string | null
    role?: string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    updated_on?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    updated_on?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: StringFieldUpdateOperationsInput | string
  }

  export type VerificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventPublishProviderCreateInput = {
    id?: string
    provider: string
    url: string
    campaign?: CampaignCreateNestedOneWithoutEvent_publish_providerInput
  }

  export type EventPublishProviderUncheckedCreateInput = {
    id?: string
    provider: string
    url: string
    campaign_id: string
  }

  export type EventPublishProviderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    campaign?: CampaignUpdateOneWithoutEvent_publish_providerNestedInput
  }

  export type EventPublishProviderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    campaign_id?: StringFieldUpdateOperationsInput | string
  }

  export type EventPublishProviderCreateManyInput = {
    id?: string
    provider: string
    url: string
    campaign_id: string
  }

  export type EventPublishProviderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type EventPublishProviderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    campaign_id?: StringFieldUpdateOperationsInput | string
  }

  export type CampaignCreateInput = {
    campaign_id?: string
    title: string
    description: string
    image?: string | null
    header_image?: string | null
    allow_ai_events?: boolean
    overview_map_id?: string | null
    created_on?: Date | string
    node_types?: NodeTypeCreateNestedManyWithoutCampaignInput
    users?: UserCreateNestedManyWithoutCampaignsInput
    static_maps?: StaticMapCreateNestedManyWithoutCampaignInput
    session_recaps?: SessionRecapCreateNestedManyWithoutCampaignInput
    nodes?: NodeCreateNestedManyWithoutCampaignInput
    event_templates?: EventTemplateCreateNestedManyWithoutCampaignInput
    event_publish_provider?: EventPublishProviderCreateNestedManyWithoutCampaignInput
    user_campaigns?: UserCampaignCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUncheckedCreateInput = {
    campaign_id?: string
    title: string
    description: string
    image?: string | null
    header_image?: string | null
    allow_ai_events?: boolean
    overview_map_id?: string | null
    created_on?: Date | string
    node_types?: NodeTypeUncheckedCreateNestedManyWithoutCampaignInput
    users?: UserUncheckedCreateNestedManyWithoutCampaignsInput
    static_maps?: StaticMapUncheckedCreateNestedManyWithoutCampaignInput
    session_recaps?: SessionRecapUncheckedCreateNestedManyWithoutCampaignInput
    nodes?: NodeUncheckedCreateNestedManyWithoutCampaignInput
    event_templates?: EventTemplateUncheckedCreateNestedManyWithoutCampaignInput
    event_publish_provider?: EventPublishProviderUncheckedCreateNestedManyWithoutCampaignInput
    user_campaigns?: UserCampaignUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUpdateInput = {
    campaign_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    header_image?: NullableStringFieldUpdateOperationsInput | string | null
    allow_ai_events?: BoolFieldUpdateOperationsInput | boolean
    overview_map_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    node_types?: NodeTypeUpdateManyWithoutCampaignNestedInput
    users?: UserUpdateManyWithoutCampaignsNestedInput
    static_maps?: StaticMapUpdateManyWithoutCampaignNestedInput
    session_recaps?: SessionRecapUpdateManyWithoutCampaignNestedInput
    nodes?: NodeUpdateManyWithoutCampaignNestedInput
    event_templates?: EventTemplateUpdateManyWithoutCampaignNestedInput
    event_publish_provider?: EventPublishProviderUpdateManyWithoutCampaignNestedInput
    user_campaigns?: UserCampaignUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateInput = {
    campaign_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    header_image?: NullableStringFieldUpdateOperationsInput | string | null
    allow_ai_events?: BoolFieldUpdateOperationsInput | boolean
    overview_map_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    node_types?: NodeTypeUncheckedUpdateManyWithoutCampaignNestedInput
    users?: UserUncheckedUpdateManyWithoutCampaignsNestedInput
    static_maps?: StaticMapUncheckedUpdateManyWithoutCampaignNestedInput
    session_recaps?: SessionRecapUncheckedUpdateManyWithoutCampaignNestedInput
    nodes?: NodeUncheckedUpdateManyWithoutCampaignNestedInput
    event_templates?: EventTemplateUncheckedUpdateManyWithoutCampaignNestedInput
    event_publish_provider?: EventPublishProviderUncheckedUpdateManyWithoutCampaignNestedInput
    user_campaigns?: UserCampaignUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignCreateManyInput = {
    campaign_id?: string
    title: string
    description: string
    image?: string | null
    header_image?: string | null
    allow_ai_events?: boolean
    overview_map_id?: string | null
    created_on?: Date | string
  }

  export type CampaignUpdateManyMutationInput = {
    campaign_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    header_image?: NullableStringFieldUpdateOperationsInput | string | null
    allow_ai_events?: BoolFieldUpdateOperationsInput | boolean
    overview_map_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CampaignUncheckedUpdateManyInput = {
    campaign_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    header_image?: NullableStringFieldUpdateOperationsInput | string | null
    allow_ai_events?: BoolFieldUpdateOperationsInput | boolean
    overview_map_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCampaignCreateInput = {
    user_campaign_id?: string
    created_on?: Date | string
    updated_on?: Date | string
    last_visited_on?: Date | string
    user: UserCreateNestedOneWithoutUser_campaignsInput
    campaign: CampaignCreateNestedOneWithoutUser_campaignsInput
  }

  export type UserCampaignUncheckedCreateInput = {
    user_campaign_id?: string
    user_id: string
    campaign_id: string
    created_on?: Date | string
    updated_on?: Date | string
    last_visited_on?: Date | string
  }

  export type UserCampaignUpdateInput = {
    user_campaign_id?: StringFieldUpdateOperationsInput | string
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    last_visited_on?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUser_campaignsNestedInput
    campaign?: CampaignUpdateOneRequiredWithoutUser_campaignsNestedInput
  }

  export type UserCampaignUncheckedUpdateInput = {
    user_campaign_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    campaign_id?: StringFieldUpdateOperationsInput | string
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    last_visited_on?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCampaignCreateManyInput = {
    user_campaign_id?: string
    user_id: string
    campaign_id: string
    created_on?: Date | string
    updated_on?: Date | string
    last_visited_on?: Date | string
  }

  export type UserCampaignUpdateManyMutationInput = {
    user_campaign_id?: StringFieldUpdateOperationsInput | string
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    last_visited_on?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCampaignUncheckedUpdateManyInput = {
    user_campaign_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    campaign_id?: StringFieldUpdateOperationsInput | string
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    last_visited_on?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventTemplateCreateInput = {
    event_template_id?: string
    title: string
    description: string
    type: string
    icon_url: string
    rarity?: number
    relationship?: string | null
    compare?: string | null
    exclude_from_random?: boolean | null
    results: JsonNullValueInput | InputJsonValue
    node_references?: string | null
    campaign?: CampaignCreateNestedOneWithoutEvent_templatesInput
  }

  export type EventTemplateUncheckedCreateInput = {
    event_template_id?: string
    title: string
    description: string
    type: string
    icon_url: string
    rarity?: number
    relationship?: string | null
    compare?: string | null
    exclude_from_random?: boolean | null
    results: JsonNullValueInput | InputJsonValue
    campaign_id?: string | null
    node_references?: string | null
  }

  export type EventTemplateUpdateInput = {
    event_template_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    icon_url?: StringFieldUpdateOperationsInput | string
    rarity?: IntFieldUpdateOperationsInput | number
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    compare?: NullableStringFieldUpdateOperationsInput | string | null
    exclude_from_random?: NullableBoolFieldUpdateOperationsInput | boolean | null
    results?: JsonNullValueInput | InputJsonValue
    node_references?: NullableStringFieldUpdateOperationsInput | string | null
    campaign?: CampaignUpdateOneWithoutEvent_templatesNestedInput
  }

  export type EventTemplateUncheckedUpdateInput = {
    event_template_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    icon_url?: StringFieldUpdateOperationsInput | string
    rarity?: IntFieldUpdateOperationsInput | number
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    compare?: NullableStringFieldUpdateOperationsInput | string | null
    exclude_from_random?: NullableBoolFieldUpdateOperationsInput | boolean | null
    results?: JsonNullValueInput | InputJsonValue
    campaign_id?: NullableStringFieldUpdateOperationsInput | string | null
    node_references?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventTemplateCreateManyInput = {
    event_template_id?: string
    title: string
    description: string
    type: string
    icon_url: string
    rarity?: number
    relationship?: string | null
    compare?: string | null
    exclude_from_random?: boolean | null
    results: JsonNullValueInput | InputJsonValue
    campaign_id?: string | null
    node_references?: string | null
  }

  export type EventTemplateUpdateManyMutationInput = {
    event_template_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    icon_url?: StringFieldUpdateOperationsInput | string
    rarity?: IntFieldUpdateOperationsInput | number
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    compare?: NullableStringFieldUpdateOperationsInput | string | null
    exclude_from_random?: NullableBoolFieldUpdateOperationsInput | boolean | null
    results?: JsonNullValueInput | InputJsonValue
    node_references?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventTemplateUncheckedUpdateManyInput = {
    event_template_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    icon_url?: StringFieldUpdateOperationsInput | string
    rarity?: IntFieldUpdateOperationsInput | number
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    compare?: NullableStringFieldUpdateOperationsInput | string | null
    exclude_from_random?: NullableBoolFieldUpdateOperationsInput | boolean | null
    results?: JsonNullValueInput | InputJsonValue
    campaign_id?: NullableStringFieldUpdateOperationsInput | string | null
    node_references?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventCreateInput = {
    event_id?: string
    name: string
    description?: string | null
    type?: string | null
    rarity?: number
    created_on?: Date | string
    updated_on?: Date | string
    nodes?: NodeCreateNestedManyWithoutEventsInput
  }

  export type EventUncheckedCreateInput = {
    event_id?: string
    name: string
    description?: string | null
    type?: string | null
    rarity?: number
    created_on?: Date | string
    updated_on?: Date | string
    nodes?: NodeUncheckedCreateNestedManyWithoutEventsInput
  }

  export type EventUpdateInput = {
    event_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    rarity?: IntFieldUpdateOperationsInput | number
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    nodes?: NodeUpdateManyWithoutEventsNestedInput
  }

  export type EventUncheckedUpdateInput = {
    event_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    rarity?: IntFieldUpdateOperationsInput | number
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    nodes?: NodeUncheckedUpdateManyWithoutEventsNestedInput
  }

  export type EventCreateManyInput = {
    event_id?: string
    name: string
    description?: string | null
    type?: string | null
    rarity?: number
    created_on?: Date | string
    updated_on?: Date | string
  }

  export type EventUpdateManyMutationInput = {
    event_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    rarity?: IntFieldUpdateOperationsInput | number
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateManyInput = {
    event_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    rarity?: IntFieldUpdateOperationsInput | number
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaticMapCreateInput = {
    map_id?: string
    name: string
    image_url: string
    created_on?: Date | string
    updated_on?: Date | string
    campaign?: CampaignCreateNestedOneWithoutStatic_mapsInput
    map_nodes?: MapNodeCreateNestedManyWithoutMapInput
  }

  export type StaticMapUncheckedCreateInput = {
    map_id?: string
    name: string
    image_url: string
    created_on?: Date | string
    updated_on?: Date | string
    campaign_id?: string | null
    map_nodes?: MapNodeUncheckedCreateNestedManyWithoutMapInput
  }

  export type StaticMapUpdateInput = {
    map_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign?: CampaignUpdateOneWithoutStatic_mapsNestedInput
    map_nodes?: MapNodeUpdateManyWithoutMapNestedInput
  }

  export type StaticMapUncheckedUpdateInput = {
    map_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign_id?: NullableStringFieldUpdateOperationsInput | string | null
    map_nodes?: MapNodeUncheckedUpdateManyWithoutMapNestedInput
  }

  export type StaticMapCreateManyInput = {
    map_id?: string
    name: string
    image_url: string
    created_on?: Date | string
    updated_on?: Date | string
    campaign_id?: string | null
  }

  export type StaticMapUpdateManyMutationInput = {
    map_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaticMapUncheckedUpdateManyInput = {
    map_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NodeTypeCreateInput = {
    node_type_id?: string
    name: string
    allowed_attributes?: NodeTypeCreateallowed_attributesInput | string[]
    campaign: CampaignCreateNestedOneWithoutNode_typesInput
    nodes?: NodeCreateNestedManyWithoutNode_typeInput
  }

  export type NodeTypeUncheckedCreateInput = {
    node_type_id?: string
    name: string
    allowed_attributes?: NodeTypeCreateallowed_attributesInput | string[]
    campaign_id: string
    nodes?: NodeUncheckedCreateNestedManyWithoutNode_typeInput
  }

  export type NodeTypeUpdateInput = {
    node_type_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    allowed_attributes?: NodeTypeUpdateallowed_attributesInput | string[]
    campaign?: CampaignUpdateOneRequiredWithoutNode_typesNestedInput
    nodes?: NodeUpdateManyWithoutNode_typeNestedInput
  }

  export type NodeTypeUncheckedUpdateInput = {
    node_type_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    allowed_attributes?: NodeTypeUpdateallowed_attributesInput | string[]
    campaign_id?: StringFieldUpdateOperationsInput | string
    nodes?: NodeUncheckedUpdateManyWithoutNode_typeNestedInput
  }

  export type NodeTypeCreateManyInput = {
    node_type_id?: string
    name: string
    allowed_attributes?: NodeTypeCreateallowed_attributesInput | string[]
    campaign_id: string
  }

  export type NodeTypeUpdateManyMutationInput = {
    node_type_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    allowed_attributes?: NodeTypeUpdateallowed_attributesInput | string[]
  }

  export type NodeTypeUncheckedUpdateManyInput = {
    node_type_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    allowed_attributes?: NodeTypeUpdateallowed_attributesInput | string[]
    campaign_id?: StringFieldUpdateOperationsInput | string
  }

  export type AttributeCreateInput = {
    attribute_id?: string
    title: string
    value?: number
    nodes: NodeCreateNestedOneWithoutAttributesInput
  }

  export type AttributeUncheckedCreateInput = {
    attribute_id?: string
    title: string
    value?: number
    node_id: string
  }

  export type AttributeUpdateInput = {
    attribute_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
    nodes?: NodeUpdateOneRequiredWithoutAttributesNestedInput
  }

  export type AttributeUncheckedUpdateInput = {
    attribute_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
    node_id?: StringFieldUpdateOperationsInput | string
  }

  export type AttributeCreateManyInput = {
    attribute_id?: string
    title: string
    value?: number
    node_id: string
  }

  export type AttributeUpdateManyMutationInput = {
    attribute_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
  }

  export type AttributeUncheckedUpdateManyInput = {
    attribute_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
    node_id?: StringFieldUpdateOperationsInput | string
  }

  export type NodeCreateInput = {
    node_id?: string
    name: string
    description?: string | null
    long_description?: string | null
    image_url?: string | null
    created_on?: Date | string
    updated_on?: Date | string
    base_culture?: string | null
    profession?: string | null
    given_name_style?: string | null
    family_name_style?: string | null
    name_shape?: string | null
    exclude_from_events?: boolean | null
    attributes?: AttributeCreateNestedManyWithoutNodesInput
    events?: EventCreateNestedManyWithoutNodesInput
    campaign?: CampaignCreateNestedOneWithoutNodesInput
    outgoing_relations?: NodeRelationshipCreateNestedManyWithoutOutgoing_relationsInput
    incoming_relations?: NodeRelationshipCreateNestedManyWithoutIncoming_relationsInput
    node_type?: NodeTypeCreateNestedOneWithoutNodesInput
    map_node?: MapNodeCreateNestedManyWithoutNodeInput
  }

  export type NodeUncheckedCreateInput = {
    node_id?: string
    name: string
    description?: string | null
    long_description?: string | null
    image_url?: string | null
    created_on?: Date | string
    updated_on?: Date | string
    base_culture?: string | null
    profession?: string | null
    given_name_style?: string | null
    family_name_style?: string | null
    name_shape?: string | null
    campaign_id?: string | null
    node_type_id?: string | null
    exclude_from_events?: boolean | null
    attributes?: AttributeUncheckedCreateNestedManyWithoutNodesInput
    events?: EventUncheckedCreateNestedManyWithoutNodesInput
    outgoing_relations?: NodeRelationshipUncheckedCreateNestedManyWithoutOutgoing_relationsInput
    incoming_relations?: NodeRelationshipUncheckedCreateNestedManyWithoutIncoming_relationsInput
    map_node?: MapNodeUncheckedCreateNestedManyWithoutNodeInput
  }

  export type NodeUpdateInput = {
    node_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    long_description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    base_culture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    given_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    family_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    name_shape?: NullableStringFieldUpdateOperationsInput | string | null
    exclude_from_events?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attributes?: AttributeUpdateManyWithoutNodesNestedInput
    events?: EventUpdateManyWithoutNodesNestedInput
    campaign?: CampaignUpdateOneWithoutNodesNestedInput
    outgoing_relations?: NodeRelationshipUpdateManyWithoutOutgoing_relationsNestedInput
    incoming_relations?: NodeRelationshipUpdateManyWithoutIncoming_relationsNestedInput
    node_type?: NodeTypeUpdateOneWithoutNodesNestedInput
    map_node?: MapNodeUpdateManyWithoutNodeNestedInput
  }

  export type NodeUncheckedUpdateInput = {
    node_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    long_description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    base_culture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    given_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    family_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    name_shape?: NullableStringFieldUpdateOperationsInput | string | null
    campaign_id?: NullableStringFieldUpdateOperationsInput | string | null
    node_type_id?: NullableStringFieldUpdateOperationsInput | string | null
    exclude_from_events?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attributes?: AttributeUncheckedUpdateManyWithoutNodesNestedInput
    events?: EventUncheckedUpdateManyWithoutNodesNestedInput
    outgoing_relations?: NodeRelationshipUncheckedUpdateManyWithoutOutgoing_relationsNestedInput
    incoming_relations?: NodeRelationshipUncheckedUpdateManyWithoutIncoming_relationsNestedInput
    map_node?: MapNodeUncheckedUpdateManyWithoutNodeNestedInput
  }

  export type NodeCreateManyInput = {
    node_id?: string
    name: string
    description?: string | null
    long_description?: string | null
    image_url?: string | null
    created_on?: Date | string
    updated_on?: Date | string
    base_culture?: string | null
    profession?: string | null
    given_name_style?: string | null
    family_name_style?: string | null
    name_shape?: string | null
    campaign_id?: string | null
    node_type_id?: string | null
    exclude_from_events?: boolean | null
  }

  export type NodeUpdateManyMutationInput = {
    node_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    long_description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    base_culture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    given_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    family_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    name_shape?: NullableStringFieldUpdateOperationsInput | string | null
    exclude_from_events?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type NodeUncheckedUpdateManyInput = {
    node_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    long_description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    base_culture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    given_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    family_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    name_shape?: NullableStringFieldUpdateOperationsInput | string | null
    campaign_id?: NullableStringFieldUpdateOperationsInput | string | null
    node_type_id?: NullableStringFieldUpdateOperationsInput | string | null
    exclude_from_events?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type MapNodeCreateInput = {
    map_node_id?: string
    coordinates?: MapNodeCreatecoordinatesInput | number[]
    moveable?: boolean | null
    title?: string | null
    description?: string | null
    icon_url?: string | null
    icon?: string | null
    created_on?: Date | string
    updated_on?: Date | string
    map: StaticMapCreateNestedOneWithoutMap_nodesInput
    node?: NodeCreateNestedOneWithoutMap_nodeInput
  }

  export type MapNodeUncheckedCreateInput = {
    map_node_id?: string
    coordinates?: MapNodeCreatecoordinatesInput | number[]
    moveable?: boolean | null
    title?: string | null
    description?: string | null
    icon_url?: string | null
    icon?: string | null
    created_on?: Date | string
    updated_on?: Date | string
    map_id: string
    node_id?: string | null
  }

  export type MapNodeUpdateInput = {
    map_node_id?: StringFieldUpdateOperationsInput | string
    coordinates?: MapNodeUpdatecoordinatesInput | number[]
    moveable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon_url?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    map?: StaticMapUpdateOneRequiredWithoutMap_nodesNestedInput
    node?: NodeUpdateOneWithoutMap_nodeNestedInput
  }

  export type MapNodeUncheckedUpdateInput = {
    map_node_id?: StringFieldUpdateOperationsInput | string
    coordinates?: MapNodeUpdatecoordinatesInput | number[]
    moveable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon_url?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    map_id?: StringFieldUpdateOperationsInput | string
    node_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MapNodeCreateManyInput = {
    map_node_id?: string
    coordinates?: MapNodeCreatecoordinatesInput | number[]
    moveable?: boolean | null
    title?: string | null
    description?: string | null
    icon_url?: string | null
    icon?: string | null
    created_on?: Date | string
    updated_on?: Date | string
    map_id: string
    node_id?: string | null
  }

  export type MapNodeUpdateManyMutationInput = {
    map_node_id?: StringFieldUpdateOperationsInput | string
    coordinates?: MapNodeUpdatecoordinatesInput | number[]
    moveable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon_url?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MapNodeUncheckedUpdateManyInput = {
    map_node_id?: StringFieldUpdateOperationsInput | string
    coordinates?: MapNodeUpdatecoordinatesInput | number[]
    moveable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon_url?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    map_id?: StringFieldUpdateOperationsInput | string
    node_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NodeRelationshipCreateInput = {
    node_relationship_id?: string
    relation_title: string
    relationship_score: number
    is_in_range?: boolean | null
    updated_on?: Date | string
    outgoing_relations: NodeCreateNestedOneWithoutOutgoing_relationsInput
    incoming_relations: NodeCreateNestedOneWithoutIncoming_relationsInput
  }

  export type NodeRelationshipUncheckedCreateInput = {
    node_relationship_id?: string
    self_id: string
    relation_title: string
    target_id: string
    relationship_score: number
    is_in_range?: boolean | null
    updated_on?: Date | string
  }

  export type NodeRelationshipUpdateInput = {
    node_relationship_id?: StringFieldUpdateOperationsInput | string
    relation_title?: StringFieldUpdateOperationsInput | string
    relationship_score?: IntFieldUpdateOperationsInput | number
    is_in_range?: NullableBoolFieldUpdateOperationsInput | boolean | null
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    outgoing_relations?: NodeUpdateOneRequiredWithoutOutgoing_relationsNestedInput
    incoming_relations?: NodeUpdateOneRequiredWithoutIncoming_relationsNestedInput
  }

  export type NodeRelationshipUncheckedUpdateInput = {
    node_relationship_id?: StringFieldUpdateOperationsInput | string
    self_id?: StringFieldUpdateOperationsInput | string
    relation_title?: StringFieldUpdateOperationsInput | string
    target_id?: StringFieldUpdateOperationsInput | string
    relationship_score?: IntFieldUpdateOperationsInput | number
    is_in_range?: NullableBoolFieldUpdateOperationsInput | boolean | null
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NodeRelationshipCreateManyInput = {
    node_relationship_id?: string
    self_id: string
    relation_title: string
    target_id: string
    relationship_score: number
    is_in_range?: boolean | null
    updated_on?: Date | string
  }

  export type NodeRelationshipUpdateManyMutationInput = {
    node_relationship_id?: StringFieldUpdateOperationsInput | string
    relation_title?: StringFieldUpdateOperationsInput | string
    relationship_score?: IntFieldUpdateOperationsInput | number
    is_in_range?: NullableBoolFieldUpdateOperationsInput | boolean | null
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NodeRelationshipUncheckedUpdateManyInput = {
    node_relationship_id?: StringFieldUpdateOperationsInput | string
    self_id?: StringFieldUpdateOperationsInput | string
    relation_title?: StringFieldUpdateOperationsInput | string
    target_id?: StringFieldUpdateOperationsInput | string
    relationship_score?: IntFieldUpdateOperationsInput | number
    is_in_range?: NullableBoolFieldUpdateOperationsInput | boolean | null
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionRecapCreateInput = {
    session_recap_id?: string
    title: string
    description?: string | null
    play_date?: Date | string
    created_on?: Date | string
    updated_on?: Date | string
    published_on?: Date | string | null
    campaign?: CampaignCreateNestedOneWithoutSession_recapsInput
  }

  export type SessionRecapUncheckedCreateInput = {
    session_recap_id?: string
    title: string
    description?: string | null
    play_date?: Date | string
    created_on?: Date | string
    updated_on?: Date | string
    campaign_id?: string | null
    published_on?: Date | string | null
  }

  export type SessionRecapUpdateInput = {
    session_recap_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    play_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    published_on?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    campaign?: CampaignUpdateOneWithoutSession_recapsNestedInput
  }

  export type SessionRecapUncheckedUpdateInput = {
    session_recap_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    play_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign_id?: NullableStringFieldUpdateOperationsInput | string | null
    published_on?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionRecapCreateManyInput = {
    session_recap_id?: string
    title: string
    description?: string | null
    play_date?: Date | string
    created_on?: Date | string
    updated_on?: Date | string
    campaign_id?: string | null
    published_on?: Date | string | null
  }

  export type SessionRecapUpdateManyMutationInput = {
    session_recap_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    play_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    published_on?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionRecapUncheckedUpdateManyInput = {
    session_recap_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    play_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign_id?: NullableStringFieldUpdateOperationsInput | string | null
    published_on?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccountOrderByRelevanceInput = {
    fields: AccountOrderByRelevanceFieldEnum | AccountOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SessionOrderByRelevanceInput = {
    fields: SessionOrderByRelevanceFieldEnum | SessionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type CampaignListRelationFilter = {
    every?: CampaignWhereInput
    some?: CampaignWhereInput
    none?: CampaignWhereInput
  }

  export type UserCampaignListRelationFilter = {
    every?: UserCampaignWhereInput
    some?: UserCampaignWhereInput
    none?: UserCampaignWhereInput
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CampaignOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCampaignOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    updated_on?: SortOrder
    role?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    updated_on?: SortOrder
    role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    updated_on?: SortOrder
    role?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type VerificationTokenOrderByRelevanceInput = {
    fields: VerificationTokenOrderByRelevanceFieldEnum | VerificationTokenOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type CampaignNullableScalarRelationFilter = {
    is?: CampaignWhereInput | null
    isNot?: CampaignWhereInput | null
  }

  export type EventPublishProviderOrderByRelevanceInput = {
    fields: EventPublishProviderOrderByRelevanceFieldEnum | EventPublishProviderOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type EventPublishProviderCountOrderByAggregateInput = {
    id?: SortOrder
    provider?: SortOrder
    url?: SortOrder
    campaign_id?: SortOrder
  }

  export type EventPublishProviderMaxOrderByAggregateInput = {
    id?: SortOrder
    provider?: SortOrder
    url?: SortOrder
    campaign_id?: SortOrder
  }

  export type EventPublishProviderMinOrderByAggregateInput = {
    id?: SortOrder
    provider?: SortOrder
    url?: SortOrder
    campaign_id?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NodeTypeListRelationFilter = {
    every?: NodeTypeWhereInput
    some?: NodeTypeWhereInput
    none?: NodeTypeWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type StaticMapListRelationFilter = {
    every?: StaticMapWhereInput
    some?: StaticMapWhereInput
    none?: StaticMapWhereInput
  }

  export type SessionRecapListRelationFilter = {
    every?: SessionRecapWhereInput
    some?: SessionRecapWhereInput
    none?: SessionRecapWhereInput
  }

  export type NodeListRelationFilter = {
    every?: NodeWhereInput
    some?: NodeWhereInput
    none?: NodeWhereInput
  }

  export type EventTemplateListRelationFilter = {
    every?: EventTemplateWhereInput
    some?: EventTemplateWhereInput
    none?: EventTemplateWhereInput
  }

  export type EventPublishProviderListRelationFilter = {
    every?: EventPublishProviderWhereInput
    some?: EventPublishProviderWhereInput
    none?: EventPublishProviderWhereInput
  }

  export type NodeTypeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StaticMapOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionRecapOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NodeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventTemplateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventPublishProviderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CampaignOrderByRelevanceInput = {
    fields: CampaignOrderByRelevanceFieldEnum | CampaignOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CampaignCountOrderByAggregateInput = {
    campaign_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    header_image?: SortOrder
    allow_ai_events?: SortOrder
    overview_map_id?: SortOrder
    created_on?: SortOrder
  }

  export type CampaignMaxOrderByAggregateInput = {
    campaign_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    header_image?: SortOrder
    allow_ai_events?: SortOrder
    overview_map_id?: SortOrder
    created_on?: SortOrder
  }

  export type CampaignMinOrderByAggregateInput = {
    campaign_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    header_image?: SortOrder
    allow_ai_events?: SortOrder
    overview_map_id?: SortOrder
    created_on?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type CampaignScalarRelationFilter = {
    is?: CampaignWhereInput
    isNot?: CampaignWhereInput
  }

  export type UserCampaignOrderByRelevanceInput = {
    fields: UserCampaignOrderByRelevanceFieldEnum | UserCampaignOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCampaignCountOrderByAggregateInput = {
    user_campaign_id?: SortOrder
    user_id?: SortOrder
    campaign_id?: SortOrder
    created_on?: SortOrder
    updated_on?: SortOrder
    last_visited_on?: SortOrder
  }

  export type UserCampaignMaxOrderByAggregateInput = {
    user_campaign_id?: SortOrder
    user_id?: SortOrder
    campaign_id?: SortOrder
    created_on?: SortOrder
    updated_on?: SortOrder
    last_visited_on?: SortOrder
  }

  export type UserCampaignMinOrderByAggregateInput = {
    user_campaign_id?: SortOrder
    user_id?: SortOrder
    campaign_id?: SortOrder
    created_on?: SortOrder
    updated_on?: SortOrder
    last_visited_on?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type EventTemplateOrderByRelevanceInput = {
    fields: EventTemplateOrderByRelevanceFieldEnum | EventTemplateOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type EventTemplateCountOrderByAggregateInput = {
    event_template_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    icon_url?: SortOrder
    rarity?: SortOrder
    relationship?: SortOrder
    compare?: SortOrder
    exclude_from_random?: SortOrder
    results?: SortOrder
    campaign_id?: SortOrder
    node_references?: SortOrder
  }

  export type EventTemplateAvgOrderByAggregateInput = {
    rarity?: SortOrder
  }

  export type EventTemplateMaxOrderByAggregateInput = {
    event_template_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    icon_url?: SortOrder
    rarity?: SortOrder
    relationship?: SortOrder
    compare?: SortOrder
    exclude_from_random?: SortOrder
    campaign_id?: SortOrder
    node_references?: SortOrder
  }

  export type EventTemplateMinOrderByAggregateInput = {
    event_template_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    icon_url?: SortOrder
    rarity?: SortOrder
    relationship?: SortOrder
    compare?: SortOrder
    exclude_from_random?: SortOrder
    campaign_id?: SortOrder
    node_references?: SortOrder
  }

  export type EventTemplateSumOrderByAggregateInput = {
    rarity?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type EventOrderByRelevanceInput = {
    fields: EventOrderByRelevanceFieldEnum | EventOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type EventCountOrderByAggregateInput = {
    event_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    rarity?: SortOrder
    created_on?: SortOrder
    updated_on?: SortOrder
  }

  export type EventAvgOrderByAggregateInput = {
    rarity?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    event_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    rarity?: SortOrder
    created_on?: SortOrder
    updated_on?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    event_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    rarity?: SortOrder
    created_on?: SortOrder
    updated_on?: SortOrder
  }

  export type EventSumOrderByAggregateInput = {
    rarity?: SortOrder
  }

  export type MapNodeListRelationFilter = {
    every?: MapNodeWhereInput
    some?: MapNodeWhereInput
    none?: MapNodeWhereInput
  }

  export type MapNodeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StaticMapOrderByRelevanceInput = {
    fields: StaticMapOrderByRelevanceFieldEnum | StaticMapOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type StaticMapCountOrderByAggregateInput = {
    map_id?: SortOrder
    name?: SortOrder
    image_url?: SortOrder
    created_on?: SortOrder
    updated_on?: SortOrder
    campaign_id?: SortOrder
  }

  export type StaticMapMaxOrderByAggregateInput = {
    map_id?: SortOrder
    name?: SortOrder
    image_url?: SortOrder
    created_on?: SortOrder
    updated_on?: SortOrder
    campaign_id?: SortOrder
  }

  export type StaticMapMinOrderByAggregateInput = {
    map_id?: SortOrder
    name?: SortOrder
    image_url?: SortOrder
    created_on?: SortOrder
    updated_on?: SortOrder
    campaign_id?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type NodeTypeOrderByRelevanceInput = {
    fields: NodeTypeOrderByRelevanceFieldEnum | NodeTypeOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type NodeTypeCountOrderByAggregateInput = {
    node_type_id?: SortOrder
    name?: SortOrder
    allowed_attributes?: SortOrder
    campaign_id?: SortOrder
  }

  export type NodeTypeMaxOrderByAggregateInput = {
    node_type_id?: SortOrder
    name?: SortOrder
    campaign_id?: SortOrder
  }

  export type NodeTypeMinOrderByAggregateInput = {
    node_type_id?: SortOrder
    name?: SortOrder
    campaign_id?: SortOrder
  }

  export type NodeScalarRelationFilter = {
    is?: NodeWhereInput
    isNot?: NodeWhereInput
  }

  export type AttributeOrderByRelevanceInput = {
    fields: AttributeOrderByRelevanceFieldEnum | AttributeOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AttributeCountOrderByAggregateInput = {
    attribute_id?: SortOrder
    title?: SortOrder
    value?: SortOrder
    node_id?: SortOrder
  }

  export type AttributeAvgOrderByAggregateInput = {
    value?: SortOrder
  }

  export type AttributeMaxOrderByAggregateInput = {
    attribute_id?: SortOrder
    title?: SortOrder
    value?: SortOrder
    node_id?: SortOrder
  }

  export type AttributeMinOrderByAggregateInput = {
    attribute_id?: SortOrder
    title?: SortOrder
    value?: SortOrder
    node_id?: SortOrder
  }

  export type AttributeSumOrderByAggregateInput = {
    value?: SortOrder
  }

  export type AttributeListRelationFilter = {
    every?: AttributeWhereInput
    some?: AttributeWhereInput
    none?: AttributeWhereInput
  }

  export type EventListRelationFilter = {
    every?: EventWhereInput
    some?: EventWhereInput
    none?: EventWhereInput
  }

  export type NodeRelationshipListRelationFilter = {
    every?: NodeRelationshipWhereInput
    some?: NodeRelationshipWhereInput
    none?: NodeRelationshipWhereInput
  }

  export type NodeTypeNullableScalarRelationFilter = {
    is?: NodeTypeWhereInput | null
    isNot?: NodeTypeWhereInput | null
  }

  export type AttributeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NodeRelationshipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NodeOrderByRelevanceInput = {
    fields: NodeOrderByRelevanceFieldEnum | NodeOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type NodeCountOrderByAggregateInput = {
    node_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    long_description?: SortOrder
    image_url?: SortOrder
    created_on?: SortOrder
    updated_on?: SortOrder
    base_culture?: SortOrder
    profession?: SortOrder
    given_name_style?: SortOrder
    family_name_style?: SortOrder
    name_shape?: SortOrder
    campaign_id?: SortOrder
    node_type_id?: SortOrder
    exclude_from_events?: SortOrder
  }

  export type NodeMaxOrderByAggregateInput = {
    node_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    long_description?: SortOrder
    image_url?: SortOrder
    created_on?: SortOrder
    updated_on?: SortOrder
    base_culture?: SortOrder
    profession?: SortOrder
    given_name_style?: SortOrder
    family_name_style?: SortOrder
    name_shape?: SortOrder
    campaign_id?: SortOrder
    node_type_id?: SortOrder
    exclude_from_events?: SortOrder
  }

  export type NodeMinOrderByAggregateInput = {
    node_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    long_description?: SortOrder
    image_url?: SortOrder
    created_on?: SortOrder
    updated_on?: SortOrder
    base_culture?: SortOrder
    profession?: SortOrder
    given_name_style?: SortOrder
    family_name_style?: SortOrder
    name_shape?: SortOrder
    campaign_id?: SortOrder
    node_type_id?: SortOrder
    exclude_from_events?: SortOrder
  }

  export type IntNullableListFilter<$PrismaModel = never> = {
    equals?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    has?: number | IntFieldRefInput<$PrismaModel> | null
    hasEvery?: number[] | ListIntFieldRefInput<$PrismaModel>
    hasSome?: number[] | ListIntFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type StaticMapScalarRelationFilter = {
    is?: StaticMapWhereInput
    isNot?: StaticMapWhereInput
  }

  export type NodeNullableScalarRelationFilter = {
    is?: NodeWhereInput | null
    isNot?: NodeWhereInput | null
  }

  export type MapNodeOrderByRelevanceInput = {
    fields: MapNodeOrderByRelevanceFieldEnum | MapNodeOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type MapNodeCountOrderByAggregateInput = {
    map_node_id?: SortOrder
    coordinates?: SortOrder
    moveable?: SortOrder
    title?: SortOrder
    description?: SortOrder
    icon_url?: SortOrder
    icon?: SortOrder
    created_on?: SortOrder
    updated_on?: SortOrder
    map_id?: SortOrder
    node_id?: SortOrder
  }

  export type MapNodeAvgOrderByAggregateInput = {
    coordinates?: SortOrder
  }

  export type MapNodeMaxOrderByAggregateInput = {
    map_node_id?: SortOrder
    moveable?: SortOrder
    title?: SortOrder
    description?: SortOrder
    icon_url?: SortOrder
    icon?: SortOrder
    created_on?: SortOrder
    updated_on?: SortOrder
    map_id?: SortOrder
    node_id?: SortOrder
  }

  export type MapNodeMinOrderByAggregateInput = {
    map_node_id?: SortOrder
    moveable?: SortOrder
    title?: SortOrder
    description?: SortOrder
    icon_url?: SortOrder
    icon?: SortOrder
    created_on?: SortOrder
    updated_on?: SortOrder
    map_id?: SortOrder
    node_id?: SortOrder
  }

  export type MapNodeSumOrderByAggregateInput = {
    coordinates?: SortOrder
  }

  export type NodeRelationshipOrderByRelevanceInput = {
    fields: NodeRelationshipOrderByRelevanceFieldEnum | NodeRelationshipOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type NodeRelationshipSelf_idTarget_idCompoundUniqueInput = {
    self_id: string
    target_id: string
  }

  export type NodeRelationshipCountOrderByAggregateInput = {
    node_relationship_id?: SortOrder
    self_id?: SortOrder
    relation_title?: SortOrder
    target_id?: SortOrder
    relationship_score?: SortOrder
    is_in_range?: SortOrder
    updated_on?: SortOrder
  }

  export type NodeRelationshipAvgOrderByAggregateInput = {
    relationship_score?: SortOrder
  }

  export type NodeRelationshipMaxOrderByAggregateInput = {
    node_relationship_id?: SortOrder
    self_id?: SortOrder
    relation_title?: SortOrder
    target_id?: SortOrder
    relationship_score?: SortOrder
    is_in_range?: SortOrder
    updated_on?: SortOrder
  }

  export type NodeRelationshipMinOrderByAggregateInput = {
    node_relationship_id?: SortOrder
    self_id?: SortOrder
    relation_title?: SortOrder
    target_id?: SortOrder
    relationship_score?: SortOrder
    is_in_range?: SortOrder
    updated_on?: SortOrder
  }

  export type NodeRelationshipSumOrderByAggregateInput = {
    relationship_score?: SortOrder
  }

  export type SessionRecapOrderByRelevanceInput = {
    fields: SessionRecapOrderByRelevanceFieldEnum | SessionRecapOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SessionRecapCountOrderByAggregateInput = {
    session_recap_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    play_date?: SortOrder
    created_on?: SortOrder
    updated_on?: SortOrder
    campaign_id?: SortOrder
    published_on?: SortOrder
  }

  export type SessionRecapMaxOrderByAggregateInput = {
    session_recap_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    play_date?: SortOrder
    created_on?: SortOrder
    updated_on?: SortOrder
    campaign_id?: SortOrder
    published_on?: SortOrder
  }

  export type SessionRecapMinOrderByAggregateInput = {
    session_recap_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    play_date?: SortOrder
    created_on?: SortOrder
    updated_on?: SortOrder
    campaign_id?: SortOrder
    published_on?: SortOrder
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type CampaignCreateNestedManyWithoutUsersInput = {
    create?: XOR<CampaignCreateWithoutUsersInput, CampaignUncheckedCreateWithoutUsersInput> | CampaignCreateWithoutUsersInput[] | CampaignUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutUsersInput | CampaignCreateOrConnectWithoutUsersInput[]
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
  }

  export type UserCampaignCreateNestedManyWithoutUserInput = {
    create?: XOR<UserCampaignCreateWithoutUserInput, UserCampaignUncheckedCreateWithoutUserInput> | UserCampaignCreateWithoutUserInput[] | UserCampaignUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCampaignCreateOrConnectWithoutUserInput | UserCampaignCreateOrConnectWithoutUserInput[]
    createMany?: UserCampaignCreateManyUserInputEnvelope
    connect?: UserCampaignWhereUniqueInput | UserCampaignWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type CampaignUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<CampaignCreateWithoutUsersInput, CampaignUncheckedCreateWithoutUsersInput> | CampaignCreateWithoutUsersInput[] | CampaignUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutUsersInput | CampaignCreateOrConnectWithoutUsersInput[]
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
  }

  export type UserCampaignUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserCampaignCreateWithoutUserInput, UserCampaignUncheckedCreateWithoutUserInput> | UserCampaignCreateWithoutUserInput[] | UserCampaignUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCampaignCreateOrConnectWithoutUserInput | UserCampaignCreateOrConnectWithoutUserInput[]
    createMany?: UserCampaignCreateManyUserInputEnvelope
    connect?: UserCampaignWhereUniqueInput | UserCampaignWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type CampaignUpdateManyWithoutUsersNestedInput = {
    create?: XOR<CampaignCreateWithoutUsersInput, CampaignUncheckedCreateWithoutUsersInput> | CampaignCreateWithoutUsersInput[] | CampaignUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutUsersInput | CampaignCreateOrConnectWithoutUsersInput[]
    upsert?: CampaignUpsertWithWhereUniqueWithoutUsersInput | CampaignUpsertWithWhereUniqueWithoutUsersInput[]
    set?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    disconnect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    delete?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    update?: CampaignUpdateWithWhereUniqueWithoutUsersInput | CampaignUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: CampaignUpdateManyWithWhereWithoutUsersInput | CampaignUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
  }

  export type UserCampaignUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserCampaignCreateWithoutUserInput, UserCampaignUncheckedCreateWithoutUserInput> | UserCampaignCreateWithoutUserInput[] | UserCampaignUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCampaignCreateOrConnectWithoutUserInput | UserCampaignCreateOrConnectWithoutUserInput[]
    upsert?: UserCampaignUpsertWithWhereUniqueWithoutUserInput | UserCampaignUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserCampaignCreateManyUserInputEnvelope
    set?: UserCampaignWhereUniqueInput | UserCampaignWhereUniqueInput[]
    disconnect?: UserCampaignWhereUniqueInput | UserCampaignWhereUniqueInput[]
    delete?: UserCampaignWhereUniqueInput | UserCampaignWhereUniqueInput[]
    connect?: UserCampaignWhereUniqueInput | UserCampaignWhereUniqueInput[]
    update?: UserCampaignUpdateWithWhereUniqueWithoutUserInput | UserCampaignUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserCampaignUpdateManyWithWhereWithoutUserInput | UserCampaignUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserCampaignScalarWhereInput | UserCampaignScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type CampaignUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<CampaignCreateWithoutUsersInput, CampaignUncheckedCreateWithoutUsersInput> | CampaignCreateWithoutUsersInput[] | CampaignUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutUsersInput | CampaignCreateOrConnectWithoutUsersInput[]
    upsert?: CampaignUpsertWithWhereUniqueWithoutUsersInput | CampaignUpsertWithWhereUniqueWithoutUsersInput[]
    set?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    disconnect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    delete?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    update?: CampaignUpdateWithWhereUniqueWithoutUsersInput | CampaignUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: CampaignUpdateManyWithWhereWithoutUsersInput | CampaignUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
  }

  export type UserCampaignUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserCampaignCreateWithoutUserInput, UserCampaignUncheckedCreateWithoutUserInput> | UserCampaignCreateWithoutUserInput[] | UserCampaignUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCampaignCreateOrConnectWithoutUserInput | UserCampaignCreateOrConnectWithoutUserInput[]
    upsert?: UserCampaignUpsertWithWhereUniqueWithoutUserInput | UserCampaignUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserCampaignCreateManyUserInputEnvelope
    set?: UserCampaignWhereUniqueInput | UserCampaignWhereUniqueInput[]
    disconnect?: UserCampaignWhereUniqueInput | UserCampaignWhereUniqueInput[]
    delete?: UserCampaignWhereUniqueInput | UserCampaignWhereUniqueInput[]
    connect?: UserCampaignWhereUniqueInput | UserCampaignWhereUniqueInput[]
    update?: UserCampaignUpdateWithWhereUniqueWithoutUserInput | UserCampaignUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserCampaignUpdateManyWithWhereWithoutUserInput | UserCampaignUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserCampaignScalarWhereInput | UserCampaignScalarWhereInput[]
  }

  export type CampaignCreateNestedOneWithoutEvent_publish_providerInput = {
    create?: XOR<CampaignCreateWithoutEvent_publish_providerInput, CampaignUncheckedCreateWithoutEvent_publish_providerInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutEvent_publish_providerInput
    connect?: CampaignWhereUniqueInput
  }

  export type CampaignUpdateOneWithoutEvent_publish_providerNestedInput = {
    create?: XOR<CampaignCreateWithoutEvent_publish_providerInput, CampaignUncheckedCreateWithoutEvent_publish_providerInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutEvent_publish_providerInput
    upsert?: CampaignUpsertWithoutEvent_publish_providerInput
    disconnect?: CampaignWhereInput | boolean
    delete?: CampaignWhereInput | boolean
    connect?: CampaignWhereUniqueInput
    update?: XOR<XOR<CampaignUpdateToOneWithWhereWithoutEvent_publish_providerInput, CampaignUpdateWithoutEvent_publish_providerInput>, CampaignUncheckedUpdateWithoutEvent_publish_providerInput>
  }

  export type NodeTypeCreateNestedManyWithoutCampaignInput = {
    create?: XOR<NodeTypeCreateWithoutCampaignInput, NodeTypeUncheckedCreateWithoutCampaignInput> | NodeTypeCreateWithoutCampaignInput[] | NodeTypeUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: NodeTypeCreateOrConnectWithoutCampaignInput | NodeTypeCreateOrConnectWithoutCampaignInput[]
    createMany?: NodeTypeCreateManyCampaignInputEnvelope
    connect?: NodeTypeWhereUniqueInput | NodeTypeWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutCampaignsInput = {
    create?: XOR<UserCreateWithoutCampaignsInput, UserUncheckedCreateWithoutCampaignsInput> | UserCreateWithoutCampaignsInput[] | UserUncheckedCreateWithoutCampaignsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCampaignsInput | UserCreateOrConnectWithoutCampaignsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type StaticMapCreateNestedManyWithoutCampaignInput = {
    create?: XOR<StaticMapCreateWithoutCampaignInput, StaticMapUncheckedCreateWithoutCampaignInput> | StaticMapCreateWithoutCampaignInput[] | StaticMapUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: StaticMapCreateOrConnectWithoutCampaignInput | StaticMapCreateOrConnectWithoutCampaignInput[]
    createMany?: StaticMapCreateManyCampaignInputEnvelope
    connect?: StaticMapWhereUniqueInput | StaticMapWhereUniqueInput[]
  }

  export type SessionRecapCreateNestedManyWithoutCampaignInput = {
    create?: XOR<SessionRecapCreateWithoutCampaignInput, SessionRecapUncheckedCreateWithoutCampaignInput> | SessionRecapCreateWithoutCampaignInput[] | SessionRecapUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: SessionRecapCreateOrConnectWithoutCampaignInput | SessionRecapCreateOrConnectWithoutCampaignInput[]
    createMany?: SessionRecapCreateManyCampaignInputEnvelope
    connect?: SessionRecapWhereUniqueInput | SessionRecapWhereUniqueInput[]
  }

  export type NodeCreateNestedManyWithoutCampaignInput = {
    create?: XOR<NodeCreateWithoutCampaignInput, NodeUncheckedCreateWithoutCampaignInput> | NodeCreateWithoutCampaignInput[] | NodeUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: NodeCreateOrConnectWithoutCampaignInput | NodeCreateOrConnectWithoutCampaignInput[]
    createMany?: NodeCreateManyCampaignInputEnvelope
    connect?: NodeWhereUniqueInput | NodeWhereUniqueInput[]
  }

  export type EventTemplateCreateNestedManyWithoutCampaignInput = {
    create?: XOR<EventTemplateCreateWithoutCampaignInput, EventTemplateUncheckedCreateWithoutCampaignInput> | EventTemplateCreateWithoutCampaignInput[] | EventTemplateUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: EventTemplateCreateOrConnectWithoutCampaignInput | EventTemplateCreateOrConnectWithoutCampaignInput[]
    createMany?: EventTemplateCreateManyCampaignInputEnvelope
    connect?: EventTemplateWhereUniqueInput | EventTemplateWhereUniqueInput[]
  }

  export type EventPublishProviderCreateNestedManyWithoutCampaignInput = {
    create?: XOR<EventPublishProviderCreateWithoutCampaignInput, EventPublishProviderUncheckedCreateWithoutCampaignInput> | EventPublishProviderCreateWithoutCampaignInput[] | EventPublishProviderUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: EventPublishProviderCreateOrConnectWithoutCampaignInput | EventPublishProviderCreateOrConnectWithoutCampaignInput[]
    createMany?: EventPublishProviderCreateManyCampaignInputEnvelope
    connect?: EventPublishProviderWhereUniqueInput | EventPublishProviderWhereUniqueInput[]
  }

  export type UserCampaignCreateNestedManyWithoutCampaignInput = {
    create?: XOR<UserCampaignCreateWithoutCampaignInput, UserCampaignUncheckedCreateWithoutCampaignInput> | UserCampaignCreateWithoutCampaignInput[] | UserCampaignUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: UserCampaignCreateOrConnectWithoutCampaignInput | UserCampaignCreateOrConnectWithoutCampaignInput[]
    createMany?: UserCampaignCreateManyCampaignInputEnvelope
    connect?: UserCampaignWhereUniqueInput | UserCampaignWhereUniqueInput[]
  }

  export type NodeTypeUncheckedCreateNestedManyWithoutCampaignInput = {
    create?: XOR<NodeTypeCreateWithoutCampaignInput, NodeTypeUncheckedCreateWithoutCampaignInput> | NodeTypeCreateWithoutCampaignInput[] | NodeTypeUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: NodeTypeCreateOrConnectWithoutCampaignInput | NodeTypeCreateOrConnectWithoutCampaignInput[]
    createMany?: NodeTypeCreateManyCampaignInputEnvelope
    connect?: NodeTypeWhereUniqueInput | NodeTypeWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutCampaignsInput = {
    create?: XOR<UserCreateWithoutCampaignsInput, UserUncheckedCreateWithoutCampaignsInput> | UserCreateWithoutCampaignsInput[] | UserUncheckedCreateWithoutCampaignsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCampaignsInput | UserCreateOrConnectWithoutCampaignsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type StaticMapUncheckedCreateNestedManyWithoutCampaignInput = {
    create?: XOR<StaticMapCreateWithoutCampaignInput, StaticMapUncheckedCreateWithoutCampaignInput> | StaticMapCreateWithoutCampaignInput[] | StaticMapUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: StaticMapCreateOrConnectWithoutCampaignInput | StaticMapCreateOrConnectWithoutCampaignInput[]
    createMany?: StaticMapCreateManyCampaignInputEnvelope
    connect?: StaticMapWhereUniqueInput | StaticMapWhereUniqueInput[]
  }

  export type SessionRecapUncheckedCreateNestedManyWithoutCampaignInput = {
    create?: XOR<SessionRecapCreateWithoutCampaignInput, SessionRecapUncheckedCreateWithoutCampaignInput> | SessionRecapCreateWithoutCampaignInput[] | SessionRecapUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: SessionRecapCreateOrConnectWithoutCampaignInput | SessionRecapCreateOrConnectWithoutCampaignInput[]
    createMany?: SessionRecapCreateManyCampaignInputEnvelope
    connect?: SessionRecapWhereUniqueInput | SessionRecapWhereUniqueInput[]
  }

  export type NodeUncheckedCreateNestedManyWithoutCampaignInput = {
    create?: XOR<NodeCreateWithoutCampaignInput, NodeUncheckedCreateWithoutCampaignInput> | NodeCreateWithoutCampaignInput[] | NodeUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: NodeCreateOrConnectWithoutCampaignInput | NodeCreateOrConnectWithoutCampaignInput[]
    createMany?: NodeCreateManyCampaignInputEnvelope
    connect?: NodeWhereUniqueInput | NodeWhereUniqueInput[]
  }

  export type EventTemplateUncheckedCreateNestedManyWithoutCampaignInput = {
    create?: XOR<EventTemplateCreateWithoutCampaignInput, EventTemplateUncheckedCreateWithoutCampaignInput> | EventTemplateCreateWithoutCampaignInput[] | EventTemplateUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: EventTemplateCreateOrConnectWithoutCampaignInput | EventTemplateCreateOrConnectWithoutCampaignInput[]
    createMany?: EventTemplateCreateManyCampaignInputEnvelope
    connect?: EventTemplateWhereUniqueInput | EventTemplateWhereUniqueInput[]
  }

  export type EventPublishProviderUncheckedCreateNestedManyWithoutCampaignInput = {
    create?: XOR<EventPublishProviderCreateWithoutCampaignInput, EventPublishProviderUncheckedCreateWithoutCampaignInput> | EventPublishProviderCreateWithoutCampaignInput[] | EventPublishProviderUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: EventPublishProviderCreateOrConnectWithoutCampaignInput | EventPublishProviderCreateOrConnectWithoutCampaignInput[]
    createMany?: EventPublishProviderCreateManyCampaignInputEnvelope
    connect?: EventPublishProviderWhereUniqueInput | EventPublishProviderWhereUniqueInput[]
  }

  export type UserCampaignUncheckedCreateNestedManyWithoutCampaignInput = {
    create?: XOR<UserCampaignCreateWithoutCampaignInput, UserCampaignUncheckedCreateWithoutCampaignInput> | UserCampaignCreateWithoutCampaignInput[] | UserCampaignUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: UserCampaignCreateOrConnectWithoutCampaignInput | UserCampaignCreateOrConnectWithoutCampaignInput[]
    createMany?: UserCampaignCreateManyCampaignInputEnvelope
    connect?: UserCampaignWhereUniqueInput | UserCampaignWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NodeTypeUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<NodeTypeCreateWithoutCampaignInput, NodeTypeUncheckedCreateWithoutCampaignInput> | NodeTypeCreateWithoutCampaignInput[] | NodeTypeUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: NodeTypeCreateOrConnectWithoutCampaignInput | NodeTypeCreateOrConnectWithoutCampaignInput[]
    upsert?: NodeTypeUpsertWithWhereUniqueWithoutCampaignInput | NodeTypeUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: NodeTypeCreateManyCampaignInputEnvelope
    set?: NodeTypeWhereUniqueInput | NodeTypeWhereUniqueInput[]
    disconnect?: NodeTypeWhereUniqueInput | NodeTypeWhereUniqueInput[]
    delete?: NodeTypeWhereUniqueInput | NodeTypeWhereUniqueInput[]
    connect?: NodeTypeWhereUniqueInput | NodeTypeWhereUniqueInput[]
    update?: NodeTypeUpdateWithWhereUniqueWithoutCampaignInput | NodeTypeUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: NodeTypeUpdateManyWithWhereWithoutCampaignInput | NodeTypeUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: NodeTypeScalarWhereInput | NodeTypeScalarWhereInput[]
  }

  export type UserUpdateManyWithoutCampaignsNestedInput = {
    create?: XOR<UserCreateWithoutCampaignsInput, UserUncheckedCreateWithoutCampaignsInput> | UserCreateWithoutCampaignsInput[] | UserUncheckedCreateWithoutCampaignsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCampaignsInput | UserCreateOrConnectWithoutCampaignsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCampaignsInput | UserUpsertWithWhereUniqueWithoutCampaignsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCampaignsInput | UserUpdateWithWhereUniqueWithoutCampaignsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCampaignsInput | UserUpdateManyWithWhereWithoutCampaignsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type StaticMapUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<StaticMapCreateWithoutCampaignInput, StaticMapUncheckedCreateWithoutCampaignInput> | StaticMapCreateWithoutCampaignInput[] | StaticMapUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: StaticMapCreateOrConnectWithoutCampaignInput | StaticMapCreateOrConnectWithoutCampaignInput[]
    upsert?: StaticMapUpsertWithWhereUniqueWithoutCampaignInput | StaticMapUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: StaticMapCreateManyCampaignInputEnvelope
    set?: StaticMapWhereUniqueInput | StaticMapWhereUniqueInput[]
    disconnect?: StaticMapWhereUniqueInput | StaticMapWhereUniqueInput[]
    delete?: StaticMapWhereUniqueInput | StaticMapWhereUniqueInput[]
    connect?: StaticMapWhereUniqueInput | StaticMapWhereUniqueInput[]
    update?: StaticMapUpdateWithWhereUniqueWithoutCampaignInput | StaticMapUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: StaticMapUpdateManyWithWhereWithoutCampaignInput | StaticMapUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: StaticMapScalarWhereInput | StaticMapScalarWhereInput[]
  }

  export type SessionRecapUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<SessionRecapCreateWithoutCampaignInput, SessionRecapUncheckedCreateWithoutCampaignInput> | SessionRecapCreateWithoutCampaignInput[] | SessionRecapUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: SessionRecapCreateOrConnectWithoutCampaignInput | SessionRecapCreateOrConnectWithoutCampaignInput[]
    upsert?: SessionRecapUpsertWithWhereUniqueWithoutCampaignInput | SessionRecapUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: SessionRecapCreateManyCampaignInputEnvelope
    set?: SessionRecapWhereUniqueInput | SessionRecapWhereUniqueInput[]
    disconnect?: SessionRecapWhereUniqueInput | SessionRecapWhereUniqueInput[]
    delete?: SessionRecapWhereUniqueInput | SessionRecapWhereUniqueInput[]
    connect?: SessionRecapWhereUniqueInput | SessionRecapWhereUniqueInput[]
    update?: SessionRecapUpdateWithWhereUniqueWithoutCampaignInput | SessionRecapUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: SessionRecapUpdateManyWithWhereWithoutCampaignInput | SessionRecapUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: SessionRecapScalarWhereInput | SessionRecapScalarWhereInput[]
  }

  export type NodeUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<NodeCreateWithoutCampaignInput, NodeUncheckedCreateWithoutCampaignInput> | NodeCreateWithoutCampaignInput[] | NodeUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: NodeCreateOrConnectWithoutCampaignInput | NodeCreateOrConnectWithoutCampaignInput[]
    upsert?: NodeUpsertWithWhereUniqueWithoutCampaignInput | NodeUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: NodeCreateManyCampaignInputEnvelope
    set?: NodeWhereUniqueInput | NodeWhereUniqueInput[]
    disconnect?: NodeWhereUniqueInput | NodeWhereUniqueInput[]
    delete?: NodeWhereUniqueInput | NodeWhereUniqueInput[]
    connect?: NodeWhereUniqueInput | NodeWhereUniqueInput[]
    update?: NodeUpdateWithWhereUniqueWithoutCampaignInput | NodeUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: NodeUpdateManyWithWhereWithoutCampaignInput | NodeUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: NodeScalarWhereInput | NodeScalarWhereInput[]
  }

  export type EventTemplateUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<EventTemplateCreateWithoutCampaignInput, EventTemplateUncheckedCreateWithoutCampaignInput> | EventTemplateCreateWithoutCampaignInput[] | EventTemplateUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: EventTemplateCreateOrConnectWithoutCampaignInput | EventTemplateCreateOrConnectWithoutCampaignInput[]
    upsert?: EventTemplateUpsertWithWhereUniqueWithoutCampaignInput | EventTemplateUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: EventTemplateCreateManyCampaignInputEnvelope
    set?: EventTemplateWhereUniqueInput | EventTemplateWhereUniqueInput[]
    disconnect?: EventTemplateWhereUniqueInput | EventTemplateWhereUniqueInput[]
    delete?: EventTemplateWhereUniqueInput | EventTemplateWhereUniqueInput[]
    connect?: EventTemplateWhereUniqueInput | EventTemplateWhereUniqueInput[]
    update?: EventTemplateUpdateWithWhereUniqueWithoutCampaignInput | EventTemplateUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: EventTemplateUpdateManyWithWhereWithoutCampaignInput | EventTemplateUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: EventTemplateScalarWhereInput | EventTemplateScalarWhereInput[]
  }

  export type EventPublishProviderUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<EventPublishProviderCreateWithoutCampaignInput, EventPublishProviderUncheckedCreateWithoutCampaignInput> | EventPublishProviderCreateWithoutCampaignInput[] | EventPublishProviderUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: EventPublishProviderCreateOrConnectWithoutCampaignInput | EventPublishProviderCreateOrConnectWithoutCampaignInput[]
    upsert?: EventPublishProviderUpsertWithWhereUniqueWithoutCampaignInput | EventPublishProviderUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: EventPublishProviderCreateManyCampaignInputEnvelope
    set?: EventPublishProviderWhereUniqueInput | EventPublishProviderWhereUniqueInput[]
    disconnect?: EventPublishProviderWhereUniqueInput | EventPublishProviderWhereUniqueInput[]
    delete?: EventPublishProviderWhereUniqueInput | EventPublishProviderWhereUniqueInput[]
    connect?: EventPublishProviderWhereUniqueInput | EventPublishProviderWhereUniqueInput[]
    update?: EventPublishProviderUpdateWithWhereUniqueWithoutCampaignInput | EventPublishProviderUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: EventPublishProviderUpdateManyWithWhereWithoutCampaignInput | EventPublishProviderUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: EventPublishProviderScalarWhereInput | EventPublishProviderScalarWhereInput[]
  }

  export type UserCampaignUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<UserCampaignCreateWithoutCampaignInput, UserCampaignUncheckedCreateWithoutCampaignInput> | UserCampaignCreateWithoutCampaignInput[] | UserCampaignUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: UserCampaignCreateOrConnectWithoutCampaignInput | UserCampaignCreateOrConnectWithoutCampaignInput[]
    upsert?: UserCampaignUpsertWithWhereUniqueWithoutCampaignInput | UserCampaignUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: UserCampaignCreateManyCampaignInputEnvelope
    set?: UserCampaignWhereUniqueInput | UserCampaignWhereUniqueInput[]
    disconnect?: UserCampaignWhereUniqueInput | UserCampaignWhereUniqueInput[]
    delete?: UserCampaignWhereUniqueInput | UserCampaignWhereUniqueInput[]
    connect?: UserCampaignWhereUniqueInput | UserCampaignWhereUniqueInput[]
    update?: UserCampaignUpdateWithWhereUniqueWithoutCampaignInput | UserCampaignUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: UserCampaignUpdateManyWithWhereWithoutCampaignInput | UserCampaignUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: UserCampaignScalarWhereInput | UserCampaignScalarWhereInput[]
  }

  export type NodeTypeUncheckedUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<NodeTypeCreateWithoutCampaignInput, NodeTypeUncheckedCreateWithoutCampaignInput> | NodeTypeCreateWithoutCampaignInput[] | NodeTypeUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: NodeTypeCreateOrConnectWithoutCampaignInput | NodeTypeCreateOrConnectWithoutCampaignInput[]
    upsert?: NodeTypeUpsertWithWhereUniqueWithoutCampaignInput | NodeTypeUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: NodeTypeCreateManyCampaignInputEnvelope
    set?: NodeTypeWhereUniqueInput | NodeTypeWhereUniqueInput[]
    disconnect?: NodeTypeWhereUniqueInput | NodeTypeWhereUniqueInput[]
    delete?: NodeTypeWhereUniqueInput | NodeTypeWhereUniqueInput[]
    connect?: NodeTypeWhereUniqueInput | NodeTypeWhereUniqueInput[]
    update?: NodeTypeUpdateWithWhereUniqueWithoutCampaignInput | NodeTypeUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: NodeTypeUpdateManyWithWhereWithoutCampaignInput | NodeTypeUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: NodeTypeScalarWhereInput | NodeTypeScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutCampaignsNestedInput = {
    create?: XOR<UserCreateWithoutCampaignsInput, UserUncheckedCreateWithoutCampaignsInput> | UserCreateWithoutCampaignsInput[] | UserUncheckedCreateWithoutCampaignsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCampaignsInput | UserCreateOrConnectWithoutCampaignsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCampaignsInput | UserUpsertWithWhereUniqueWithoutCampaignsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCampaignsInput | UserUpdateWithWhereUniqueWithoutCampaignsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCampaignsInput | UserUpdateManyWithWhereWithoutCampaignsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type StaticMapUncheckedUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<StaticMapCreateWithoutCampaignInput, StaticMapUncheckedCreateWithoutCampaignInput> | StaticMapCreateWithoutCampaignInput[] | StaticMapUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: StaticMapCreateOrConnectWithoutCampaignInput | StaticMapCreateOrConnectWithoutCampaignInput[]
    upsert?: StaticMapUpsertWithWhereUniqueWithoutCampaignInput | StaticMapUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: StaticMapCreateManyCampaignInputEnvelope
    set?: StaticMapWhereUniqueInput | StaticMapWhereUniqueInput[]
    disconnect?: StaticMapWhereUniqueInput | StaticMapWhereUniqueInput[]
    delete?: StaticMapWhereUniqueInput | StaticMapWhereUniqueInput[]
    connect?: StaticMapWhereUniqueInput | StaticMapWhereUniqueInput[]
    update?: StaticMapUpdateWithWhereUniqueWithoutCampaignInput | StaticMapUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: StaticMapUpdateManyWithWhereWithoutCampaignInput | StaticMapUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: StaticMapScalarWhereInput | StaticMapScalarWhereInput[]
  }

  export type SessionRecapUncheckedUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<SessionRecapCreateWithoutCampaignInput, SessionRecapUncheckedCreateWithoutCampaignInput> | SessionRecapCreateWithoutCampaignInput[] | SessionRecapUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: SessionRecapCreateOrConnectWithoutCampaignInput | SessionRecapCreateOrConnectWithoutCampaignInput[]
    upsert?: SessionRecapUpsertWithWhereUniqueWithoutCampaignInput | SessionRecapUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: SessionRecapCreateManyCampaignInputEnvelope
    set?: SessionRecapWhereUniqueInput | SessionRecapWhereUniqueInput[]
    disconnect?: SessionRecapWhereUniqueInput | SessionRecapWhereUniqueInput[]
    delete?: SessionRecapWhereUniqueInput | SessionRecapWhereUniqueInput[]
    connect?: SessionRecapWhereUniqueInput | SessionRecapWhereUniqueInput[]
    update?: SessionRecapUpdateWithWhereUniqueWithoutCampaignInput | SessionRecapUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: SessionRecapUpdateManyWithWhereWithoutCampaignInput | SessionRecapUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: SessionRecapScalarWhereInput | SessionRecapScalarWhereInput[]
  }

  export type NodeUncheckedUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<NodeCreateWithoutCampaignInput, NodeUncheckedCreateWithoutCampaignInput> | NodeCreateWithoutCampaignInput[] | NodeUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: NodeCreateOrConnectWithoutCampaignInput | NodeCreateOrConnectWithoutCampaignInput[]
    upsert?: NodeUpsertWithWhereUniqueWithoutCampaignInput | NodeUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: NodeCreateManyCampaignInputEnvelope
    set?: NodeWhereUniqueInput | NodeWhereUniqueInput[]
    disconnect?: NodeWhereUniqueInput | NodeWhereUniqueInput[]
    delete?: NodeWhereUniqueInput | NodeWhereUniqueInput[]
    connect?: NodeWhereUniqueInput | NodeWhereUniqueInput[]
    update?: NodeUpdateWithWhereUniqueWithoutCampaignInput | NodeUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: NodeUpdateManyWithWhereWithoutCampaignInput | NodeUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: NodeScalarWhereInput | NodeScalarWhereInput[]
  }

  export type EventTemplateUncheckedUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<EventTemplateCreateWithoutCampaignInput, EventTemplateUncheckedCreateWithoutCampaignInput> | EventTemplateCreateWithoutCampaignInput[] | EventTemplateUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: EventTemplateCreateOrConnectWithoutCampaignInput | EventTemplateCreateOrConnectWithoutCampaignInput[]
    upsert?: EventTemplateUpsertWithWhereUniqueWithoutCampaignInput | EventTemplateUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: EventTemplateCreateManyCampaignInputEnvelope
    set?: EventTemplateWhereUniqueInput | EventTemplateWhereUniqueInput[]
    disconnect?: EventTemplateWhereUniqueInput | EventTemplateWhereUniqueInput[]
    delete?: EventTemplateWhereUniqueInput | EventTemplateWhereUniqueInput[]
    connect?: EventTemplateWhereUniqueInput | EventTemplateWhereUniqueInput[]
    update?: EventTemplateUpdateWithWhereUniqueWithoutCampaignInput | EventTemplateUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: EventTemplateUpdateManyWithWhereWithoutCampaignInput | EventTemplateUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: EventTemplateScalarWhereInput | EventTemplateScalarWhereInput[]
  }

  export type EventPublishProviderUncheckedUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<EventPublishProviderCreateWithoutCampaignInput, EventPublishProviderUncheckedCreateWithoutCampaignInput> | EventPublishProviderCreateWithoutCampaignInput[] | EventPublishProviderUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: EventPublishProviderCreateOrConnectWithoutCampaignInput | EventPublishProviderCreateOrConnectWithoutCampaignInput[]
    upsert?: EventPublishProviderUpsertWithWhereUniqueWithoutCampaignInput | EventPublishProviderUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: EventPublishProviderCreateManyCampaignInputEnvelope
    set?: EventPublishProviderWhereUniqueInput | EventPublishProviderWhereUniqueInput[]
    disconnect?: EventPublishProviderWhereUniqueInput | EventPublishProviderWhereUniqueInput[]
    delete?: EventPublishProviderWhereUniqueInput | EventPublishProviderWhereUniqueInput[]
    connect?: EventPublishProviderWhereUniqueInput | EventPublishProviderWhereUniqueInput[]
    update?: EventPublishProviderUpdateWithWhereUniqueWithoutCampaignInput | EventPublishProviderUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: EventPublishProviderUpdateManyWithWhereWithoutCampaignInput | EventPublishProviderUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: EventPublishProviderScalarWhereInput | EventPublishProviderScalarWhereInput[]
  }

  export type UserCampaignUncheckedUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<UserCampaignCreateWithoutCampaignInput, UserCampaignUncheckedCreateWithoutCampaignInput> | UserCampaignCreateWithoutCampaignInput[] | UserCampaignUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: UserCampaignCreateOrConnectWithoutCampaignInput | UserCampaignCreateOrConnectWithoutCampaignInput[]
    upsert?: UserCampaignUpsertWithWhereUniqueWithoutCampaignInput | UserCampaignUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: UserCampaignCreateManyCampaignInputEnvelope
    set?: UserCampaignWhereUniqueInput | UserCampaignWhereUniqueInput[]
    disconnect?: UserCampaignWhereUniqueInput | UserCampaignWhereUniqueInput[]
    delete?: UserCampaignWhereUniqueInput | UserCampaignWhereUniqueInput[]
    connect?: UserCampaignWhereUniqueInput | UserCampaignWhereUniqueInput[]
    update?: UserCampaignUpdateWithWhereUniqueWithoutCampaignInput | UserCampaignUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: UserCampaignUpdateManyWithWhereWithoutCampaignInput | UserCampaignUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: UserCampaignScalarWhereInput | UserCampaignScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUser_campaignsInput = {
    create?: XOR<UserCreateWithoutUser_campaignsInput, UserUncheckedCreateWithoutUser_campaignsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUser_campaignsInput
    connect?: UserWhereUniqueInput
  }

  export type CampaignCreateNestedOneWithoutUser_campaignsInput = {
    create?: XOR<CampaignCreateWithoutUser_campaignsInput, CampaignUncheckedCreateWithoutUser_campaignsInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutUser_campaignsInput
    connect?: CampaignWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUser_campaignsNestedInput = {
    create?: XOR<UserCreateWithoutUser_campaignsInput, UserUncheckedCreateWithoutUser_campaignsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUser_campaignsInput
    upsert?: UserUpsertWithoutUser_campaignsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUser_campaignsInput, UserUpdateWithoutUser_campaignsInput>, UserUncheckedUpdateWithoutUser_campaignsInput>
  }

  export type CampaignUpdateOneRequiredWithoutUser_campaignsNestedInput = {
    create?: XOR<CampaignCreateWithoutUser_campaignsInput, CampaignUncheckedCreateWithoutUser_campaignsInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutUser_campaignsInput
    upsert?: CampaignUpsertWithoutUser_campaignsInput
    connect?: CampaignWhereUniqueInput
    update?: XOR<XOR<CampaignUpdateToOneWithWhereWithoutUser_campaignsInput, CampaignUpdateWithoutUser_campaignsInput>, CampaignUncheckedUpdateWithoutUser_campaignsInput>
  }

  export type CampaignCreateNestedOneWithoutEvent_templatesInput = {
    create?: XOR<CampaignCreateWithoutEvent_templatesInput, CampaignUncheckedCreateWithoutEvent_templatesInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutEvent_templatesInput
    connect?: CampaignWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type CampaignUpdateOneWithoutEvent_templatesNestedInput = {
    create?: XOR<CampaignCreateWithoutEvent_templatesInput, CampaignUncheckedCreateWithoutEvent_templatesInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutEvent_templatesInput
    upsert?: CampaignUpsertWithoutEvent_templatesInput
    disconnect?: CampaignWhereInput | boolean
    delete?: CampaignWhereInput | boolean
    connect?: CampaignWhereUniqueInput
    update?: XOR<XOR<CampaignUpdateToOneWithWhereWithoutEvent_templatesInput, CampaignUpdateWithoutEvent_templatesInput>, CampaignUncheckedUpdateWithoutEvent_templatesInput>
  }

  export type NodeCreateNestedManyWithoutEventsInput = {
    create?: XOR<NodeCreateWithoutEventsInput, NodeUncheckedCreateWithoutEventsInput> | NodeCreateWithoutEventsInput[] | NodeUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: NodeCreateOrConnectWithoutEventsInput | NodeCreateOrConnectWithoutEventsInput[]
    connect?: NodeWhereUniqueInput | NodeWhereUniqueInput[]
  }

  export type NodeUncheckedCreateNestedManyWithoutEventsInput = {
    create?: XOR<NodeCreateWithoutEventsInput, NodeUncheckedCreateWithoutEventsInput> | NodeCreateWithoutEventsInput[] | NodeUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: NodeCreateOrConnectWithoutEventsInput | NodeCreateOrConnectWithoutEventsInput[]
    connect?: NodeWhereUniqueInput | NodeWhereUniqueInput[]
  }

  export type NodeUpdateManyWithoutEventsNestedInput = {
    create?: XOR<NodeCreateWithoutEventsInput, NodeUncheckedCreateWithoutEventsInput> | NodeCreateWithoutEventsInput[] | NodeUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: NodeCreateOrConnectWithoutEventsInput | NodeCreateOrConnectWithoutEventsInput[]
    upsert?: NodeUpsertWithWhereUniqueWithoutEventsInput | NodeUpsertWithWhereUniqueWithoutEventsInput[]
    set?: NodeWhereUniqueInput | NodeWhereUniqueInput[]
    disconnect?: NodeWhereUniqueInput | NodeWhereUniqueInput[]
    delete?: NodeWhereUniqueInput | NodeWhereUniqueInput[]
    connect?: NodeWhereUniqueInput | NodeWhereUniqueInput[]
    update?: NodeUpdateWithWhereUniqueWithoutEventsInput | NodeUpdateWithWhereUniqueWithoutEventsInput[]
    updateMany?: NodeUpdateManyWithWhereWithoutEventsInput | NodeUpdateManyWithWhereWithoutEventsInput[]
    deleteMany?: NodeScalarWhereInput | NodeScalarWhereInput[]
  }

  export type NodeUncheckedUpdateManyWithoutEventsNestedInput = {
    create?: XOR<NodeCreateWithoutEventsInput, NodeUncheckedCreateWithoutEventsInput> | NodeCreateWithoutEventsInput[] | NodeUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: NodeCreateOrConnectWithoutEventsInput | NodeCreateOrConnectWithoutEventsInput[]
    upsert?: NodeUpsertWithWhereUniqueWithoutEventsInput | NodeUpsertWithWhereUniqueWithoutEventsInput[]
    set?: NodeWhereUniqueInput | NodeWhereUniqueInput[]
    disconnect?: NodeWhereUniqueInput | NodeWhereUniqueInput[]
    delete?: NodeWhereUniqueInput | NodeWhereUniqueInput[]
    connect?: NodeWhereUniqueInput | NodeWhereUniqueInput[]
    update?: NodeUpdateWithWhereUniqueWithoutEventsInput | NodeUpdateWithWhereUniqueWithoutEventsInput[]
    updateMany?: NodeUpdateManyWithWhereWithoutEventsInput | NodeUpdateManyWithWhereWithoutEventsInput[]
    deleteMany?: NodeScalarWhereInput | NodeScalarWhereInput[]
  }

  export type CampaignCreateNestedOneWithoutStatic_mapsInput = {
    create?: XOR<CampaignCreateWithoutStatic_mapsInput, CampaignUncheckedCreateWithoutStatic_mapsInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutStatic_mapsInput
    connect?: CampaignWhereUniqueInput
  }

  export type MapNodeCreateNestedManyWithoutMapInput = {
    create?: XOR<MapNodeCreateWithoutMapInput, MapNodeUncheckedCreateWithoutMapInput> | MapNodeCreateWithoutMapInput[] | MapNodeUncheckedCreateWithoutMapInput[]
    connectOrCreate?: MapNodeCreateOrConnectWithoutMapInput | MapNodeCreateOrConnectWithoutMapInput[]
    createMany?: MapNodeCreateManyMapInputEnvelope
    connect?: MapNodeWhereUniqueInput | MapNodeWhereUniqueInput[]
  }

  export type MapNodeUncheckedCreateNestedManyWithoutMapInput = {
    create?: XOR<MapNodeCreateWithoutMapInput, MapNodeUncheckedCreateWithoutMapInput> | MapNodeCreateWithoutMapInput[] | MapNodeUncheckedCreateWithoutMapInput[]
    connectOrCreate?: MapNodeCreateOrConnectWithoutMapInput | MapNodeCreateOrConnectWithoutMapInput[]
    createMany?: MapNodeCreateManyMapInputEnvelope
    connect?: MapNodeWhereUniqueInput | MapNodeWhereUniqueInput[]
  }

  export type CampaignUpdateOneWithoutStatic_mapsNestedInput = {
    create?: XOR<CampaignCreateWithoutStatic_mapsInput, CampaignUncheckedCreateWithoutStatic_mapsInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutStatic_mapsInput
    upsert?: CampaignUpsertWithoutStatic_mapsInput
    disconnect?: CampaignWhereInput | boolean
    delete?: CampaignWhereInput | boolean
    connect?: CampaignWhereUniqueInput
    update?: XOR<XOR<CampaignUpdateToOneWithWhereWithoutStatic_mapsInput, CampaignUpdateWithoutStatic_mapsInput>, CampaignUncheckedUpdateWithoutStatic_mapsInput>
  }

  export type MapNodeUpdateManyWithoutMapNestedInput = {
    create?: XOR<MapNodeCreateWithoutMapInput, MapNodeUncheckedCreateWithoutMapInput> | MapNodeCreateWithoutMapInput[] | MapNodeUncheckedCreateWithoutMapInput[]
    connectOrCreate?: MapNodeCreateOrConnectWithoutMapInput | MapNodeCreateOrConnectWithoutMapInput[]
    upsert?: MapNodeUpsertWithWhereUniqueWithoutMapInput | MapNodeUpsertWithWhereUniqueWithoutMapInput[]
    createMany?: MapNodeCreateManyMapInputEnvelope
    set?: MapNodeWhereUniqueInput | MapNodeWhereUniqueInput[]
    disconnect?: MapNodeWhereUniqueInput | MapNodeWhereUniqueInput[]
    delete?: MapNodeWhereUniqueInput | MapNodeWhereUniqueInput[]
    connect?: MapNodeWhereUniqueInput | MapNodeWhereUniqueInput[]
    update?: MapNodeUpdateWithWhereUniqueWithoutMapInput | MapNodeUpdateWithWhereUniqueWithoutMapInput[]
    updateMany?: MapNodeUpdateManyWithWhereWithoutMapInput | MapNodeUpdateManyWithWhereWithoutMapInput[]
    deleteMany?: MapNodeScalarWhereInput | MapNodeScalarWhereInput[]
  }

  export type MapNodeUncheckedUpdateManyWithoutMapNestedInput = {
    create?: XOR<MapNodeCreateWithoutMapInput, MapNodeUncheckedCreateWithoutMapInput> | MapNodeCreateWithoutMapInput[] | MapNodeUncheckedCreateWithoutMapInput[]
    connectOrCreate?: MapNodeCreateOrConnectWithoutMapInput | MapNodeCreateOrConnectWithoutMapInput[]
    upsert?: MapNodeUpsertWithWhereUniqueWithoutMapInput | MapNodeUpsertWithWhereUniqueWithoutMapInput[]
    createMany?: MapNodeCreateManyMapInputEnvelope
    set?: MapNodeWhereUniqueInput | MapNodeWhereUniqueInput[]
    disconnect?: MapNodeWhereUniqueInput | MapNodeWhereUniqueInput[]
    delete?: MapNodeWhereUniqueInput | MapNodeWhereUniqueInput[]
    connect?: MapNodeWhereUniqueInput | MapNodeWhereUniqueInput[]
    update?: MapNodeUpdateWithWhereUniqueWithoutMapInput | MapNodeUpdateWithWhereUniqueWithoutMapInput[]
    updateMany?: MapNodeUpdateManyWithWhereWithoutMapInput | MapNodeUpdateManyWithWhereWithoutMapInput[]
    deleteMany?: MapNodeScalarWhereInput | MapNodeScalarWhereInput[]
  }

  export type NodeTypeCreateallowed_attributesInput = {
    set: string[]
  }

  export type CampaignCreateNestedOneWithoutNode_typesInput = {
    create?: XOR<CampaignCreateWithoutNode_typesInput, CampaignUncheckedCreateWithoutNode_typesInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutNode_typesInput
    connect?: CampaignWhereUniqueInput
  }

  export type NodeCreateNestedManyWithoutNode_typeInput = {
    create?: XOR<NodeCreateWithoutNode_typeInput, NodeUncheckedCreateWithoutNode_typeInput> | NodeCreateWithoutNode_typeInput[] | NodeUncheckedCreateWithoutNode_typeInput[]
    connectOrCreate?: NodeCreateOrConnectWithoutNode_typeInput | NodeCreateOrConnectWithoutNode_typeInput[]
    createMany?: NodeCreateManyNode_typeInputEnvelope
    connect?: NodeWhereUniqueInput | NodeWhereUniqueInput[]
  }

  export type NodeUncheckedCreateNestedManyWithoutNode_typeInput = {
    create?: XOR<NodeCreateWithoutNode_typeInput, NodeUncheckedCreateWithoutNode_typeInput> | NodeCreateWithoutNode_typeInput[] | NodeUncheckedCreateWithoutNode_typeInput[]
    connectOrCreate?: NodeCreateOrConnectWithoutNode_typeInput | NodeCreateOrConnectWithoutNode_typeInput[]
    createMany?: NodeCreateManyNode_typeInputEnvelope
    connect?: NodeWhereUniqueInput | NodeWhereUniqueInput[]
  }

  export type NodeTypeUpdateallowed_attributesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CampaignUpdateOneRequiredWithoutNode_typesNestedInput = {
    create?: XOR<CampaignCreateWithoutNode_typesInput, CampaignUncheckedCreateWithoutNode_typesInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutNode_typesInput
    upsert?: CampaignUpsertWithoutNode_typesInput
    connect?: CampaignWhereUniqueInput
    update?: XOR<XOR<CampaignUpdateToOneWithWhereWithoutNode_typesInput, CampaignUpdateWithoutNode_typesInput>, CampaignUncheckedUpdateWithoutNode_typesInput>
  }

  export type NodeUpdateManyWithoutNode_typeNestedInput = {
    create?: XOR<NodeCreateWithoutNode_typeInput, NodeUncheckedCreateWithoutNode_typeInput> | NodeCreateWithoutNode_typeInput[] | NodeUncheckedCreateWithoutNode_typeInput[]
    connectOrCreate?: NodeCreateOrConnectWithoutNode_typeInput | NodeCreateOrConnectWithoutNode_typeInput[]
    upsert?: NodeUpsertWithWhereUniqueWithoutNode_typeInput | NodeUpsertWithWhereUniqueWithoutNode_typeInput[]
    createMany?: NodeCreateManyNode_typeInputEnvelope
    set?: NodeWhereUniqueInput | NodeWhereUniqueInput[]
    disconnect?: NodeWhereUniqueInput | NodeWhereUniqueInput[]
    delete?: NodeWhereUniqueInput | NodeWhereUniqueInput[]
    connect?: NodeWhereUniqueInput | NodeWhereUniqueInput[]
    update?: NodeUpdateWithWhereUniqueWithoutNode_typeInput | NodeUpdateWithWhereUniqueWithoutNode_typeInput[]
    updateMany?: NodeUpdateManyWithWhereWithoutNode_typeInput | NodeUpdateManyWithWhereWithoutNode_typeInput[]
    deleteMany?: NodeScalarWhereInput | NodeScalarWhereInput[]
  }

  export type NodeUncheckedUpdateManyWithoutNode_typeNestedInput = {
    create?: XOR<NodeCreateWithoutNode_typeInput, NodeUncheckedCreateWithoutNode_typeInput> | NodeCreateWithoutNode_typeInput[] | NodeUncheckedCreateWithoutNode_typeInput[]
    connectOrCreate?: NodeCreateOrConnectWithoutNode_typeInput | NodeCreateOrConnectWithoutNode_typeInput[]
    upsert?: NodeUpsertWithWhereUniqueWithoutNode_typeInput | NodeUpsertWithWhereUniqueWithoutNode_typeInput[]
    createMany?: NodeCreateManyNode_typeInputEnvelope
    set?: NodeWhereUniqueInput | NodeWhereUniqueInput[]
    disconnect?: NodeWhereUniqueInput | NodeWhereUniqueInput[]
    delete?: NodeWhereUniqueInput | NodeWhereUniqueInput[]
    connect?: NodeWhereUniqueInput | NodeWhereUniqueInput[]
    update?: NodeUpdateWithWhereUniqueWithoutNode_typeInput | NodeUpdateWithWhereUniqueWithoutNode_typeInput[]
    updateMany?: NodeUpdateManyWithWhereWithoutNode_typeInput | NodeUpdateManyWithWhereWithoutNode_typeInput[]
    deleteMany?: NodeScalarWhereInput | NodeScalarWhereInput[]
  }

  export type NodeCreateNestedOneWithoutAttributesInput = {
    create?: XOR<NodeCreateWithoutAttributesInput, NodeUncheckedCreateWithoutAttributesInput>
    connectOrCreate?: NodeCreateOrConnectWithoutAttributesInput
    connect?: NodeWhereUniqueInput
  }

  export type NodeUpdateOneRequiredWithoutAttributesNestedInput = {
    create?: XOR<NodeCreateWithoutAttributesInput, NodeUncheckedCreateWithoutAttributesInput>
    connectOrCreate?: NodeCreateOrConnectWithoutAttributesInput
    upsert?: NodeUpsertWithoutAttributesInput
    connect?: NodeWhereUniqueInput
    update?: XOR<XOR<NodeUpdateToOneWithWhereWithoutAttributesInput, NodeUpdateWithoutAttributesInput>, NodeUncheckedUpdateWithoutAttributesInput>
  }

  export type AttributeCreateNestedManyWithoutNodesInput = {
    create?: XOR<AttributeCreateWithoutNodesInput, AttributeUncheckedCreateWithoutNodesInput> | AttributeCreateWithoutNodesInput[] | AttributeUncheckedCreateWithoutNodesInput[]
    connectOrCreate?: AttributeCreateOrConnectWithoutNodesInput | AttributeCreateOrConnectWithoutNodesInput[]
    createMany?: AttributeCreateManyNodesInputEnvelope
    connect?: AttributeWhereUniqueInput | AttributeWhereUniqueInput[]
  }

  export type EventCreateNestedManyWithoutNodesInput = {
    create?: XOR<EventCreateWithoutNodesInput, EventUncheckedCreateWithoutNodesInput> | EventCreateWithoutNodesInput[] | EventUncheckedCreateWithoutNodesInput[]
    connectOrCreate?: EventCreateOrConnectWithoutNodesInput | EventCreateOrConnectWithoutNodesInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type CampaignCreateNestedOneWithoutNodesInput = {
    create?: XOR<CampaignCreateWithoutNodesInput, CampaignUncheckedCreateWithoutNodesInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutNodesInput
    connect?: CampaignWhereUniqueInput
  }

  export type NodeRelationshipCreateNestedManyWithoutOutgoing_relationsInput = {
    create?: XOR<NodeRelationshipCreateWithoutOutgoing_relationsInput, NodeRelationshipUncheckedCreateWithoutOutgoing_relationsInput> | NodeRelationshipCreateWithoutOutgoing_relationsInput[] | NodeRelationshipUncheckedCreateWithoutOutgoing_relationsInput[]
    connectOrCreate?: NodeRelationshipCreateOrConnectWithoutOutgoing_relationsInput | NodeRelationshipCreateOrConnectWithoutOutgoing_relationsInput[]
    createMany?: NodeRelationshipCreateManyOutgoing_relationsInputEnvelope
    connect?: NodeRelationshipWhereUniqueInput | NodeRelationshipWhereUniqueInput[]
  }

  export type NodeRelationshipCreateNestedManyWithoutIncoming_relationsInput = {
    create?: XOR<NodeRelationshipCreateWithoutIncoming_relationsInput, NodeRelationshipUncheckedCreateWithoutIncoming_relationsInput> | NodeRelationshipCreateWithoutIncoming_relationsInput[] | NodeRelationshipUncheckedCreateWithoutIncoming_relationsInput[]
    connectOrCreate?: NodeRelationshipCreateOrConnectWithoutIncoming_relationsInput | NodeRelationshipCreateOrConnectWithoutIncoming_relationsInput[]
    createMany?: NodeRelationshipCreateManyIncoming_relationsInputEnvelope
    connect?: NodeRelationshipWhereUniqueInput | NodeRelationshipWhereUniqueInput[]
  }

  export type NodeTypeCreateNestedOneWithoutNodesInput = {
    create?: XOR<NodeTypeCreateWithoutNodesInput, NodeTypeUncheckedCreateWithoutNodesInput>
    connectOrCreate?: NodeTypeCreateOrConnectWithoutNodesInput
    connect?: NodeTypeWhereUniqueInput
  }

  export type MapNodeCreateNestedManyWithoutNodeInput = {
    create?: XOR<MapNodeCreateWithoutNodeInput, MapNodeUncheckedCreateWithoutNodeInput> | MapNodeCreateWithoutNodeInput[] | MapNodeUncheckedCreateWithoutNodeInput[]
    connectOrCreate?: MapNodeCreateOrConnectWithoutNodeInput | MapNodeCreateOrConnectWithoutNodeInput[]
    createMany?: MapNodeCreateManyNodeInputEnvelope
    connect?: MapNodeWhereUniqueInput | MapNodeWhereUniqueInput[]
  }

  export type AttributeUncheckedCreateNestedManyWithoutNodesInput = {
    create?: XOR<AttributeCreateWithoutNodesInput, AttributeUncheckedCreateWithoutNodesInput> | AttributeCreateWithoutNodesInput[] | AttributeUncheckedCreateWithoutNodesInput[]
    connectOrCreate?: AttributeCreateOrConnectWithoutNodesInput | AttributeCreateOrConnectWithoutNodesInput[]
    createMany?: AttributeCreateManyNodesInputEnvelope
    connect?: AttributeWhereUniqueInput | AttributeWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutNodesInput = {
    create?: XOR<EventCreateWithoutNodesInput, EventUncheckedCreateWithoutNodesInput> | EventCreateWithoutNodesInput[] | EventUncheckedCreateWithoutNodesInput[]
    connectOrCreate?: EventCreateOrConnectWithoutNodesInput | EventCreateOrConnectWithoutNodesInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type NodeRelationshipUncheckedCreateNestedManyWithoutOutgoing_relationsInput = {
    create?: XOR<NodeRelationshipCreateWithoutOutgoing_relationsInput, NodeRelationshipUncheckedCreateWithoutOutgoing_relationsInput> | NodeRelationshipCreateWithoutOutgoing_relationsInput[] | NodeRelationshipUncheckedCreateWithoutOutgoing_relationsInput[]
    connectOrCreate?: NodeRelationshipCreateOrConnectWithoutOutgoing_relationsInput | NodeRelationshipCreateOrConnectWithoutOutgoing_relationsInput[]
    createMany?: NodeRelationshipCreateManyOutgoing_relationsInputEnvelope
    connect?: NodeRelationshipWhereUniqueInput | NodeRelationshipWhereUniqueInput[]
  }

  export type NodeRelationshipUncheckedCreateNestedManyWithoutIncoming_relationsInput = {
    create?: XOR<NodeRelationshipCreateWithoutIncoming_relationsInput, NodeRelationshipUncheckedCreateWithoutIncoming_relationsInput> | NodeRelationshipCreateWithoutIncoming_relationsInput[] | NodeRelationshipUncheckedCreateWithoutIncoming_relationsInput[]
    connectOrCreate?: NodeRelationshipCreateOrConnectWithoutIncoming_relationsInput | NodeRelationshipCreateOrConnectWithoutIncoming_relationsInput[]
    createMany?: NodeRelationshipCreateManyIncoming_relationsInputEnvelope
    connect?: NodeRelationshipWhereUniqueInput | NodeRelationshipWhereUniqueInput[]
  }

  export type MapNodeUncheckedCreateNestedManyWithoutNodeInput = {
    create?: XOR<MapNodeCreateWithoutNodeInput, MapNodeUncheckedCreateWithoutNodeInput> | MapNodeCreateWithoutNodeInput[] | MapNodeUncheckedCreateWithoutNodeInput[]
    connectOrCreate?: MapNodeCreateOrConnectWithoutNodeInput | MapNodeCreateOrConnectWithoutNodeInput[]
    createMany?: MapNodeCreateManyNodeInputEnvelope
    connect?: MapNodeWhereUniqueInput | MapNodeWhereUniqueInput[]
  }

  export type AttributeUpdateManyWithoutNodesNestedInput = {
    create?: XOR<AttributeCreateWithoutNodesInput, AttributeUncheckedCreateWithoutNodesInput> | AttributeCreateWithoutNodesInput[] | AttributeUncheckedCreateWithoutNodesInput[]
    connectOrCreate?: AttributeCreateOrConnectWithoutNodesInput | AttributeCreateOrConnectWithoutNodesInput[]
    upsert?: AttributeUpsertWithWhereUniqueWithoutNodesInput | AttributeUpsertWithWhereUniqueWithoutNodesInput[]
    createMany?: AttributeCreateManyNodesInputEnvelope
    set?: AttributeWhereUniqueInput | AttributeWhereUniqueInput[]
    disconnect?: AttributeWhereUniqueInput | AttributeWhereUniqueInput[]
    delete?: AttributeWhereUniqueInput | AttributeWhereUniqueInput[]
    connect?: AttributeWhereUniqueInput | AttributeWhereUniqueInput[]
    update?: AttributeUpdateWithWhereUniqueWithoutNodesInput | AttributeUpdateWithWhereUniqueWithoutNodesInput[]
    updateMany?: AttributeUpdateManyWithWhereWithoutNodesInput | AttributeUpdateManyWithWhereWithoutNodesInput[]
    deleteMany?: AttributeScalarWhereInput | AttributeScalarWhereInput[]
  }

  export type EventUpdateManyWithoutNodesNestedInput = {
    create?: XOR<EventCreateWithoutNodesInput, EventUncheckedCreateWithoutNodesInput> | EventCreateWithoutNodesInput[] | EventUncheckedCreateWithoutNodesInput[]
    connectOrCreate?: EventCreateOrConnectWithoutNodesInput | EventCreateOrConnectWithoutNodesInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutNodesInput | EventUpsertWithWhereUniqueWithoutNodesInput[]
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutNodesInput | EventUpdateWithWhereUniqueWithoutNodesInput[]
    updateMany?: EventUpdateManyWithWhereWithoutNodesInput | EventUpdateManyWithWhereWithoutNodesInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type CampaignUpdateOneWithoutNodesNestedInput = {
    create?: XOR<CampaignCreateWithoutNodesInput, CampaignUncheckedCreateWithoutNodesInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutNodesInput
    upsert?: CampaignUpsertWithoutNodesInput
    disconnect?: CampaignWhereInput | boolean
    delete?: CampaignWhereInput | boolean
    connect?: CampaignWhereUniqueInput
    update?: XOR<XOR<CampaignUpdateToOneWithWhereWithoutNodesInput, CampaignUpdateWithoutNodesInput>, CampaignUncheckedUpdateWithoutNodesInput>
  }

  export type NodeRelationshipUpdateManyWithoutOutgoing_relationsNestedInput = {
    create?: XOR<NodeRelationshipCreateWithoutOutgoing_relationsInput, NodeRelationshipUncheckedCreateWithoutOutgoing_relationsInput> | NodeRelationshipCreateWithoutOutgoing_relationsInput[] | NodeRelationshipUncheckedCreateWithoutOutgoing_relationsInput[]
    connectOrCreate?: NodeRelationshipCreateOrConnectWithoutOutgoing_relationsInput | NodeRelationshipCreateOrConnectWithoutOutgoing_relationsInput[]
    upsert?: NodeRelationshipUpsertWithWhereUniqueWithoutOutgoing_relationsInput | NodeRelationshipUpsertWithWhereUniqueWithoutOutgoing_relationsInput[]
    createMany?: NodeRelationshipCreateManyOutgoing_relationsInputEnvelope
    set?: NodeRelationshipWhereUniqueInput | NodeRelationshipWhereUniqueInput[]
    disconnect?: NodeRelationshipWhereUniqueInput | NodeRelationshipWhereUniqueInput[]
    delete?: NodeRelationshipWhereUniqueInput | NodeRelationshipWhereUniqueInput[]
    connect?: NodeRelationshipWhereUniqueInput | NodeRelationshipWhereUniqueInput[]
    update?: NodeRelationshipUpdateWithWhereUniqueWithoutOutgoing_relationsInput | NodeRelationshipUpdateWithWhereUniqueWithoutOutgoing_relationsInput[]
    updateMany?: NodeRelationshipUpdateManyWithWhereWithoutOutgoing_relationsInput | NodeRelationshipUpdateManyWithWhereWithoutOutgoing_relationsInput[]
    deleteMany?: NodeRelationshipScalarWhereInput | NodeRelationshipScalarWhereInput[]
  }

  export type NodeRelationshipUpdateManyWithoutIncoming_relationsNestedInput = {
    create?: XOR<NodeRelationshipCreateWithoutIncoming_relationsInput, NodeRelationshipUncheckedCreateWithoutIncoming_relationsInput> | NodeRelationshipCreateWithoutIncoming_relationsInput[] | NodeRelationshipUncheckedCreateWithoutIncoming_relationsInput[]
    connectOrCreate?: NodeRelationshipCreateOrConnectWithoutIncoming_relationsInput | NodeRelationshipCreateOrConnectWithoutIncoming_relationsInput[]
    upsert?: NodeRelationshipUpsertWithWhereUniqueWithoutIncoming_relationsInput | NodeRelationshipUpsertWithWhereUniqueWithoutIncoming_relationsInput[]
    createMany?: NodeRelationshipCreateManyIncoming_relationsInputEnvelope
    set?: NodeRelationshipWhereUniqueInput | NodeRelationshipWhereUniqueInput[]
    disconnect?: NodeRelationshipWhereUniqueInput | NodeRelationshipWhereUniqueInput[]
    delete?: NodeRelationshipWhereUniqueInput | NodeRelationshipWhereUniqueInput[]
    connect?: NodeRelationshipWhereUniqueInput | NodeRelationshipWhereUniqueInput[]
    update?: NodeRelationshipUpdateWithWhereUniqueWithoutIncoming_relationsInput | NodeRelationshipUpdateWithWhereUniqueWithoutIncoming_relationsInput[]
    updateMany?: NodeRelationshipUpdateManyWithWhereWithoutIncoming_relationsInput | NodeRelationshipUpdateManyWithWhereWithoutIncoming_relationsInput[]
    deleteMany?: NodeRelationshipScalarWhereInput | NodeRelationshipScalarWhereInput[]
  }

  export type NodeTypeUpdateOneWithoutNodesNestedInput = {
    create?: XOR<NodeTypeCreateWithoutNodesInput, NodeTypeUncheckedCreateWithoutNodesInput>
    connectOrCreate?: NodeTypeCreateOrConnectWithoutNodesInput
    upsert?: NodeTypeUpsertWithoutNodesInput
    disconnect?: NodeTypeWhereInput | boolean
    delete?: NodeTypeWhereInput | boolean
    connect?: NodeTypeWhereUniqueInput
    update?: XOR<XOR<NodeTypeUpdateToOneWithWhereWithoutNodesInput, NodeTypeUpdateWithoutNodesInput>, NodeTypeUncheckedUpdateWithoutNodesInput>
  }

  export type MapNodeUpdateManyWithoutNodeNestedInput = {
    create?: XOR<MapNodeCreateWithoutNodeInput, MapNodeUncheckedCreateWithoutNodeInput> | MapNodeCreateWithoutNodeInput[] | MapNodeUncheckedCreateWithoutNodeInput[]
    connectOrCreate?: MapNodeCreateOrConnectWithoutNodeInput | MapNodeCreateOrConnectWithoutNodeInput[]
    upsert?: MapNodeUpsertWithWhereUniqueWithoutNodeInput | MapNodeUpsertWithWhereUniqueWithoutNodeInput[]
    createMany?: MapNodeCreateManyNodeInputEnvelope
    set?: MapNodeWhereUniqueInput | MapNodeWhereUniqueInput[]
    disconnect?: MapNodeWhereUniqueInput | MapNodeWhereUniqueInput[]
    delete?: MapNodeWhereUniqueInput | MapNodeWhereUniqueInput[]
    connect?: MapNodeWhereUniqueInput | MapNodeWhereUniqueInput[]
    update?: MapNodeUpdateWithWhereUniqueWithoutNodeInput | MapNodeUpdateWithWhereUniqueWithoutNodeInput[]
    updateMany?: MapNodeUpdateManyWithWhereWithoutNodeInput | MapNodeUpdateManyWithWhereWithoutNodeInput[]
    deleteMany?: MapNodeScalarWhereInput | MapNodeScalarWhereInput[]
  }

  export type AttributeUncheckedUpdateManyWithoutNodesNestedInput = {
    create?: XOR<AttributeCreateWithoutNodesInput, AttributeUncheckedCreateWithoutNodesInput> | AttributeCreateWithoutNodesInput[] | AttributeUncheckedCreateWithoutNodesInput[]
    connectOrCreate?: AttributeCreateOrConnectWithoutNodesInput | AttributeCreateOrConnectWithoutNodesInput[]
    upsert?: AttributeUpsertWithWhereUniqueWithoutNodesInput | AttributeUpsertWithWhereUniqueWithoutNodesInput[]
    createMany?: AttributeCreateManyNodesInputEnvelope
    set?: AttributeWhereUniqueInput | AttributeWhereUniqueInput[]
    disconnect?: AttributeWhereUniqueInput | AttributeWhereUniqueInput[]
    delete?: AttributeWhereUniqueInput | AttributeWhereUniqueInput[]
    connect?: AttributeWhereUniqueInput | AttributeWhereUniqueInput[]
    update?: AttributeUpdateWithWhereUniqueWithoutNodesInput | AttributeUpdateWithWhereUniqueWithoutNodesInput[]
    updateMany?: AttributeUpdateManyWithWhereWithoutNodesInput | AttributeUpdateManyWithWhereWithoutNodesInput[]
    deleteMany?: AttributeScalarWhereInput | AttributeScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutNodesNestedInput = {
    create?: XOR<EventCreateWithoutNodesInput, EventUncheckedCreateWithoutNodesInput> | EventCreateWithoutNodesInput[] | EventUncheckedCreateWithoutNodesInput[]
    connectOrCreate?: EventCreateOrConnectWithoutNodesInput | EventCreateOrConnectWithoutNodesInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutNodesInput | EventUpsertWithWhereUniqueWithoutNodesInput[]
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutNodesInput | EventUpdateWithWhereUniqueWithoutNodesInput[]
    updateMany?: EventUpdateManyWithWhereWithoutNodesInput | EventUpdateManyWithWhereWithoutNodesInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type NodeRelationshipUncheckedUpdateManyWithoutOutgoing_relationsNestedInput = {
    create?: XOR<NodeRelationshipCreateWithoutOutgoing_relationsInput, NodeRelationshipUncheckedCreateWithoutOutgoing_relationsInput> | NodeRelationshipCreateWithoutOutgoing_relationsInput[] | NodeRelationshipUncheckedCreateWithoutOutgoing_relationsInput[]
    connectOrCreate?: NodeRelationshipCreateOrConnectWithoutOutgoing_relationsInput | NodeRelationshipCreateOrConnectWithoutOutgoing_relationsInput[]
    upsert?: NodeRelationshipUpsertWithWhereUniqueWithoutOutgoing_relationsInput | NodeRelationshipUpsertWithWhereUniqueWithoutOutgoing_relationsInput[]
    createMany?: NodeRelationshipCreateManyOutgoing_relationsInputEnvelope
    set?: NodeRelationshipWhereUniqueInput | NodeRelationshipWhereUniqueInput[]
    disconnect?: NodeRelationshipWhereUniqueInput | NodeRelationshipWhereUniqueInput[]
    delete?: NodeRelationshipWhereUniqueInput | NodeRelationshipWhereUniqueInput[]
    connect?: NodeRelationshipWhereUniqueInput | NodeRelationshipWhereUniqueInput[]
    update?: NodeRelationshipUpdateWithWhereUniqueWithoutOutgoing_relationsInput | NodeRelationshipUpdateWithWhereUniqueWithoutOutgoing_relationsInput[]
    updateMany?: NodeRelationshipUpdateManyWithWhereWithoutOutgoing_relationsInput | NodeRelationshipUpdateManyWithWhereWithoutOutgoing_relationsInput[]
    deleteMany?: NodeRelationshipScalarWhereInput | NodeRelationshipScalarWhereInput[]
  }

  export type NodeRelationshipUncheckedUpdateManyWithoutIncoming_relationsNestedInput = {
    create?: XOR<NodeRelationshipCreateWithoutIncoming_relationsInput, NodeRelationshipUncheckedCreateWithoutIncoming_relationsInput> | NodeRelationshipCreateWithoutIncoming_relationsInput[] | NodeRelationshipUncheckedCreateWithoutIncoming_relationsInput[]
    connectOrCreate?: NodeRelationshipCreateOrConnectWithoutIncoming_relationsInput | NodeRelationshipCreateOrConnectWithoutIncoming_relationsInput[]
    upsert?: NodeRelationshipUpsertWithWhereUniqueWithoutIncoming_relationsInput | NodeRelationshipUpsertWithWhereUniqueWithoutIncoming_relationsInput[]
    createMany?: NodeRelationshipCreateManyIncoming_relationsInputEnvelope
    set?: NodeRelationshipWhereUniqueInput | NodeRelationshipWhereUniqueInput[]
    disconnect?: NodeRelationshipWhereUniqueInput | NodeRelationshipWhereUniqueInput[]
    delete?: NodeRelationshipWhereUniqueInput | NodeRelationshipWhereUniqueInput[]
    connect?: NodeRelationshipWhereUniqueInput | NodeRelationshipWhereUniqueInput[]
    update?: NodeRelationshipUpdateWithWhereUniqueWithoutIncoming_relationsInput | NodeRelationshipUpdateWithWhereUniqueWithoutIncoming_relationsInput[]
    updateMany?: NodeRelationshipUpdateManyWithWhereWithoutIncoming_relationsInput | NodeRelationshipUpdateManyWithWhereWithoutIncoming_relationsInput[]
    deleteMany?: NodeRelationshipScalarWhereInput | NodeRelationshipScalarWhereInput[]
  }

  export type MapNodeUncheckedUpdateManyWithoutNodeNestedInput = {
    create?: XOR<MapNodeCreateWithoutNodeInput, MapNodeUncheckedCreateWithoutNodeInput> | MapNodeCreateWithoutNodeInput[] | MapNodeUncheckedCreateWithoutNodeInput[]
    connectOrCreate?: MapNodeCreateOrConnectWithoutNodeInput | MapNodeCreateOrConnectWithoutNodeInput[]
    upsert?: MapNodeUpsertWithWhereUniqueWithoutNodeInput | MapNodeUpsertWithWhereUniqueWithoutNodeInput[]
    createMany?: MapNodeCreateManyNodeInputEnvelope
    set?: MapNodeWhereUniqueInput | MapNodeWhereUniqueInput[]
    disconnect?: MapNodeWhereUniqueInput | MapNodeWhereUniqueInput[]
    delete?: MapNodeWhereUniqueInput | MapNodeWhereUniqueInput[]
    connect?: MapNodeWhereUniqueInput | MapNodeWhereUniqueInput[]
    update?: MapNodeUpdateWithWhereUniqueWithoutNodeInput | MapNodeUpdateWithWhereUniqueWithoutNodeInput[]
    updateMany?: MapNodeUpdateManyWithWhereWithoutNodeInput | MapNodeUpdateManyWithWhereWithoutNodeInput[]
    deleteMany?: MapNodeScalarWhereInput | MapNodeScalarWhereInput[]
  }

  export type MapNodeCreatecoordinatesInput = {
    set: number[]
  }

  export type StaticMapCreateNestedOneWithoutMap_nodesInput = {
    create?: XOR<StaticMapCreateWithoutMap_nodesInput, StaticMapUncheckedCreateWithoutMap_nodesInput>
    connectOrCreate?: StaticMapCreateOrConnectWithoutMap_nodesInput
    connect?: StaticMapWhereUniqueInput
  }

  export type NodeCreateNestedOneWithoutMap_nodeInput = {
    create?: XOR<NodeCreateWithoutMap_nodeInput, NodeUncheckedCreateWithoutMap_nodeInput>
    connectOrCreate?: NodeCreateOrConnectWithoutMap_nodeInput
    connect?: NodeWhereUniqueInput
  }

  export type MapNodeUpdatecoordinatesInput = {
    set?: number[]
    push?: number | number[]
  }

  export type StaticMapUpdateOneRequiredWithoutMap_nodesNestedInput = {
    create?: XOR<StaticMapCreateWithoutMap_nodesInput, StaticMapUncheckedCreateWithoutMap_nodesInput>
    connectOrCreate?: StaticMapCreateOrConnectWithoutMap_nodesInput
    upsert?: StaticMapUpsertWithoutMap_nodesInput
    connect?: StaticMapWhereUniqueInput
    update?: XOR<XOR<StaticMapUpdateToOneWithWhereWithoutMap_nodesInput, StaticMapUpdateWithoutMap_nodesInput>, StaticMapUncheckedUpdateWithoutMap_nodesInput>
  }

  export type NodeUpdateOneWithoutMap_nodeNestedInput = {
    create?: XOR<NodeCreateWithoutMap_nodeInput, NodeUncheckedCreateWithoutMap_nodeInput>
    connectOrCreate?: NodeCreateOrConnectWithoutMap_nodeInput
    upsert?: NodeUpsertWithoutMap_nodeInput
    disconnect?: NodeWhereInput | boolean
    delete?: NodeWhereInput | boolean
    connect?: NodeWhereUniqueInput
    update?: XOR<XOR<NodeUpdateToOneWithWhereWithoutMap_nodeInput, NodeUpdateWithoutMap_nodeInput>, NodeUncheckedUpdateWithoutMap_nodeInput>
  }

  export type NodeCreateNestedOneWithoutOutgoing_relationsInput = {
    create?: XOR<NodeCreateWithoutOutgoing_relationsInput, NodeUncheckedCreateWithoutOutgoing_relationsInput>
    connectOrCreate?: NodeCreateOrConnectWithoutOutgoing_relationsInput
    connect?: NodeWhereUniqueInput
  }

  export type NodeCreateNestedOneWithoutIncoming_relationsInput = {
    create?: XOR<NodeCreateWithoutIncoming_relationsInput, NodeUncheckedCreateWithoutIncoming_relationsInput>
    connectOrCreate?: NodeCreateOrConnectWithoutIncoming_relationsInput
    connect?: NodeWhereUniqueInput
  }

  export type NodeUpdateOneRequiredWithoutOutgoing_relationsNestedInput = {
    create?: XOR<NodeCreateWithoutOutgoing_relationsInput, NodeUncheckedCreateWithoutOutgoing_relationsInput>
    connectOrCreate?: NodeCreateOrConnectWithoutOutgoing_relationsInput
    upsert?: NodeUpsertWithoutOutgoing_relationsInput
    connect?: NodeWhereUniqueInput
    update?: XOR<XOR<NodeUpdateToOneWithWhereWithoutOutgoing_relationsInput, NodeUpdateWithoutOutgoing_relationsInput>, NodeUncheckedUpdateWithoutOutgoing_relationsInput>
  }

  export type NodeUpdateOneRequiredWithoutIncoming_relationsNestedInput = {
    create?: XOR<NodeCreateWithoutIncoming_relationsInput, NodeUncheckedCreateWithoutIncoming_relationsInput>
    connectOrCreate?: NodeCreateOrConnectWithoutIncoming_relationsInput
    upsert?: NodeUpsertWithoutIncoming_relationsInput
    connect?: NodeWhereUniqueInput
    update?: XOR<XOR<NodeUpdateToOneWithWhereWithoutIncoming_relationsInput, NodeUpdateWithoutIncoming_relationsInput>, NodeUncheckedUpdateWithoutIncoming_relationsInput>
  }

  export type CampaignCreateNestedOneWithoutSession_recapsInput = {
    create?: XOR<CampaignCreateWithoutSession_recapsInput, CampaignUncheckedCreateWithoutSession_recapsInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutSession_recapsInput
    connect?: CampaignWhereUniqueInput
  }

  export type CampaignUpdateOneWithoutSession_recapsNestedInput = {
    create?: XOR<CampaignCreateWithoutSession_recapsInput, CampaignUncheckedCreateWithoutSession_recapsInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutSession_recapsInput
    upsert?: CampaignUpsertWithoutSession_recapsInput
    disconnect?: CampaignWhereInput | boolean
    delete?: CampaignWhereInput | boolean
    connect?: CampaignWhereUniqueInput
    update?: XOR<XOR<CampaignUpdateToOneWithWhereWithoutSession_recapsInput, CampaignUpdateWithoutSession_recapsInput>, CampaignUncheckedUpdateWithoutSession_recapsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    updated_on?: Date | string | null
    role?: string
    sessions?: SessionCreateNestedManyWithoutUserInput
    campaigns?: CampaignCreateNestedManyWithoutUsersInput
    user_campaigns?: UserCampaignCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    updated_on?: Date | string | null
    role?: string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    campaigns?: CampaignUncheckedCreateNestedManyWithoutUsersInput
    user_campaigns?: UserCampaignUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    updated_on?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: StringFieldUpdateOperationsInput | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    campaigns?: CampaignUpdateManyWithoutUsersNestedInput
    user_campaigns?: UserCampaignUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    updated_on?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: StringFieldUpdateOperationsInput | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    campaigns?: CampaignUncheckedUpdateManyWithoutUsersNestedInput
    user_campaigns?: UserCampaignUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    updated_on?: Date | string | null
    role?: string
    accounts?: AccountCreateNestedManyWithoutUserInput
    campaigns?: CampaignCreateNestedManyWithoutUsersInput
    user_campaigns?: UserCampaignCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    updated_on?: Date | string | null
    role?: string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    campaigns?: CampaignUncheckedCreateNestedManyWithoutUsersInput
    user_campaigns?: UserCampaignUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    updated_on?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: StringFieldUpdateOperationsInput | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    campaigns?: CampaignUpdateManyWithoutUsersNestedInput
    user_campaigns?: UserCampaignUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    updated_on?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: StringFieldUpdateOperationsInput | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    campaigns?: CampaignUncheckedUpdateManyWithoutUsersNestedInput
    user_campaigns?: UserCampaignUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CampaignCreateWithoutUsersInput = {
    campaign_id?: string
    title: string
    description: string
    image?: string | null
    header_image?: string | null
    allow_ai_events?: boolean
    overview_map_id?: string | null
    created_on?: Date | string
    node_types?: NodeTypeCreateNestedManyWithoutCampaignInput
    static_maps?: StaticMapCreateNestedManyWithoutCampaignInput
    session_recaps?: SessionRecapCreateNestedManyWithoutCampaignInput
    nodes?: NodeCreateNestedManyWithoutCampaignInput
    event_templates?: EventTemplateCreateNestedManyWithoutCampaignInput
    event_publish_provider?: EventPublishProviderCreateNestedManyWithoutCampaignInput
    user_campaigns?: UserCampaignCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUncheckedCreateWithoutUsersInput = {
    campaign_id?: string
    title: string
    description: string
    image?: string | null
    header_image?: string | null
    allow_ai_events?: boolean
    overview_map_id?: string | null
    created_on?: Date | string
    node_types?: NodeTypeUncheckedCreateNestedManyWithoutCampaignInput
    static_maps?: StaticMapUncheckedCreateNestedManyWithoutCampaignInput
    session_recaps?: SessionRecapUncheckedCreateNestedManyWithoutCampaignInput
    nodes?: NodeUncheckedCreateNestedManyWithoutCampaignInput
    event_templates?: EventTemplateUncheckedCreateNestedManyWithoutCampaignInput
    event_publish_provider?: EventPublishProviderUncheckedCreateNestedManyWithoutCampaignInput
    user_campaigns?: UserCampaignUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignCreateOrConnectWithoutUsersInput = {
    where: CampaignWhereUniqueInput
    create: XOR<CampaignCreateWithoutUsersInput, CampaignUncheckedCreateWithoutUsersInput>
  }

  export type UserCampaignCreateWithoutUserInput = {
    user_campaign_id?: string
    created_on?: Date | string
    updated_on?: Date | string
    last_visited_on?: Date | string
    campaign: CampaignCreateNestedOneWithoutUser_campaignsInput
  }

  export type UserCampaignUncheckedCreateWithoutUserInput = {
    user_campaign_id?: string
    campaign_id: string
    created_on?: Date | string
    updated_on?: Date | string
    last_visited_on?: Date | string
  }

  export type UserCampaignCreateOrConnectWithoutUserInput = {
    where: UserCampaignWhereUniqueInput
    create: XOR<UserCampaignCreateWithoutUserInput, UserCampaignUncheckedCreateWithoutUserInput>
  }

  export type UserCampaignCreateManyUserInputEnvelope = {
    data: UserCampaignCreateManyUserInput | UserCampaignCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
  }

  export type CampaignUpsertWithWhereUniqueWithoutUsersInput = {
    where: CampaignWhereUniqueInput
    update: XOR<CampaignUpdateWithoutUsersInput, CampaignUncheckedUpdateWithoutUsersInput>
    create: XOR<CampaignCreateWithoutUsersInput, CampaignUncheckedCreateWithoutUsersInput>
  }

  export type CampaignUpdateWithWhereUniqueWithoutUsersInput = {
    where: CampaignWhereUniqueInput
    data: XOR<CampaignUpdateWithoutUsersInput, CampaignUncheckedUpdateWithoutUsersInput>
  }

  export type CampaignUpdateManyWithWhereWithoutUsersInput = {
    where: CampaignScalarWhereInput
    data: XOR<CampaignUpdateManyMutationInput, CampaignUncheckedUpdateManyWithoutUsersInput>
  }

  export type CampaignScalarWhereInput = {
    AND?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
    OR?: CampaignScalarWhereInput[]
    NOT?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
    campaign_id?: StringFilter<"Campaign"> | string
    title?: StringFilter<"Campaign"> | string
    description?: StringFilter<"Campaign"> | string
    image?: StringNullableFilter<"Campaign"> | string | null
    header_image?: StringNullableFilter<"Campaign"> | string | null
    allow_ai_events?: BoolFilter<"Campaign"> | boolean
    overview_map_id?: StringNullableFilter<"Campaign"> | string | null
    created_on?: DateTimeFilter<"Campaign"> | Date | string
  }

  export type UserCampaignUpsertWithWhereUniqueWithoutUserInput = {
    where: UserCampaignWhereUniqueInput
    update: XOR<UserCampaignUpdateWithoutUserInput, UserCampaignUncheckedUpdateWithoutUserInput>
    create: XOR<UserCampaignCreateWithoutUserInput, UserCampaignUncheckedCreateWithoutUserInput>
  }

  export type UserCampaignUpdateWithWhereUniqueWithoutUserInput = {
    where: UserCampaignWhereUniqueInput
    data: XOR<UserCampaignUpdateWithoutUserInput, UserCampaignUncheckedUpdateWithoutUserInput>
  }

  export type UserCampaignUpdateManyWithWhereWithoutUserInput = {
    where: UserCampaignScalarWhereInput
    data: XOR<UserCampaignUpdateManyMutationInput, UserCampaignUncheckedUpdateManyWithoutUserInput>
  }

  export type UserCampaignScalarWhereInput = {
    AND?: UserCampaignScalarWhereInput | UserCampaignScalarWhereInput[]
    OR?: UserCampaignScalarWhereInput[]
    NOT?: UserCampaignScalarWhereInput | UserCampaignScalarWhereInput[]
    user_campaign_id?: StringFilter<"UserCampaign"> | string
    user_id?: StringFilter<"UserCampaign"> | string
    campaign_id?: StringFilter<"UserCampaign"> | string
    created_on?: DateTimeFilter<"UserCampaign"> | Date | string
    updated_on?: DateTimeFilter<"UserCampaign"> | Date | string
    last_visited_on?: DateTimeFilter<"UserCampaign"> | Date | string
  }

  export type CampaignCreateWithoutEvent_publish_providerInput = {
    campaign_id?: string
    title: string
    description: string
    image?: string | null
    header_image?: string | null
    allow_ai_events?: boolean
    overview_map_id?: string | null
    created_on?: Date | string
    node_types?: NodeTypeCreateNestedManyWithoutCampaignInput
    users?: UserCreateNestedManyWithoutCampaignsInput
    static_maps?: StaticMapCreateNestedManyWithoutCampaignInput
    session_recaps?: SessionRecapCreateNestedManyWithoutCampaignInput
    nodes?: NodeCreateNestedManyWithoutCampaignInput
    event_templates?: EventTemplateCreateNestedManyWithoutCampaignInput
    user_campaigns?: UserCampaignCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUncheckedCreateWithoutEvent_publish_providerInput = {
    campaign_id?: string
    title: string
    description: string
    image?: string | null
    header_image?: string | null
    allow_ai_events?: boolean
    overview_map_id?: string | null
    created_on?: Date | string
    node_types?: NodeTypeUncheckedCreateNestedManyWithoutCampaignInput
    users?: UserUncheckedCreateNestedManyWithoutCampaignsInput
    static_maps?: StaticMapUncheckedCreateNestedManyWithoutCampaignInput
    session_recaps?: SessionRecapUncheckedCreateNestedManyWithoutCampaignInput
    nodes?: NodeUncheckedCreateNestedManyWithoutCampaignInput
    event_templates?: EventTemplateUncheckedCreateNestedManyWithoutCampaignInput
    user_campaigns?: UserCampaignUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignCreateOrConnectWithoutEvent_publish_providerInput = {
    where: CampaignWhereUniqueInput
    create: XOR<CampaignCreateWithoutEvent_publish_providerInput, CampaignUncheckedCreateWithoutEvent_publish_providerInput>
  }

  export type CampaignUpsertWithoutEvent_publish_providerInput = {
    update: XOR<CampaignUpdateWithoutEvent_publish_providerInput, CampaignUncheckedUpdateWithoutEvent_publish_providerInput>
    create: XOR<CampaignCreateWithoutEvent_publish_providerInput, CampaignUncheckedCreateWithoutEvent_publish_providerInput>
    where?: CampaignWhereInput
  }

  export type CampaignUpdateToOneWithWhereWithoutEvent_publish_providerInput = {
    where?: CampaignWhereInput
    data: XOR<CampaignUpdateWithoutEvent_publish_providerInput, CampaignUncheckedUpdateWithoutEvent_publish_providerInput>
  }

  export type CampaignUpdateWithoutEvent_publish_providerInput = {
    campaign_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    header_image?: NullableStringFieldUpdateOperationsInput | string | null
    allow_ai_events?: BoolFieldUpdateOperationsInput | boolean
    overview_map_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    node_types?: NodeTypeUpdateManyWithoutCampaignNestedInput
    users?: UserUpdateManyWithoutCampaignsNestedInput
    static_maps?: StaticMapUpdateManyWithoutCampaignNestedInput
    session_recaps?: SessionRecapUpdateManyWithoutCampaignNestedInput
    nodes?: NodeUpdateManyWithoutCampaignNestedInput
    event_templates?: EventTemplateUpdateManyWithoutCampaignNestedInput
    user_campaigns?: UserCampaignUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateWithoutEvent_publish_providerInput = {
    campaign_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    header_image?: NullableStringFieldUpdateOperationsInput | string | null
    allow_ai_events?: BoolFieldUpdateOperationsInput | boolean
    overview_map_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    node_types?: NodeTypeUncheckedUpdateManyWithoutCampaignNestedInput
    users?: UserUncheckedUpdateManyWithoutCampaignsNestedInput
    static_maps?: StaticMapUncheckedUpdateManyWithoutCampaignNestedInput
    session_recaps?: SessionRecapUncheckedUpdateManyWithoutCampaignNestedInput
    nodes?: NodeUncheckedUpdateManyWithoutCampaignNestedInput
    event_templates?: EventTemplateUncheckedUpdateManyWithoutCampaignNestedInput
    user_campaigns?: UserCampaignUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type NodeTypeCreateWithoutCampaignInput = {
    node_type_id?: string
    name: string
    allowed_attributes?: NodeTypeCreateallowed_attributesInput | string[]
    nodes?: NodeCreateNestedManyWithoutNode_typeInput
  }

  export type NodeTypeUncheckedCreateWithoutCampaignInput = {
    node_type_id?: string
    name: string
    allowed_attributes?: NodeTypeCreateallowed_attributesInput | string[]
    nodes?: NodeUncheckedCreateNestedManyWithoutNode_typeInput
  }

  export type NodeTypeCreateOrConnectWithoutCampaignInput = {
    where: NodeTypeWhereUniqueInput
    create: XOR<NodeTypeCreateWithoutCampaignInput, NodeTypeUncheckedCreateWithoutCampaignInput>
  }

  export type NodeTypeCreateManyCampaignInputEnvelope = {
    data: NodeTypeCreateManyCampaignInput | NodeTypeCreateManyCampaignInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCampaignsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    updated_on?: Date | string | null
    role?: string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    user_campaigns?: UserCampaignCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCampaignsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    updated_on?: Date | string | null
    role?: string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    user_campaigns?: UserCampaignUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCampaignsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCampaignsInput, UserUncheckedCreateWithoutCampaignsInput>
  }

  export type StaticMapCreateWithoutCampaignInput = {
    map_id?: string
    name: string
    image_url: string
    created_on?: Date | string
    updated_on?: Date | string
    map_nodes?: MapNodeCreateNestedManyWithoutMapInput
  }

  export type StaticMapUncheckedCreateWithoutCampaignInput = {
    map_id?: string
    name: string
    image_url: string
    created_on?: Date | string
    updated_on?: Date | string
    map_nodes?: MapNodeUncheckedCreateNestedManyWithoutMapInput
  }

  export type StaticMapCreateOrConnectWithoutCampaignInput = {
    where: StaticMapWhereUniqueInput
    create: XOR<StaticMapCreateWithoutCampaignInput, StaticMapUncheckedCreateWithoutCampaignInput>
  }

  export type StaticMapCreateManyCampaignInputEnvelope = {
    data: StaticMapCreateManyCampaignInput | StaticMapCreateManyCampaignInput[]
    skipDuplicates?: boolean
  }

  export type SessionRecapCreateWithoutCampaignInput = {
    session_recap_id?: string
    title: string
    description?: string | null
    play_date?: Date | string
    created_on?: Date | string
    updated_on?: Date | string
    published_on?: Date | string | null
  }

  export type SessionRecapUncheckedCreateWithoutCampaignInput = {
    session_recap_id?: string
    title: string
    description?: string | null
    play_date?: Date | string
    created_on?: Date | string
    updated_on?: Date | string
    published_on?: Date | string | null
  }

  export type SessionRecapCreateOrConnectWithoutCampaignInput = {
    where: SessionRecapWhereUniqueInput
    create: XOR<SessionRecapCreateWithoutCampaignInput, SessionRecapUncheckedCreateWithoutCampaignInput>
  }

  export type SessionRecapCreateManyCampaignInputEnvelope = {
    data: SessionRecapCreateManyCampaignInput | SessionRecapCreateManyCampaignInput[]
    skipDuplicates?: boolean
  }

  export type NodeCreateWithoutCampaignInput = {
    node_id?: string
    name: string
    description?: string | null
    long_description?: string | null
    image_url?: string | null
    created_on?: Date | string
    updated_on?: Date | string
    base_culture?: string | null
    profession?: string | null
    given_name_style?: string | null
    family_name_style?: string | null
    name_shape?: string | null
    exclude_from_events?: boolean | null
    attributes?: AttributeCreateNestedManyWithoutNodesInput
    events?: EventCreateNestedManyWithoutNodesInput
    outgoing_relations?: NodeRelationshipCreateNestedManyWithoutOutgoing_relationsInput
    incoming_relations?: NodeRelationshipCreateNestedManyWithoutIncoming_relationsInput
    node_type?: NodeTypeCreateNestedOneWithoutNodesInput
    map_node?: MapNodeCreateNestedManyWithoutNodeInput
  }

  export type NodeUncheckedCreateWithoutCampaignInput = {
    node_id?: string
    name: string
    description?: string | null
    long_description?: string | null
    image_url?: string | null
    created_on?: Date | string
    updated_on?: Date | string
    base_culture?: string | null
    profession?: string | null
    given_name_style?: string | null
    family_name_style?: string | null
    name_shape?: string | null
    node_type_id?: string | null
    exclude_from_events?: boolean | null
    attributes?: AttributeUncheckedCreateNestedManyWithoutNodesInput
    events?: EventUncheckedCreateNestedManyWithoutNodesInput
    outgoing_relations?: NodeRelationshipUncheckedCreateNestedManyWithoutOutgoing_relationsInput
    incoming_relations?: NodeRelationshipUncheckedCreateNestedManyWithoutIncoming_relationsInput
    map_node?: MapNodeUncheckedCreateNestedManyWithoutNodeInput
  }

  export type NodeCreateOrConnectWithoutCampaignInput = {
    where: NodeWhereUniqueInput
    create: XOR<NodeCreateWithoutCampaignInput, NodeUncheckedCreateWithoutCampaignInput>
  }

  export type NodeCreateManyCampaignInputEnvelope = {
    data: NodeCreateManyCampaignInput | NodeCreateManyCampaignInput[]
    skipDuplicates?: boolean
  }

  export type EventTemplateCreateWithoutCampaignInput = {
    event_template_id?: string
    title: string
    description: string
    type: string
    icon_url: string
    rarity?: number
    relationship?: string | null
    compare?: string | null
    exclude_from_random?: boolean | null
    results: JsonNullValueInput | InputJsonValue
    node_references?: string | null
  }

  export type EventTemplateUncheckedCreateWithoutCampaignInput = {
    event_template_id?: string
    title: string
    description: string
    type: string
    icon_url: string
    rarity?: number
    relationship?: string | null
    compare?: string | null
    exclude_from_random?: boolean | null
    results: JsonNullValueInput | InputJsonValue
    node_references?: string | null
  }

  export type EventTemplateCreateOrConnectWithoutCampaignInput = {
    where: EventTemplateWhereUniqueInput
    create: XOR<EventTemplateCreateWithoutCampaignInput, EventTemplateUncheckedCreateWithoutCampaignInput>
  }

  export type EventTemplateCreateManyCampaignInputEnvelope = {
    data: EventTemplateCreateManyCampaignInput | EventTemplateCreateManyCampaignInput[]
    skipDuplicates?: boolean
  }

  export type EventPublishProviderCreateWithoutCampaignInput = {
    id?: string
    provider: string
    url: string
  }

  export type EventPublishProviderUncheckedCreateWithoutCampaignInput = {
    id?: string
    provider: string
    url: string
  }

  export type EventPublishProviderCreateOrConnectWithoutCampaignInput = {
    where: EventPublishProviderWhereUniqueInput
    create: XOR<EventPublishProviderCreateWithoutCampaignInput, EventPublishProviderUncheckedCreateWithoutCampaignInput>
  }

  export type EventPublishProviderCreateManyCampaignInputEnvelope = {
    data: EventPublishProviderCreateManyCampaignInput | EventPublishProviderCreateManyCampaignInput[]
    skipDuplicates?: boolean
  }

  export type UserCampaignCreateWithoutCampaignInput = {
    user_campaign_id?: string
    created_on?: Date | string
    updated_on?: Date | string
    last_visited_on?: Date | string
    user: UserCreateNestedOneWithoutUser_campaignsInput
  }

  export type UserCampaignUncheckedCreateWithoutCampaignInput = {
    user_campaign_id?: string
    user_id: string
    created_on?: Date | string
    updated_on?: Date | string
    last_visited_on?: Date | string
  }

  export type UserCampaignCreateOrConnectWithoutCampaignInput = {
    where: UserCampaignWhereUniqueInput
    create: XOR<UserCampaignCreateWithoutCampaignInput, UserCampaignUncheckedCreateWithoutCampaignInput>
  }

  export type UserCampaignCreateManyCampaignInputEnvelope = {
    data: UserCampaignCreateManyCampaignInput | UserCampaignCreateManyCampaignInput[]
    skipDuplicates?: boolean
  }

  export type NodeTypeUpsertWithWhereUniqueWithoutCampaignInput = {
    where: NodeTypeWhereUniqueInput
    update: XOR<NodeTypeUpdateWithoutCampaignInput, NodeTypeUncheckedUpdateWithoutCampaignInput>
    create: XOR<NodeTypeCreateWithoutCampaignInput, NodeTypeUncheckedCreateWithoutCampaignInput>
  }

  export type NodeTypeUpdateWithWhereUniqueWithoutCampaignInput = {
    where: NodeTypeWhereUniqueInput
    data: XOR<NodeTypeUpdateWithoutCampaignInput, NodeTypeUncheckedUpdateWithoutCampaignInput>
  }

  export type NodeTypeUpdateManyWithWhereWithoutCampaignInput = {
    where: NodeTypeScalarWhereInput
    data: XOR<NodeTypeUpdateManyMutationInput, NodeTypeUncheckedUpdateManyWithoutCampaignInput>
  }

  export type NodeTypeScalarWhereInput = {
    AND?: NodeTypeScalarWhereInput | NodeTypeScalarWhereInput[]
    OR?: NodeTypeScalarWhereInput[]
    NOT?: NodeTypeScalarWhereInput | NodeTypeScalarWhereInput[]
    node_type_id?: StringFilter<"NodeType"> | string
    name?: StringFilter<"NodeType"> | string
    allowed_attributes?: StringNullableListFilter<"NodeType">
    campaign_id?: StringFilter<"NodeType"> | string
  }

  export type UserUpsertWithWhereUniqueWithoutCampaignsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutCampaignsInput, UserUncheckedUpdateWithoutCampaignsInput>
    create: XOR<UserCreateWithoutCampaignsInput, UserUncheckedCreateWithoutCampaignsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutCampaignsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutCampaignsInput, UserUncheckedUpdateWithoutCampaignsInput>
  }

  export type UserUpdateManyWithWhereWithoutCampaignsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutCampaignsInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    email?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    updated_on?: DateTimeNullableFilter<"User"> | Date | string | null
    role?: StringFilter<"User"> | string
  }

  export type StaticMapUpsertWithWhereUniqueWithoutCampaignInput = {
    where: StaticMapWhereUniqueInput
    update: XOR<StaticMapUpdateWithoutCampaignInput, StaticMapUncheckedUpdateWithoutCampaignInput>
    create: XOR<StaticMapCreateWithoutCampaignInput, StaticMapUncheckedCreateWithoutCampaignInput>
  }

  export type StaticMapUpdateWithWhereUniqueWithoutCampaignInput = {
    where: StaticMapWhereUniqueInput
    data: XOR<StaticMapUpdateWithoutCampaignInput, StaticMapUncheckedUpdateWithoutCampaignInput>
  }

  export type StaticMapUpdateManyWithWhereWithoutCampaignInput = {
    where: StaticMapScalarWhereInput
    data: XOR<StaticMapUpdateManyMutationInput, StaticMapUncheckedUpdateManyWithoutCampaignInput>
  }

  export type StaticMapScalarWhereInput = {
    AND?: StaticMapScalarWhereInput | StaticMapScalarWhereInput[]
    OR?: StaticMapScalarWhereInput[]
    NOT?: StaticMapScalarWhereInput | StaticMapScalarWhereInput[]
    map_id?: StringFilter<"StaticMap"> | string
    name?: StringFilter<"StaticMap"> | string
    image_url?: StringFilter<"StaticMap"> | string
    created_on?: DateTimeFilter<"StaticMap"> | Date | string
    updated_on?: DateTimeFilter<"StaticMap"> | Date | string
    campaign_id?: StringNullableFilter<"StaticMap"> | string | null
  }

  export type SessionRecapUpsertWithWhereUniqueWithoutCampaignInput = {
    where: SessionRecapWhereUniqueInput
    update: XOR<SessionRecapUpdateWithoutCampaignInput, SessionRecapUncheckedUpdateWithoutCampaignInput>
    create: XOR<SessionRecapCreateWithoutCampaignInput, SessionRecapUncheckedCreateWithoutCampaignInput>
  }

  export type SessionRecapUpdateWithWhereUniqueWithoutCampaignInput = {
    where: SessionRecapWhereUniqueInput
    data: XOR<SessionRecapUpdateWithoutCampaignInput, SessionRecapUncheckedUpdateWithoutCampaignInput>
  }

  export type SessionRecapUpdateManyWithWhereWithoutCampaignInput = {
    where: SessionRecapScalarWhereInput
    data: XOR<SessionRecapUpdateManyMutationInput, SessionRecapUncheckedUpdateManyWithoutCampaignInput>
  }

  export type SessionRecapScalarWhereInput = {
    AND?: SessionRecapScalarWhereInput | SessionRecapScalarWhereInput[]
    OR?: SessionRecapScalarWhereInput[]
    NOT?: SessionRecapScalarWhereInput | SessionRecapScalarWhereInput[]
    session_recap_id?: StringFilter<"SessionRecap"> | string
    title?: StringFilter<"SessionRecap"> | string
    description?: StringNullableFilter<"SessionRecap"> | string | null
    play_date?: DateTimeFilter<"SessionRecap"> | Date | string
    created_on?: DateTimeFilter<"SessionRecap"> | Date | string
    updated_on?: DateTimeFilter<"SessionRecap"> | Date | string
    campaign_id?: StringNullableFilter<"SessionRecap"> | string | null
    published_on?: DateTimeNullableFilter<"SessionRecap"> | Date | string | null
  }

  export type NodeUpsertWithWhereUniqueWithoutCampaignInput = {
    where: NodeWhereUniqueInput
    update: XOR<NodeUpdateWithoutCampaignInput, NodeUncheckedUpdateWithoutCampaignInput>
    create: XOR<NodeCreateWithoutCampaignInput, NodeUncheckedCreateWithoutCampaignInput>
  }

  export type NodeUpdateWithWhereUniqueWithoutCampaignInput = {
    where: NodeWhereUniqueInput
    data: XOR<NodeUpdateWithoutCampaignInput, NodeUncheckedUpdateWithoutCampaignInput>
  }

  export type NodeUpdateManyWithWhereWithoutCampaignInput = {
    where: NodeScalarWhereInput
    data: XOR<NodeUpdateManyMutationInput, NodeUncheckedUpdateManyWithoutCampaignInput>
  }

  export type NodeScalarWhereInput = {
    AND?: NodeScalarWhereInput | NodeScalarWhereInput[]
    OR?: NodeScalarWhereInput[]
    NOT?: NodeScalarWhereInput | NodeScalarWhereInput[]
    node_id?: StringFilter<"Node"> | string
    name?: StringFilter<"Node"> | string
    description?: StringNullableFilter<"Node"> | string | null
    long_description?: StringNullableFilter<"Node"> | string | null
    image_url?: StringNullableFilter<"Node"> | string | null
    created_on?: DateTimeFilter<"Node"> | Date | string
    updated_on?: DateTimeFilter<"Node"> | Date | string
    base_culture?: StringNullableFilter<"Node"> | string | null
    profession?: StringNullableFilter<"Node"> | string | null
    given_name_style?: StringNullableFilter<"Node"> | string | null
    family_name_style?: StringNullableFilter<"Node"> | string | null
    name_shape?: StringNullableFilter<"Node"> | string | null
    campaign_id?: StringNullableFilter<"Node"> | string | null
    node_type_id?: StringNullableFilter<"Node"> | string | null
    exclude_from_events?: BoolNullableFilter<"Node"> | boolean | null
  }

  export type EventTemplateUpsertWithWhereUniqueWithoutCampaignInput = {
    where: EventTemplateWhereUniqueInput
    update: XOR<EventTemplateUpdateWithoutCampaignInput, EventTemplateUncheckedUpdateWithoutCampaignInput>
    create: XOR<EventTemplateCreateWithoutCampaignInput, EventTemplateUncheckedCreateWithoutCampaignInput>
  }

  export type EventTemplateUpdateWithWhereUniqueWithoutCampaignInput = {
    where: EventTemplateWhereUniqueInput
    data: XOR<EventTemplateUpdateWithoutCampaignInput, EventTemplateUncheckedUpdateWithoutCampaignInput>
  }

  export type EventTemplateUpdateManyWithWhereWithoutCampaignInput = {
    where: EventTemplateScalarWhereInput
    data: XOR<EventTemplateUpdateManyMutationInput, EventTemplateUncheckedUpdateManyWithoutCampaignInput>
  }

  export type EventTemplateScalarWhereInput = {
    AND?: EventTemplateScalarWhereInput | EventTemplateScalarWhereInput[]
    OR?: EventTemplateScalarWhereInput[]
    NOT?: EventTemplateScalarWhereInput | EventTemplateScalarWhereInput[]
    event_template_id?: StringFilter<"EventTemplate"> | string
    title?: StringFilter<"EventTemplate"> | string
    description?: StringFilter<"EventTemplate"> | string
    type?: StringFilter<"EventTemplate"> | string
    icon_url?: StringFilter<"EventTemplate"> | string
    rarity?: IntFilter<"EventTemplate"> | number
    relationship?: StringNullableFilter<"EventTemplate"> | string | null
    compare?: StringNullableFilter<"EventTemplate"> | string | null
    exclude_from_random?: BoolNullableFilter<"EventTemplate"> | boolean | null
    results?: JsonFilter<"EventTemplate">
    campaign_id?: StringNullableFilter<"EventTemplate"> | string | null
    node_references?: StringNullableFilter<"EventTemplate"> | string | null
  }

  export type EventPublishProviderUpsertWithWhereUniqueWithoutCampaignInput = {
    where: EventPublishProviderWhereUniqueInput
    update: XOR<EventPublishProviderUpdateWithoutCampaignInput, EventPublishProviderUncheckedUpdateWithoutCampaignInput>
    create: XOR<EventPublishProviderCreateWithoutCampaignInput, EventPublishProviderUncheckedCreateWithoutCampaignInput>
  }

  export type EventPublishProviderUpdateWithWhereUniqueWithoutCampaignInput = {
    where: EventPublishProviderWhereUniqueInput
    data: XOR<EventPublishProviderUpdateWithoutCampaignInput, EventPublishProviderUncheckedUpdateWithoutCampaignInput>
  }

  export type EventPublishProviderUpdateManyWithWhereWithoutCampaignInput = {
    where: EventPublishProviderScalarWhereInput
    data: XOR<EventPublishProviderUpdateManyMutationInput, EventPublishProviderUncheckedUpdateManyWithoutCampaignInput>
  }

  export type EventPublishProviderScalarWhereInput = {
    AND?: EventPublishProviderScalarWhereInput | EventPublishProviderScalarWhereInput[]
    OR?: EventPublishProviderScalarWhereInput[]
    NOT?: EventPublishProviderScalarWhereInput | EventPublishProviderScalarWhereInput[]
    id?: StringFilter<"EventPublishProvider"> | string
    provider?: StringFilter<"EventPublishProvider"> | string
    url?: StringFilter<"EventPublishProvider"> | string
    campaign_id?: StringFilter<"EventPublishProvider"> | string
  }

  export type UserCampaignUpsertWithWhereUniqueWithoutCampaignInput = {
    where: UserCampaignWhereUniqueInput
    update: XOR<UserCampaignUpdateWithoutCampaignInput, UserCampaignUncheckedUpdateWithoutCampaignInput>
    create: XOR<UserCampaignCreateWithoutCampaignInput, UserCampaignUncheckedCreateWithoutCampaignInput>
  }

  export type UserCampaignUpdateWithWhereUniqueWithoutCampaignInput = {
    where: UserCampaignWhereUniqueInput
    data: XOR<UserCampaignUpdateWithoutCampaignInput, UserCampaignUncheckedUpdateWithoutCampaignInput>
  }

  export type UserCampaignUpdateManyWithWhereWithoutCampaignInput = {
    where: UserCampaignScalarWhereInput
    data: XOR<UserCampaignUpdateManyMutationInput, UserCampaignUncheckedUpdateManyWithoutCampaignInput>
  }

  export type UserCreateWithoutUser_campaignsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    updated_on?: Date | string | null
    role?: string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    campaigns?: CampaignCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutUser_campaignsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    updated_on?: Date | string | null
    role?: string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    campaigns?: CampaignUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutUser_campaignsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUser_campaignsInput, UserUncheckedCreateWithoutUser_campaignsInput>
  }

  export type CampaignCreateWithoutUser_campaignsInput = {
    campaign_id?: string
    title: string
    description: string
    image?: string | null
    header_image?: string | null
    allow_ai_events?: boolean
    overview_map_id?: string | null
    created_on?: Date | string
    node_types?: NodeTypeCreateNestedManyWithoutCampaignInput
    users?: UserCreateNestedManyWithoutCampaignsInput
    static_maps?: StaticMapCreateNestedManyWithoutCampaignInput
    session_recaps?: SessionRecapCreateNestedManyWithoutCampaignInput
    nodes?: NodeCreateNestedManyWithoutCampaignInput
    event_templates?: EventTemplateCreateNestedManyWithoutCampaignInput
    event_publish_provider?: EventPublishProviderCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUncheckedCreateWithoutUser_campaignsInput = {
    campaign_id?: string
    title: string
    description: string
    image?: string | null
    header_image?: string | null
    allow_ai_events?: boolean
    overview_map_id?: string | null
    created_on?: Date | string
    node_types?: NodeTypeUncheckedCreateNestedManyWithoutCampaignInput
    users?: UserUncheckedCreateNestedManyWithoutCampaignsInput
    static_maps?: StaticMapUncheckedCreateNestedManyWithoutCampaignInput
    session_recaps?: SessionRecapUncheckedCreateNestedManyWithoutCampaignInput
    nodes?: NodeUncheckedCreateNestedManyWithoutCampaignInput
    event_templates?: EventTemplateUncheckedCreateNestedManyWithoutCampaignInput
    event_publish_provider?: EventPublishProviderUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignCreateOrConnectWithoutUser_campaignsInput = {
    where: CampaignWhereUniqueInput
    create: XOR<CampaignCreateWithoutUser_campaignsInput, CampaignUncheckedCreateWithoutUser_campaignsInput>
  }

  export type UserUpsertWithoutUser_campaignsInput = {
    update: XOR<UserUpdateWithoutUser_campaignsInput, UserUncheckedUpdateWithoutUser_campaignsInput>
    create: XOR<UserCreateWithoutUser_campaignsInput, UserUncheckedCreateWithoutUser_campaignsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUser_campaignsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUser_campaignsInput, UserUncheckedUpdateWithoutUser_campaignsInput>
  }

  export type UserUpdateWithoutUser_campaignsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    updated_on?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: StringFieldUpdateOperationsInput | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    campaigns?: CampaignUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutUser_campaignsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    updated_on?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: StringFieldUpdateOperationsInput | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    campaigns?: CampaignUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type CampaignUpsertWithoutUser_campaignsInput = {
    update: XOR<CampaignUpdateWithoutUser_campaignsInput, CampaignUncheckedUpdateWithoutUser_campaignsInput>
    create: XOR<CampaignCreateWithoutUser_campaignsInput, CampaignUncheckedCreateWithoutUser_campaignsInput>
    where?: CampaignWhereInput
  }

  export type CampaignUpdateToOneWithWhereWithoutUser_campaignsInput = {
    where?: CampaignWhereInput
    data: XOR<CampaignUpdateWithoutUser_campaignsInput, CampaignUncheckedUpdateWithoutUser_campaignsInput>
  }

  export type CampaignUpdateWithoutUser_campaignsInput = {
    campaign_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    header_image?: NullableStringFieldUpdateOperationsInput | string | null
    allow_ai_events?: BoolFieldUpdateOperationsInput | boolean
    overview_map_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    node_types?: NodeTypeUpdateManyWithoutCampaignNestedInput
    users?: UserUpdateManyWithoutCampaignsNestedInput
    static_maps?: StaticMapUpdateManyWithoutCampaignNestedInput
    session_recaps?: SessionRecapUpdateManyWithoutCampaignNestedInput
    nodes?: NodeUpdateManyWithoutCampaignNestedInput
    event_templates?: EventTemplateUpdateManyWithoutCampaignNestedInput
    event_publish_provider?: EventPublishProviderUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateWithoutUser_campaignsInput = {
    campaign_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    header_image?: NullableStringFieldUpdateOperationsInput | string | null
    allow_ai_events?: BoolFieldUpdateOperationsInput | boolean
    overview_map_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    node_types?: NodeTypeUncheckedUpdateManyWithoutCampaignNestedInput
    users?: UserUncheckedUpdateManyWithoutCampaignsNestedInput
    static_maps?: StaticMapUncheckedUpdateManyWithoutCampaignNestedInput
    session_recaps?: SessionRecapUncheckedUpdateManyWithoutCampaignNestedInput
    nodes?: NodeUncheckedUpdateManyWithoutCampaignNestedInput
    event_templates?: EventTemplateUncheckedUpdateManyWithoutCampaignNestedInput
    event_publish_provider?: EventPublishProviderUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignCreateWithoutEvent_templatesInput = {
    campaign_id?: string
    title: string
    description: string
    image?: string | null
    header_image?: string | null
    allow_ai_events?: boolean
    overview_map_id?: string | null
    created_on?: Date | string
    node_types?: NodeTypeCreateNestedManyWithoutCampaignInput
    users?: UserCreateNestedManyWithoutCampaignsInput
    static_maps?: StaticMapCreateNestedManyWithoutCampaignInput
    session_recaps?: SessionRecapCreateNestedManyWithoutCampaignInput
    nodes?: NodeCreateNestedManyWithoutCampaignInput
    event_publish_provider?: EventPublishProviderCreateNestedManyWithoutCampaignInput
    user_campaigns?: UserCampaignCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUncheckedCreateWithoutEvent_templatesInput = {
    campaign_id?: string
    title: string
    description: string
    image?: string | null
    header_image?: string | null
    allow_ai_events?: boolean
    overview_map_id?: string | null
    created_on?: Date | string
    node_types?: NodeTypeUncheckedCreateNestedManyWithoutCampaignInput
    users?: UserUncheckedCreateNestedManyWithoutCampaignsInput
    static_maps?: StaticMapUncheckedCreateNestedManyWithoutCampaignInput
    session_recaps?: SessionRecapUncheckedCreateNestedManyWithoutCampaignInput
    nodes?: NodeUncheckedCreateNestedManyWithoutCampaignInput
    event_publish_provider?: EventPublishProviderUncheckedCreateNestedManyWithoutCampaignInput
    user_campaigns?: UserCampaignUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignCreateOrConnectWithoutEvent_templatesInput = {
    where: CampaignWhereUniqueInput
    create: XOR<CampaignCreateWithoutEvent_templatesInput, CampaignUncheckedCreateWithoutEvent_templatesInput>
  }

  export type CampaignUpsertWithoutEvent_templatesInput = {
    update: XOR<CampaignUpdateWithoutEvent_templatesInput, CampaignUncheckedUpdateWithoutEvent_templatesInput>
    create: XOR<CampaignCreateWithoutEvent_templatesInput, CampaignUncheckedCreateWithoutEvent_templatesInput>
    where?: CampaignWhereInput
  }

  export type CampaignUpdateToOneWithWhereWithoutEvent_templatesInput = {
    where?: CampaignWhereInput
    data: XOR<CampaignUpdateWithoutEvent_templatesInput, CampaignUncheckedUpdateWithoutEvent_templatesInput>
  }

  export type CampaignUpdateWithoutEvent_templatesInput = {
    campaign_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    header_image?: NullableStringFieldUpdateOperationsInput | string | null
    allow_ai_events?: BoolFieldUpdateOperationsInput | boolean
    overview_map_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    node_types?: NodeTypeUpdateManyWithoutCampaignNestedInput
    users?: UserUpdateManyWithoutCampaignsNestedInput
    static_maps?: StaticMapUpdateManyWithoutCampaignNestedInput
    session_recaps?: SessionRecapUpdateManyWithoutCampaignNestedInput
    nodes?: NodeUpdateManyWithoutCampaignNestedInput
    event_publish_provider?: EventPublishProviderUpdateManyWithoutCampaignNestedInput
    user_campaigns?: UserCampaignUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateWithoutEvent_templatesInput = {
    campaign_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    header_image?: NullableStringFieldUpdateOperationsInput | string | null
    allow_ai_events?: BoolFieldUpdateOperationsInput | boolean
    overview_map_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    node_types?: NodeTypeUncheckedUpdateManyWithoutCampaignNestedInput
    users?: UserUncheckedUpdateManyWithoutCampaignsNestedInput
    static_maps?: StaticMapUncheckedUpdateManyWithoutCampaignNestedInput
    session_recaps?: SessionRecapUncheckedUpdateManyWithoutCampaignNestedInput
    nodes?: NodeUncheckedUpdateManyWithoutCampaignNestedInput
    event_publish_provider?: EventPublishProviderUncheckedUpdateManyWithoutCampaignNestedInput
    user_campaigns?: UserCampaignUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type NodeCreateWithoutEventsInput = {
    node_id?: string
    name: string
    description?: string | null
    long_description?: string | null
    image_url?: string | null
    created_on?: Date | string
    updated_on?: Date | string
    base_culture?: string | null
    profession?: string | null
    given_name_style?: string | null
    family_name_style?: string | null
    name_shape?: string | null
    exclude_from_events?: boolean | null
    attributes?: AttributeCreateNestedManyWithoutNodesInput
    campaign?: CampaignCreateNestedOneWithoutNodesInput
    outgoing_relations?: NodeRelationshipCreateNestedManyWithoutOutgoing_relationsInput
    incoming_relations?: NodeRelationshipCreateNestedManyWithoutIncoming_relationsInput
    node_type?: NodeTypeCreateNestedOneWithoutNodesInput
    map_node?: MapNodeCreateNestedManyWithoutNodeInput
  }

  export type NodeUncheckedCreateWithoutEventsInput = {
    node_id?: string
    name: string
    description?: string | null
    long_description?: string | null
    image_url?: string | null
    created_on?: Date | string
    updated_on?: Date | string
    base_culture?: string | null
    profession?: string | null
    given_name_style?: string | null
    family_name_style?: string | null
    name_shape?: string | null
    campaign_id?: string | null
    node_type_id?: string | null
    exclude_from_events?: boolean | null
    attributes?: AttributeUncheckedCreateNestedManyWithoutNodesInput
    outgoing_relations?: NodeRelationshipUncheckedCreateNestedManyWithoutOutgoing_relationsInput
    incoming_relations?: NodeRelationshipUncheckedCreateNestedManyWithoutIncoming_relationsInput
    map_node?: MapNodeUncheckedCreateNestedManyWithoutNodeInput
  }

  export type NodeCreateOrConnectWithoutEventsInput = {
    where: NodeWhereUniqueInput
    create: XOR<NodeCreateWithoutEventsInput, NodeUncheckedCreateWithoutEventsInput>
  }

  export type NodeUpsertWithWhereUniqueWithoutEventsInput = {
    where: NodeWhereUniqueInput
    update: XOR<NodeUpdateWithoutEventsInput, NodeUncheckedUpdateWithoutEventsInput>
    create: XOR<NodeCreateWithoutEventsInput, NodeUncheckedCreateWithoutEventsInput>
  }

  export type NodeUpdateWithWhereUniqueWithoutEventsInput = {
    where: NodeWhereUniqueInput
    data: XOR<NodeUpdateWithoutEventsInput, NodeUncheckedUpdateWithoutEventsInput>
  }

  export type NodeUpdateManyWithWhereWithoutEventsInput = {
    where: NodeScalarWhereInput
    data: XOR<NodeUpdateManyMutationInput, NodeUncheckedUpdateManyWithoutEventsInput>
  }

  export type CampaignCreateWithoutStatic_mapsInput = {
    campaign_id?: string
    title: string
    description: string
    image?: string | null
    header_image?: string | null
    allow_ai_events?: boolean
    overview_map_id?: string | null
    created_on?: Date | string
    node_types?: NodeTypeCreateNestedManyWithoutCampaignInput
    users?: UserCreateNestedManyWithoutCampaignsInput
    session_recaps?: SessionRecapCreateNestedManyWithoutCampaignInput
    nodes?: NodeCreateNestedManyWithoutCampaignInput
    event_templates?: EventTemplateCreateNestedManyWithoutCampaignInput
    event_publish_provider?: EventPublishProviderCreateNestedManyWithoutCampaignInput
    user_campaigns?: UserCampaignCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUncheckedCreateWithoutStatic_mapsInput = {
    campaign_id?: string
    title: string
    description: string
    image?: string | null
    header_image?: string | null
    allow_ai_events?: boolean
    overview_map_id?: string | null
    created_on?: Date | string
    node_types?: NodeTypeUncheckedCreateNestedManyWithoutCampaignInput
    users?: UserUncheckedCreateNestedManyWithoutCampaignsInput
    session_recaps?: SessionRecapUncheckedCreateNestedManyWithoutCampaignInput
    nodes?: NodeUncheckedCreateNestedManyWithoutCampaignInput
    event_templates?: EventTemplateUncheckedCreateNestedManyWithoutCampaignInput
    event_publish_provider?: EventPublishProviderUncheckedCreateNestedManyWithoutCampaignInput
    user_campaigns?: UserCampaignUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignCreateOrConnectWithoutStatic_mapsInput = {
    where: CampaignWhereUniqueInput
    create: XOR<CampaignCreateWithoutStatic_mapsInput, CampaignUncheckedCreateWithoutStatic_mapsInput>
  }

  export type MapNodeCreateWithoutMapInput = {
    map_node_id?: string
    coordinates?: MapNodeCreatecoordinatesInput | number[]
    moveable?: boolean | null
    title?: string | null
    description?: string | null
    icon_url?: string | null
    icon?: string | null
    created_on?: Date | string
    updated_on?: Date | string
    node?: NodeCreateNestedOneWithoutMap_nodeInput
  }

  export type MapNodeUncheckedCreateWithoutMapInput = {
    map_node_id?: string
    coordinates?: MapNodeCreatecoordinatesInput | number[]
    moveable?: boolean | null
    title?: string | null
    description?: string | null
    icon_url?: string | null
    icon?: string | null
    created_on?: Date | string
    updated_on?: Date | string
    node_id?: string | null
  }

  export type MapNodeCreateOrConnectWithoutMapInput = {
    where: MapNodeWhereUniqueInput
    create: XOR<MapNodeCreateWithoutMapInput, MapNodeUncheckedCreateWithoutMapInput>
  }

  export type MapNodeCreateManyMapInputEnvelope = {
    data: MapNodeCreateManyMapInput | MapNodeCreateManyMapInput[]
    skipDuplicates?: boolean
  }

  export type CampaignUpsertWithoutStatic_mapsInput = {
    update: XOR<CampaignUpdateWithoutStatic_mapsInput, CampaignUncheckedUpdateWithoutStatic_mapsInput>
    create: XOR<CampaignCreateWithoutStatic_mapsInput, CampaignUncheckedCreateWithoutStatic_mapsInput>
    where?: CampaignWhereInput
  }

  export type CampaignUpdateToOneWithWhereWithoutStatic_mapsInput = {
    where?: CampaignWhereInput
    data: XOR<CampaignUpdateWithoutStatic_mapsInput, CampaignUncheckedUpdateWithoutStatic_mapsInput>
  }

  export type CampaignUpdateWithoutStatic_mapsInput = {
    campaign_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    header_image?: NullableStringFieldUpdateOperationsInput | string | null
    allow_ai_events?: BoolFieldUpdateOperationsInput | boolean
    overview_map_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    node_types?: NodeTypeUpdateManyWithoutCampaignNestedInput
    users?: UserUpdateManyWithoutCampaignsNestedInput
    session_recaps?: SessionRecapUpdateManyWithoutCampaignNestedInput
    nodes?: NodeUpdateManyWithoutCampaignNestedInput
    event_templates?: EventTemplateUpdateManyWithoutCampaignNestedInput
    event_publish_provider?: EventPublishProviderUpdateManyWithoutCampaignNestedInput
    user_campaigns?: UserCampaignUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateWithoutStatic_mapsInput = {
    campaign_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    header_image?: NullableStringFieldUpdateOperationsInput | string | null
    allow_ai_events?: BoolFieldUpdateOperationsInput | boolean
    overview_map_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    node_types?: NodeTypeUncheckedUpdateManyWithoutCampaignNestedInput
    users?: UserUncheckedUpdateManyWithoutCampaignsNestedInput
    session_recaps?: SessionRecapUncheckedUpdateManyWithoutCampaignNestedInput
    nodes?: NodeUncheckedUpdateManyWithoutCampaignNestedInput
    event_templates?: EventTemplateUncheckedUpdateManyWithoutCampaignNestedInput
    event_publish_provider?: EventPublishProviderUncheckedUpdateManyWithoutCampaignNestedInput
    user_campaigns?: UserCampaignUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type MapNodeUpsertWithWhereUniqueWithoutMapInput = {
    where: MapNodeWhereUniqueInput
    update: XOR<MapNodeUpdateWithoutMapInput, MapNodeUncheckedUpdateWithoutMapInput>
    create: XOR<MapNodeCreateWithoutMapInput, MapNodeUncheckedCreateWithoutMapInput>
  }

  export type MapNodeUpdateWithWhereUniqueWithoutMapInput = {
    where: MapNodeWhereUniqueInput
    data: XOR<MapNodeUpdateWithoutMapInput, MapNodeUncheckedUpdateWithoutMapInput>
  }

  export type MapNodeUpdateManyWithWhereWithoutMapInput = {
    where: MapNodeScalarWhereInput
    data: XOR<MapNodeUpdateManyMutationInput, MapNodeUncheckedUpdateManyWithoutMapInput>
  }

  export type MapNodeScalarWhereInput = {
    AND?: MapNodeScalarWhereInput | MapNodeScalarWhereInput[]
    OR?: MapNodeScalarWhereInput[]
    NOT?: MapNodeScalarWhereInput | MapNodeScalarWhereInput[]
    map_node_id?: StringFilter<"MapNode"> | string
    coordinates?: IntNullableListFilter<"MapNode">
    moveable?: BoolNullableFilter<"MapNode"> | boolean | null
    title?: StringNullableFilter<"MapNode"> | string | null
    description?: StringNullableFilter<"MapNode"> | string | null
    icon_url?: StringNullableFilter<"MapNode"> | string | null
    icon?: StringNullableFilter<"MapNode"> | string | null
    created_on?: DateTimeFilter<"MapNode"> | Date | string
    updated_on?: DateTimeFilter<"MapNode"> | Date | string
    map_id?: StringFilter<"MapNode"> | string
    node_id?: StringNullableFilter<"MapNode"> | string | null
  }

  export type CampaignCreateWithoutNode_typesInput = {
    campaign_id?: string
    title: string
    description: string
    image?: string | null
    header_image?: string | null
    allow_ai_events?: boolean
    overview_map_id?: string | null
    created_on?: Date | string
    users?: UserCreateNestedManyWithoutCampaignsInput
    static_maps?: StaticMapCreateNestedManyWithoutCampaignInput
    session_recaps?: SessionRecapCreateNestedManyWithoutCampaignInput
    nodes?: NodeCreateNestedManyWithoutCampaignInput
    event_templates?: EventTemplateCreateNestedManyWithoutCampaignInput
    event_publish_provider?: EventPublishProviderCreateNestedManyWithoutCampaignInput
    user_campaigns?: UserCampaignCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUncheckedCreateWithoutNode_typesInput = {
    campaign_id?: string
    title: string
    description: string
    image?: string | null
    header_image?: string | null
    allow_ai_events?: boolean
    overview_map_id?: string | null
    created_on?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutCampaignsInput
    static_maps?: StaticMapUncheckedCreateNestedManyWithoutCampaignInput
    session_recaps?: SessionRecapUncheckedCreateNestedManyWithoutCampaignInput
    nodes?: NodeUncheckedCreateNestedManyWithoutCampaignInput
    event_templates?: EventTemplateUncheckedCreateNestedManyWithoutCampaignInput
    event_publish_provider?: EventPublishProviderUncheckedCreateNestedManyWithoutCampaignInput
    user_campaigns?: UserCampaignUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignCreateOrConnectWithoutNode_typesInput = {
    where: CampaignWhereUniqueInput
    create: XOR<CampaignCreateWithoutNode_typesInput, CampaignUncheckedCreateWithoutNode_typesInput>
  }

  export type NodeCreateWithoutNode_typeInput = {
    node_id?: string
    name: string
    description?: string | null
    long_description?: string | null
    image_url?: string | null
    created_on?: Date | string
    updated_on?: Date | string
    base_culture?: string | null
    profession?: string | null
    given_name_style?: string | null
    family_name_style?: string | null
    name_shape?: string | null
    exclude_from_events?: boolean | null
    attributes?: AttributeCreateNestedManyWithoutNodesInput
    events?: EventCreateNestedManyWithoutNodesInput
    campaign?: CampaignCreateNestedOneWithoutNodesInput
    outgoing_relations?: NodeRelationshipCreateNestedManyWithoutOutgoing_relationsInput
    incoming_relations?: NodeRelationshipCreateNestedManyWithoutIncoming_relationsInput
    map_node?: MapNodeCreateNestedManyWithoutNodeInput
  }

  export type NodeUncheckedCreateWithoutNode_typeInput = {
    node_id?: string
    name: string
    description?: string | null
    long_description?: string | null
    image_url?: string | null
    created_on?: Date | string
    updated_on?: Date | string
    base_culture?: string | null
    profession?: string | null
    given_name_style?: string | null
    family_name_style?: string | null
    name_shape?: string | null
    campaign_id?: string | null
    exclude_from_events?: boolean | null
    attributes?: AttributeUncheckedCreateNestedManyWithoutNodesInput
    events?: EventUncheckedCreateNestedManyWithoutNodesInput
    outgoing_relations?: NodeRelationshipUncheckedCreateNestedManyWithoutOutgoing_relationsInput
    incoming_relations?: NodeRelationshipUncheckedCreateNestedManyWithoutIncoming_relationsInput
    map_node?: MapNodeUncheckedCreateNestedManyWithoutNodeInput
  }

  export type NodeCreateOrConnectWithoutNode_typeInput = {
    where: NodeWhereUniqueInput
    create: XOR<NodeCreateWithoutNode_typeInput, NodeUncheckedCreateWithoutNode_typeInput>
  }

  export type NodeCreateManyNode_typeInputEnvelope = {
    data: NodeCreateManyNode_typeInput | NodeCreateManyNode_typeInput[]
    skipDuplicates?: boolean
  }

  export type CampaignUpsertWithoutNode_typesInput = {
    update: XOR<CampaignUpdateWithoutNode_typesInput, CampaignUncheckedUpdateWithoutNode_typesInput>
    create: XOR<CampaignCreateWithoutNode_typesInput, CampaignUncheckedCreateWithoutNode_typesInput>
    where?: CampaignWhereInput
  }

  export type CampaignUpdateToOneWithWhereWithoutNode_typesInput = {
    where?: CampaignWhereInput
    data: XOR<CampaignUpdateWithoutNode_typesInput, CampaignUncheckedUpdateWithoutNode_typesInput>
  }

  export type CampaignUpdateWithoutNode_typesInput = {
    campaign_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    header_image?: NullableStringFieldUpdateOperationsInput | string | null
    allow_ai_events?: BoolFieldUpdateOperationsInput | boolean
    overview_map_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutCampaignsNestedInput
    static_maps?: StaticMapUpdateManyWithoutCampaignNestedInput
    session_recaps?: SessionRecapUpdateManyWithoutCampaignNestedInput
    nodes?: NodeUpdateManyWithoutCampaignNestedInput
    event_templates?: EventTemplateUpdateManyWithoutCampaignNestedInput
    event_publish_provider?: EventPublishProviderUpdateManyWithoutCampaignNestedInput
    user_campaigns?: UserCampaignUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateWithoutNode_typesInput = {
    campaign_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    header_image?: NullableStringFieldUpdateOperationsInput | string | null
    allow_ai_events?: BoolFieldUpdateOperationsInput | boolean
    overview_map_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutCampaignsNestedInput
    static_maps?: StaticMapUncheckedUpdateManyWithoutCampaignNestedInput
    session_recaps?: SessionRecapUncheckedUpdateManyWithoutCampaignNestedInput
    nodes?: NodeUncheckedUpdateManyWithoutCampaignNestedInput
    event_templates?: EventTemplateUncheckedUpdateManyWithoutCampaignNestedInput
    event_publish_provider?: EventPublishProviderUncheckedUpdateManyWithoutCampaignNestedInput
    user_campaigns?: UserCampaignUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type NodeUpsertWithWhereUniqueWithoutNode_typeInput = {
    where: NodeWhereUniqueInput
    update: XOR<NodeUpdateWithoutNode_typeInput, NodeUncheckedUpdateWithoutNode_typeInput>
    create: XOR<NodeCreateWithoutNode_typeInput, NodeUncheckedCreateWithoutNode_typeInput>
  }

  export type NodeUpdateWithWhereUniqueWithoutNode_typeInput = {
    where: NodeWhereUniqueInput
    data: XOR<NodeUpdateWithoutNode_typeInput, NodeUncheckedUpdateWithoutNode_typeInput>
  }

  export type NodeUpdateManyWithWhereWithoutNode_typeInput = {
    where: NodeScalarWhereInput
    data: XOR<NodeUpdateManyMutationInput, NodeUncheckedUpdateManyWithoutNode_typeInput>
  }

  export type NodeCreateWithoutAttributesInput = {
    node_id?: string
    name: string
    description?: string | null
    long_description?: string | null
    image_url?: string | null
    created_on?: Date | string
    updated_on?: Date | string
    base_culture?: string | null
    profession?: string | null
    given_name_style?: string | null
    family_name_style?: string | null
    name_shape?: string | null
    exclude_from_events?: boolean | null
    events?: EventCreateNestedManyWithoutNodesInput
    campaign?: CampaignCreateNestedOneWithoutNodesInput
    outgoing_relations?: NodeRelationshipCreateNestedManyWithoutOutgoing_relationsInput
    incoming_relations?: NodeRelationshipCreateNestedManyWithoutIncoming_relationsInput
    node_type?: NodeTypeCreateNestedOneWithoutNodesInput
    map_node?: MapNodeCreateNestedManyWithoutNodeInput
  }

  export type NodeUncheckedCreateWithoutAttributesInput = {
    node_id?: string
    name: string
    description?: string | null
    long_description?: string | null
    image_url?: string | null
    created_on?: Date | string
    updated_on?: Date | string
    base_culture?: string | null
    profession?: string | null
    given_name_style?: string | null
    family_name_style?: string | null
    name_shape?: string | null
    campaign_id?: string | null
    node_type_id?: string | null
    exclude_from_events?: boolean | null
    events?: EventUncheckedCreateNestedManyWithoutNodesInput
    outgoing_relations?: NodeRelationshipUncheckedCreateNestedManyWithoutOutgoing_relationsInput
    incoming_relations?: NodeRelationshipUncheckedCreateNestedManyWithoutIncoming_relationsInput
    map_node?: MapNodeUncheckedCreateNestedManyWithoutNodeInput
  }

  export type NodeCreateOrConnectWithoutAttributesInput = {
    where: NodeWhereUniqueInput
    create: XOR<NodeCreateWithoutAttributesInput, NodeUncheckedCreateWithoutAttributesInput>
  }

  export type NodeUpsertWithoutAttributesInput = {
    update: XOR<NodeUpdateWithoutAttributesInput, NodeUncheckedUpdateWithoutAttributesInput>
    create: XOR<NodeCreateWithoutAttributesInput, NodeUncheckedCreateWithoutAttributesInput>
    where?: NodeWhereInput
  }

  export type NodeUpdateToOneWithWhereWithoutAttributesInput = {
    where?: NodeWhereInput
    data: XOR<NodeUpdateWithoutAttributesInput, NodeUncheckedUpdateWithoutAttributesInput>
  }

  export type NodeUpdateWithoutAttributesInput = {
    node_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    long_description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    base_culture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    given_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    family_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    name_shape?: NullableStringFieldUpdateOperationsInput | string | null
    exclude_from_events?: NullableBoolFieldUpdateOperationsInput | boolean | null
    events?: EventUpdateManyWithoutNodesNestedInput
    campaign?: CampaignUpdateOneWithoutNodesNestedInput
    outgoing_relations?: NodeRelationshipUpdateManyWithoutOutgoing_relationsNestedInput
    incoming_relations?: NodeRelationshipUpdateManyWithoutIncoming_relationsNestedInput
    node_type?: NodeTypeUpdateOneWithoutNodesNestedInput
    map_node?: MapNodeUpdateManyWithoutNodeNestedInput
  }

  export type NodeUncheckedUpdateWithoutAttributesInput = {
    node_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    long_description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    base_culture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    given_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    family_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    name_shape?: NullableStringFieldUpdateOperationsInput | string | null
    campaign_id?: NullableStringFieldUpdateOperationsInput | string | null
    node_type_id?: NullableStringFieldUpdateOperationsInput | string | null
    exclude_from_events?: NullableBoolFieldUpdateOperationsInput | boolean | null
    events?: EventUncheckedUpdateManyWithoutNodesNestedInput
    outgoing_relations?: NodeRelationshipUncheckedUpdateManyWithoutOutgoing_relationsNestedInput
    incoming_relations?: NodeRelationshipUncheckedUpdateManyWithoutIncoming_relationsNestedInput
    map_node?: MapNodeUncheckedUpdateManyWithoutNodeNestedInput
  }

  export type AttributeCreateWithoutNodesInput = {
    attribute_id?: string
    title: string
    value?: number
  }

  export type AttributeUncheckedCreateWithoutNodesInput = {
    attribute_id?: string
    title: string
    value?: number
  }

  export type AttributeCreateOrConnectWithoutNodesInput = {
    where: AttributeWhereUniqueInput
    create: XOR<AttributeCreateWithoutNodesInput, AttributeUncheckedCreateWithoutNodesInput>
  }

  export type AttributeCreateManyNodesInputEnvelope = {
    data: AttributeCreateManyNodesInput | AttributeCreateManyNodesInput[]
    skipDuplicates?: boolean
  }

  export type EventCreateWithoutNodesInput = {
    event_id?: string
    name: string
    description?: string | null
    type?: string | null
    rarity?: number
    created_on?: Date | string
    updated_on?: Date | string
  }

  export type EventUncheckedCreateWithoutNodesInput = {
    event_id?: string
    name: string
    description?: string | null
    type?: string | null
    rarity?: number
    created_on?: Date | string
    updated_on?: Date | string
  }

  export type EventCreateOrConnectWithoutNodesInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutNodesInput, EventUncheckedCreateWithoutNodesInput>
  }

  export type CampaignCreateWithoutNodesInput = {
    campaign_id?: string
    title: string
    description: string
    image?: string | null
    header_image?: string | null
    allow_ai_events?: boolean
    overview_map_id?: string | null
    created_on?: Date | string
    node_types?: NodeTypeCreateNestedManyWithoutCampaignInput
    users?: UserCreateNestedManyWithoutCampaignsInput
    static_maps?: StaticMapCreateNestedManyWithoutCampaignInput
    session_recaps?: SessionRecapCreateNestedManyWithoutCampaignInput
    event_templates?: EventTemplateCreateNestedManyWithoutCampaignInput
    event_publish_provider?: EventPublishProviderCreateNestedManyWithoutCampaignInput
    user_campaigns?: UserCampaignCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUncheckedCreateWithoutNodesInput = {
    campaign_id?: string
    title: string
    description: string
    image?: string | null
    header_image?: string | null
    allow_ai_events?: boolean
    overview_map_id?: string | null
    created_on?: Date | string
    node_types?: NodeTypeUncheckedCreateNestedManyWithoutCampaignInput
    users?: UserUncheckedCreateNestedManyWithoutCampaignsInput
    static_maps?: StaticMapUncheckedCreateNestedManyWithoutCampaignInput
    session_recaps?: SessionRecapUncheckedCreateNestedManyWithoutCampaignInput
    event_templates?: EventTemplateUncheckedCreateNestedManyWithoutCampaignInput
    event_publish_provider?: EventPublishProviderUncheckedCreateNestedManyWithoutCampaignInput
    user_campaigns?: UserCampaignUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignCreateOrConnectWithoutNodesInput = {
    where: CampaignWhereUniqueInput
    create: XOR<CampaignCreateWithoutNodesInput, CampaignUncheckedCreateWithoutNodesInput>
  }

  export type NodeRelationshipCreateWithoutOutgoing_relationsInput = {
    node_relationship_id?: string
    relation_title: string
    relationship_score: number
    is_in_range?: boolean | null
    updated_on?: Date | string
    incoming_relations: NodeCreateNestedOneWithoutIncoming_relationsInput
  }

  export type NodeRelationshipUncheckedCreateWithoutOutgoing_relationsInput = {
    node_relationship_id?: string
    relation_title: string
    target_id: string
    relationship_score: number
    is_in_range?: boolean | null
    updated_on?: Date | string
  }

  export type NodeRelationshipCreateOrConnectWithoutOutgoing_relationsInput = {
    where: NodeRelationshipWhereUniqueInput
    create: XOR<NodeRelationshipCreateWithoutOutgoing_relationsInput, NodeRelationshipUncheckedCreateWithoutOutgoing_relationsInput>
  }

  export type NodeRelationshipCreateManyOutgoing_relationsInputEnvelope = {
    data: NodeRelationshipCreateManyOutgoing_relationsInput | NodeRelationshipCreateManyOutgoing_relationsInput[]
    skipDuplicates?: boolean
  }

  export type NodeRelationshipCreateWithoutIncoming_relationsInput = {
    node_relationship_id?: string
    relation_title: string
    relationship_score: number
    is_in_range?: boolean | null
    updated_on?: Date | string
    outgoing_relations: NodeCreateNestedOneWithoutOutgoing_relationsInput
  }

  export type NodeRelationshipUncheckedCreateWithoutIncoming_relationsInput = {
    node_relationship_id?: string
    self_id: string
    relation_title: string
    relationship_score: number
    is_in_range?: boolean | null
    updated_on?: Date | string
  }

  export type NodeRelationshipCreateOrConnectWithoutIncoming_relationsInput = {
    where: NodeRelationshipWhereUniqueInput
    create: XOR<NodeRelationshipCreateWithoutIncoming_relationsInput, NodeRelationshipUncheckedCreateWithoutIncoming_relationsInput>
  }

  export type NodeRelationshipCreateManyIncoming_relationsInputEnvelope = {
    data: NodeRelationshipCreateManyIncoming_relationsInput | NodeRelationshipCreateManyIncoming_relationsInput[]
    skipDuplicates?: boolean
  }

  export type NodeTypeCreateWithoutNodesInput = {
    node_type_id?: string
    name: string
    allowed_attributes?: NodeTypeCreateallowed_attributesInput | string[]
    campaign: CampaignCreateNestedOneWithoutNode_typesInput
  }

  export type NodeTypeUncheckedCreateWithoutNodesInput = {
    node_type_id?: string
    name: string
    allowed_attributes?: NodeTypeCreateallowed_attributesInput | string[]
    campaign_id: string
  }

  export type NodeTypeCreateOrConnectWithoutNodesInput = {
    where: NodeTypeWhereUniqueInput
    create: XOR<NodeTypeCreateWithoutNodesInput, NodeTypeUncheckedCreateWithoutNodesInput>
  }

  export type MapNodeCreateWithoutNodeInput = {
    map_node_id?: string
    coordinates?: MapNodeCreatecoordinatesInput | number[]
    moveable?: boolean | null
    title?: string | null
    description?: string | null
    icon_url?: string | null
    icon?: string | null
    created_on?: Date | string
    updated_on?: Date | string
    map: StaticMapCreateNestedOneWithoutMap_nodesInput
  }

  export type MapNodeUncheckedCreateWithoutNodeInput = {
    map_node_id?: string
    coordinates?: MapNodeCreatecoordinatesInput | number[]
    moveable?: boolean | null
    title?: string | null
    description?: string | null
    icon_url?: string | null
    icon?: string | null
    created_on?: Date | string
    updated_on?: Date | string
    map_id: string
  }

  export type MapNodeCreateOrConnectWithoutNodeInput = {
    where: MapNodeWhereUniqueInput
    create: XOR<MapNodeCreateWithoutNodeInput, MapNodeUncheckedCreateWithoutNodeInput>
  }

  export type MapNodeCreateManyNodeInputEnvelope = {
    data: MapNodeCreateManyNodeInput | MapNodeCreateManyNodeInput[]
    skipDuplicates?: boolean
  }

  export type AttributeUpsertWithWhereUniqueWithoutNodesInput = {
    where: AttributeWhereUniqueInput
    update: XOR<AttributeUpdateWithoutNodesInput, AttributeUncheckedUpdateWithoutNodesInput>
    create: XOR<AttributeCreateWithoutNodesInput, AttributeUncheckedCreateWithoutNodesInput>
  }

  export type AttributeUpdateWithWhereUniqueWithoutNodesInput = {
    where: AttributeWhereUniqueInput
    data: XOR<AttributeUpdateWithoutNodesInput, AttributeUncheckedUpdateWithoutNodesInput>
  }

  export type AttributeUpdateManyWithWhereWithoutNodesInput = {
    where: AttributeScalarWhereInput
    data: XOR<AttributeUpdateManyMutationInput, AttributeUncheckedUpdateManyWithoutNodesInput>
  }

  export type AttributeScalarWhereInput = {
    AND?: AttributeScalarWhereInput | AttributeScalarWhereInput[]
    OR?: AttributeScalarWhereInput[]
    NOT?: AttributeScalarWhereInput | AttributeScalarWhereInput[]
    attribute_id?: StringFilter<"Attribute"> | string
    title?: StringFilter<"Attribute"> | string
    value?: IntFilter<"Attribute"> | number
    node_id?: StringFilter<"Attribute"> | string
  }

  export type EventUpsertWithWhereUniqueWithoutNodesInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutNodesInput, EventUncheckedUpdateWithoutNodesInput>
    create: XOR<EventCreateWithoutNodesInput, EventUncheckedCreateWithoutNodesInput>
  }

  export type EventUpdateWithWhereUniqueWithoutNodesInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutNodesInput, EventUncheckedUpdateWithoutNodesInput>
  }

  export type EventUpdateManyWithWhereWithoutNodesInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutNodesInput>
  }

  export type EventScalarWhereInput = {
    AND?: EventScalarWhereInput | EventScalarWhereInput[]
    OR?: EventScalarWhereInput[]
    NOT?: EventScalarWhereInput | EventScalarWhereInput[]
    event_id?: StringFilter<"Event"> | string
    name?: StringFilter<"Event"> | string
    description?: StringNullableFilter<"Event"> | string | null
    type?: StringNullableFilter<"Event"> | string | null
    rarity?: IntFilter<"Event"> | number
    created_on?: DateTimeFilter<"Event"> | Date | string
    updated_on?: DateTimeFilter<"Event"> | Date | string
  }

  export type CampaignUpsertWithoutNodesInput = {
    update: XOR<CampaignUpdateWithoutNodesInput, CampaignUncheckedUpdateWithoutNodesInput>
    create: XOR<CampaignCreateWithoutNodesInput, CampaignUncheckedCreateWithoutNodesInput>
    where?: CampaignWhereInput
  }

  export type CampaignUpdateToOneWithWhereWithoutNodesInput = {
    where?: CampaignWhereInput
    data: XOR<CampaignUpdateWithoutNodesInput, CampaignUncheckedUpdateWithoutNodesInput>
  }

  export type CampaignUpdateWithoutNodesInput = {
    campaign_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    header_image?: NullableStringFieldUpdateOperationsInput | string | null
    allow_ai_events?: BoolFieldUpdateOperationsInput | boolean
    overview_map_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    node_types?: NodeTypeUpdateManyWithoutCampaignNestedInput
    users?: UserUpdateManyWithoutCampaignsNestedInput
    static_maps?: StaticMapUpdateManyWithoutCampaignNestedInput
    session_recaps?: SessionRecapUpdateManyWithoutCampaignNestedInput
    event_templates?: EventTemplateUpdateManyWithoutCampaignNestedInput
    event_publish_provider?: EventPublishProviderUpdateManyWithoutCampaignNestedInput
    user_campaigns?: UserCampaignUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateWithoutNodesInput = {
    campaign_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    header_image?: NullableStringFieldUpdateOperationsInput | string | null
    allow_ai_events?: BoolFieldUpdateOperationsInput | boolean
    overview_map_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    node_types?: NodeTypeUncheckedUpdateManyWithoutCampaignNestedInput
    users?: UserUncheckedUpdateManyWithoutCampaignsNestedInput
    static_maps?: StaticMapUncheckedUpdateManyWithoutCampaignNestedInput
    session_recaps?: SessionRecapUncheckedUpdateManyWithoutCampaignNestedInput
    event_templates?: EventTemplateUncheckedUpdateManyWithoutCampaignNestedInput
    event_publish_provider?: EventPublishProviderUncheckedUpdateManyWithoutCampaignNestedInput
    user_campaigns?: UserCampaignUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type NodeRelationshipUpsertWithWhereUniqueWithoutOutgoing_relationsInput = {
    where: NodeRelationshipWhereUniqueInput
    update: XOR<NodeRelationshipUpdateWithoutOutgoing_relationsInput, NodeRelationshipUncheckedUpdateWithoutOutgoing_relationsInput>
    create: XOR<NodeRelationshipCreateWithoutOutgoing_relationsInput, NodeRelationshipUncheckedCreateWithoutOutgoing_relationsInput>
  }

  export type NodeRelationshipUpdateWithWhereUniqueWithoutOutgoing_relationsInput = {
    where: NodeRelationshipWhereUniqueInput
    data: XOR<NodeRelationshipUpdateWithoutOutgoing_relationsInput, NodeRelationshipUncheckedUpdateWithoutOutgoing_relationsInput>
  }

  export type NodeRelationshipUpdateManyWithWhereWithoutOutgoing_relationsInput = {
    where: NodeRelationshipScalarWhereInput
    data: XOR<NodeRelationshipUpdateManyMutationInput, NodeRelationshipUncheckedUpdateManyWithoutOutgoing_relationsInput>
  }

  export type NodeRelationshipScalarWhereInput = {
    AND?: NodeRelationshipScalarWhereInput | NodeRelationshipScalarWhereInput[]
    OR?: NodeRelationshipScalarWhereInput[]
    NOT?: NodeRelationshipScalarWhereInput | NodeRelationshipScalarWhereInput[]
    node_relationship_id?: StringFilter<"NodeRelationship"> | string
    self_id?: StringFilter<"NodeRelationship"> | string
    relation_title?: StringFilter<"NodeRelationship"> | string
    target_id?: StringFilter<"NodeRelationship"> | string
    relationship_score?: IntFilter<"NodeRelationship"> | number
    is_in_range?: BoolNullableFilter<"NodeRelationship"> | boolean | null
    updated_on?: DateTimeFilter<"NodeRelationship"> | Date | string
  }

  export type NodeRelationshipUpsertWithWhereUniqueWithoutIncoming_relationsInput = {
    where: NodeRelationshipWhereUniqueInput
    update: XOR<NodeRelationshipUpdateWithoutIncoming_relationsInput, NodeRelationshipUncheckedUpdateWithoutIncoming_relationsInput>
    create: XOR<NodeRelationshipCreateWithoutIncoming_relationsInput, NodeRelationshipUncheckedCreateWithoutIncoming_relationsInput>
  }

  export type NodeRelationshipUpdateWithWhereUniqueWithoutIncoming_relationsInput = {
    where: NodeRelationshipWhereUniqueInput
    data: XOR<NodeRelationshipUpdateWithoutIncoming_relationsInput, NodeRelationshipUncheckedUpdateWithoutIncoming_relationsInput>
  }

  export type NodeRelationshipUpdateManyWithWhereWithoutIncoming_relationsInput = {
    where: NodeRelationshipScalarWhereInput
    data: XOR<NodeRelationshipUpdateManyMutationInput, NodeRelationshipUncheckedUpdateManyWithoutIncoming_relationsInput>
  }

  export type NodeTypeUpsertWithoutNodesInput = {
    update: XOR<NodeTypeUpdateWithoutNodesInput, NodeTypeUncheckedUpdateWithoutNodesInput>
    create: XOR<NodeTypeCreateWithoutNodesInput, NodeTypeUncheckedCreateWithoutNodesInput>
    where?: NodeTypeWhereInput
  }

  export type NodeTypeUpdateToOneWithWhereWithoutNodesInput = {
    where?: NodeTypeWhereInput
    data: XOR<NodeTypeUpdateWithoutNodesInput, NodeTypeUncheckedUpdateWithoutNodesInput>
  }

  export type NodeTypeUpdateWithoutNodesInput = {
    node_type_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    allowed_attributes?: NodeTypeUpdateallowed_attributesInput | string[]
    campaign?: CampaignUpdateOneRequiredWithoutNode_typesNestedInput
  }

  export type NodeTypeUncheckedUpdateWithoutNodesInput = {
    node_type_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    allowed_attributes?: NodeTypeUpdateallowed_attributesInput | string[]
    campaign_id?: StringFieldUpdateOperationsInput | string
  }

  export type MapNodeUpsertWithWhereUniqueWithoutNodeInput = {
    where: MapNodeWhereUniqueInput
    update: XOR<MapNodeUpdateWithoutNodeInput, MapNodeUncheckedUpdateWithoutNodeInput>
    create: XOR<MapNodeCreateWithoutNodeInput, MapNodeUncheckedCreateWithoutNodeInput>
  }

  export type MapNodeUpdateWithWhereUniqueWithoutNodeInput = {
    where: MapNodeWhereUniqueInput
    data: XOR<MapNodeUpdateWithoutNodeInput, MapNodeUncheckedUpdateWithoutNodeInput>
  }

  export type MapNodeUpdateManyWithWhereWithoutNodeInput = {
    where: MapNodeScalarWhereInput
    data: XOR<MapNodeUpdateManyMutationInput, MapNodeUncheckedUpdateManyWithoutNodeInput>
  }

  export type StaticMapCreateWithoutMap_nodesInput = {
    map_id?: string
    name: string
    image_url: string
    created_on?: Date | string
    updated_on?: Date | string
    campaign?: CampaignCreateNestedOneWithoutStatic_mapsInput
  }

  export type StaticMapUncheckedCreateWithoutMap_nodesInput = {
    map_id?: string
    name: string
    image_url: string
    created_on?: Date | string
    updated_on?: Date | string
    campaign_id?: string | null
  }

  export type StaticMapCreateOrConnectWithoutMap_nodesInput = {
    where: StaticMapWhereUniqueInput
    create: XOR<StaticMapCreateWithoutMap_nodesInput, StaticMapUncheckedCreateWithoutMap_nodesInput>
  }

  export type NodeCreateWithoutMap_nodeInput = {
    node_id?: string
    name: string
    description?: string | null
    long_description?: string | null
    image_url?: string | null
    created_on?: Date | string
    updated_on?: Date | string
    base_culture?: string | null
    profession?: string | null
    given_name_style?: string | null
    family_name_style?: string | null
    name_shape?: string | null
    exclude_from_events?: boolean | null
    attributes?: AttributeCreateNestedManyWithoutNodesInput
    events?: EventCreateNestedManyWithoutNodesInput
    campaign?: CampaignCreateNestedOneWithoutNodesInput
    outgoing_relations?: NodeRelationshipCreateNestedManyWithoutOutgoing_relationsInput
    incoming_relations?: NodeRelationshipCreateNestedManyWithoutIncoming_relationsInput
    node_type?: NodeTypeCreateNestedOneWithoutNodesInput
  }

  export type NodeUncheckedCreateWithoutMap_nodeInput = {
    node_id?: string
    name: string
    description?: string | null
    long_description?: string | null
    image_url?: string | null
    created_on?: Date | string
    updated_on?: Date | string
    base_culture?: string | null
    profession?: string | null
    given_name_style?: string | null
    family_name_style?: string | null
    name_shape?: string | null
    campaign_id?: string | null
    node_type_id?: string | null
    exclude_from_events?: boolean | null
    attributes?: AttributeUncheckedCreateNestedManyWithoutNodesInput
    events?: EventUncheckedCreateNestedManyWithoutNodesInput
    outgoing_relations?: NodeRelationshipUncheckedCreateNestedManyWithoutOutgoing_relationsInput
    incoming_relations?: NodeRelationshipUncheckedCreateNestedManyWithoutIncoming_relationsInput
  }

  export type NodeCreateOrConnectWithoutMap_nodeInput = {
    where: NodeWhereUniqueInput
    create: XOR<NodeCreateWithoutMap_nodeInput, NodeUncheckedCreateWithoutMap_nodeInput>
  }

  export type StaticMapUpsertWithoutMap_nodesInput = {
    update: XOR<StaticMapUpdateWithoutMap_nodesInput, StaticMapUncheckedUpdateWithoutMap_nodesInput>
    create: XOR<StaticMapCreateWithoutMap_nodesInput, StaticMapUncheckedCreateWithoutMap_nodesInput>
    where?: StaticMapWhereInput
  }

  export type StaticMapUpdateToOneWithWhereWithoutMap_nodesInput = {
    where?: StaticMapWhereInput
    data: XOR<StaticMapUpdateWithoutMap_nodesInput, StaticMapUncheckedUpdateWithoutMap_nodesInput>
  }

  export type StaticMapUpdateWithoutMap_nodesInput = {
    map_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign?: CampaignUpdateOneWithoutStatic_mapsNestedInput
  }

  export type StaticMapUncheckedUpdateWithoutMap_nodesInput = {
    map_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NodeUpsertWithoutMap_nodeInput = {
    update: XOR<NodeUpdateWithoutMap_nodeInput, NodeUncheckedUpdateWithoutMap_nodeInput>
    create: XOR<NodeCreateWithoutMap_nodeInput, NodeUncheckedCreateWithoutMap_nodeInput>
    where?: NodeWhereInput
  }

  export type NodeUpdateToOneWithWhereWithoutMap_nodeInput = {
    where?: NodeWhereInput
    data: XOR<NodeUpdateWithoutMap_nodeInput, NodeUncheckedUpdateWithoutMap_nodeInput>
  }

  export type NodeUpdateWithoutMap_nodeInput = {
    node_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    long_description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    base_culture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    given_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    family_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    name_shape?: NullableStringFieldUpdateOperationsInput | string | null
    exclude_from_events?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attributes?: AttributeUpdateManyWithoutNodesNestedInput
    events?: EventUpdateManyWithoutNodesNestedInput
    campaign?: CampaignUpdateOneWithoutNodesNestedInput
    outgoing_relations?: NodeRelationshipUpdateManyWithoutOutgoing_relationsNestedInput
    incoming_relations?: NodeRelationshipUpdateManyWithoutIncoming_relationsNestedInput
    node_type?: NodeTypeUpdateOneWithoutNodesNestedInput
  }

  export type NodeUncheckedUpdateWithoutMap_nodeInput = {
    node_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    long_description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    base_culture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    given_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    family_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    name_shape?: NullableStringFieldUpdateOperationsInput | string | null
    campaign_id?: NullableStringFieldUpdateOperationsInput | string | null
    node_type_id?: NullableStringFieldUpdateOperationsInput | string | null
    exclude_from_events?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attributes?: AttributeUncheckedUpdateManyWithoutNodesNestedInput
    events?: EventUncheckedUpdateManyWithoutNodesNestedInput
    outgoing_relations?: NodeRelationshipUncheckedUpdateManyWithoutOutgoing_relationsNestedInput
    incoming_relations?: NodeRelationshipUncheckedUpdateManyWithoutIncoming_relationsNestedInput
  }

  export type NodeCreateWithoutOutgoing_relationsInput = {
    node_id?: string
    name: string
    description?: string | null
    long_description?: string | null
    image_url?: string | null
    created_on?: Date | string
    updated_on?: Date | string
    base_culture?: string | null
    profession?: string | null
    given_name_style?: string | null
    family_name_style?: string | null
    name_shape?: string | null
    exclude_from_events?: boolean | null
    attributes?: AttributeCreateNestedManyWithoutNodesInput
    events?: EventCreateNestedManyWithoutNodesInput
    campaign?: CampaignCreateNestedOneWithoutNodesInput
    incoming_relations?: NodeRelationshipCreateNestedManyWithoutIncoming_relationsInput
    node_type?: NodeTypeCreateNestedOneWithoutNodesInput
    map_node?: MapNodeCreateNestedManyWithoutNodeInput
  }

  export type NodeUncheckedCreateWithoutOutgoing_relationsInput = {
    node_id?: string
    name: string
    description?: string | null
    long_description?: string | null
    image_url?: string | null
    created_on?: Date | string
    updated_on?: Date | string
    base_culture?: string | null
    profession?: string | null
    given_name_style?: string | null
    family_name_style?: string | null
    name_shape?: string | null
    campaign_id?: string | null
    node_type_id?: string | null
    exclude_from_events?: boolean | null
    attributes?: AttributeUncheckedCreateNestedManyWithoutNodesInput
    events?: EventUncheckedCreateNestedManyWithoutNodesInput
    incoming_relations?: NodeRelationshipUncheckedCreateNestedManyWithoutIncoming_relationsInput
    map_node?: MapNodeUncheckedCreateNestedManyWithoutNodeInput
  }

  export type NodeCreateOrConnectWithoutOutgoing_relationsInput = {
    where: NodeWhereUniqueInput
    create: XOR<NodeCreateWithoutOutgoing_relationsInput, NodeUncheckedCreateWithoutOutgoing_relationsInput>
  }

  export type NodeCreateWithoutIncoming_relationsInput = {
    node_id?: string
    name: string
    description?: string | null
    long_description?: string | null
    image_url?: string | null
    created_on?: Date | string
    updated_on?: Date | string
    base_culture?: string | null
    profession?: string | null
    given_name_style?: string | null
    family_name_style?: string | null
    name_shape?: string | null
    exclude_from_events?: boolean | null
    attributes?: AttributeCreateNestedManyWithoutNodesInput
    events?: EventCreateNestedManyWithoutNodesInput
    campaign?: CampaignCreateNestedOneWithoutNodesInput
    outgoing_relations?: NodeRelationshipCreateNestedManyWithoutOutgoing_relationsInput
    node_type?: NodeTypeCreateNestedOneWithoutNodesInput
    map_node?: MapNodeCreateNestedManyWithoutNodeInput
  }

  export type NodeUncheckedCreateWithoutIncoming_relationsInput = {
    node_id?: string
    name: string
    description?: string | null
    long_description?: string | null
    image_url?: string | null
    created_on?: Date | string
    updated_on?: Date | string
    base_culture?: string | null
    profession?: string | null
    given_name_style?: string | null
    family_name_style?: string | null
    name_shape?: string | null
    campaign_id?: string | null
    node_type_id?: string | null
    exclude_from_events?: boolean | null
    attributes?: AttributeUncheckedCreateNestedManyWithoutNodesInput
    events?: EventUncheckedCreateNestedManyWithoutNodesInput
    outgoing_relations?: NodeRelationshipUncheckedCreateNestedManyWithoutOutgoing_relationsInput
    map_node?: MapNodeUncheckedCreateNestedManyWithoutNodeInput
  }

  export type NodeCreateOrConnectWithoutIncoming_relationsInput = {
    where: NodeWhereUniqueInput
    create: XOR<NodeCreateWithoutIncoming_relationsInput, NodeUncheckedCreateWithoutIncoming_relationsInput>
  }

  export type NodeUpsertWithoutOutgoing_relationsInput = {
    update: XOR<NodeUpdateWithoutOutgoing_relationsInput, NodeUncheckedUpdateWithoutOutgoing_relationsInput>
    create: XOR<NodeCreateWithoutOutgoing_relationsInput, NodeUncheckedCreateWithoutOutgoing_relationsInput>
    where?: NodeWhereInput
  }

  export type NodeUpdateToOneWithWhereWithoutOutgoing_relationsInput = {
    where?: NodeWhereInput
    data: XOR<NodeUpdateWithoutOutgoing_relationsInput, NodeUncheckedUpdateWithoutOutgoing_relationsInput>
  }

  export type NodeUpdateWithoutOutgoing_relationsInput = {
    node_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    long_description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    base_culture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    given_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    family_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    name_shape?: NullableStringFieldUpdateOperationsInput | string | null
    exclude_from_events?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attributes?: AttributeUpdateManyWithoutNodesNestedInput
    events?: EventUpdateManyWithoutNodesNestedInput
    campaign?: CampaignUpdateOneWithoutNodesNestedInput
    incoming_relations?: NodeRelationshipUpdateManyWithoutIncoming_relationsNestedInput
    node_type?: NodeTypeUpdateOneWithoutNodesNestedInput
    map_node?: MapNodeUpdateManyWithoutNodeNestedInput
  }

  export type NodeUncheckedUpdateWithoutOutgoing_relationsInput = {
    node_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    long_description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    base_culture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    given_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    family_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    name_shape?: NullableStringFieldUpdateOperationsInput | string | null
    campaign_id?: NullableStringFieldUpdateOperationsInput | string | null
    node_type_id?: NullableStringFieldUpdateOperationsInput | string | null
    exclude_from_events?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attributes?: AttributeUncheckedUpdateManyWithoutNodesNestedInput
    events?: EventUncheckedUpdateManyWithoutNodesNestedInput
    incoming_relations?: NodeRelationshipUncheckedUpdateManyWithoutIncoming_relationsNestedInput
    map_node?: MapNodeUncheckedUpdateManyWithoutNodeNestedInput
  }

  export type NodeUpsertWithoutIncoming_relationsInput = {
    update: XOR<NodeUpdateWithoutIncoming_relationsInput, NodeUncheckedUpdateWithoutIncoming_relationsInput>
    create: XOR<NodeCreateWithoutIncoming_relationsInput, NodeUncheckedCreateWithoutIncoming_relationsInput>
    where?: NodeWhereInput
  }

  export type NodeUpdateToOneWithWhereWithoutIncoming_relationsInput = {
    where?: NodeWhereInput
    data: XOR<NodeUpdateWithoutIncoming_relationsInput, NodeUncheckedUpdateWithoutIncoming_relationsInput>
  }

  export type NodeUpdateWithoutIncoming_relationsInput = {
    node_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    long_description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    base_culture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    given_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    family_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    name_shape?: NullableStringFieldUpdateOperationsInput | string | null
    exclude_from_events?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attributes?: AttributeUpdateManyWithoutNodesNestedInput
    events?: EventUpdateManyWithoutNodesNestedInput
    campaign?: CampaignUpdateOneWithoutNodesNestedInput
    outgoing_relations?: NodeRelationshipUpdateManyWithoutOutgoing_relationsNestedInput
    node_type?: NodeTypeUpdateOneWithoutNodesNestedInput
    map_node?: MapNodeUpdateManyWithoutNodeNestedInput
  }

  export type NodeUncheckedUpdateWithoutIncoming_relationsInput = {
    node_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    long_description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    base_culture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    given_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    family_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    name_shape?: NullableStringFieldUpdateOperationsInput | string | null
    campaign_id?: NullableStringFieldUpdateOperationsInput | string | null
    node_type_id?: NullableStringFieldUpdateOperationsInput | string | null
    exclude_from_events?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attributes?: AttributeUncheckedUpdateManyWithoutNodesNestedInput
    events?: EventUncheckedUpdateManyWithoutNodesNestedInput
    outgoing_relations?: NodeRelationshipUncheckedUpdateManyWithoutOutgoing_relationsNestedInput
    map_node?: MapNodeUncheckedUpdateManyWithoutNodeNestedInput
  }

  export type CampaignCreateWithoutSession_recapsInput = {
    campaign_id?: string
    title: string
    description: string
    image?: string | null
    header_image?: string | null
    allow_ai_events?: boolean
    overview_map_id?: string | null
    created_on?: Date | string
    node_types?: NodeTypeCreateNestedManyWithoutCampaignInput
    users?: UserCreateNestedManyWithoutCampaignsInput
    static_maps?: StaticMapCreateNestedManyWithoutCampaignInput
    nodes?: NodeCreateNestedManyWithoutCampaignInput
    event_templates?: EventTemplateCreateNestedManyWithoutCampaignInput
    event_publish_provider?: EventPublishProviderCreateNestedManyWithoutCampaignInput
    user_campaigns?: UserCampaignCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUncheckedCreateWithoutSession_recapsInput = {
    campaign_id?: string
    title: string
    description: string
    image?: string | null
    header_image?: string | null
    allow_ai_events?: boolean
    overview_map_id?: string | null
    created_on?: Date | string
    node_types?: NodeTypeUncheckedCreateNestedManyWithoutCampaignInput
    users?: UserUncheckedCreateNestedManyWithoutCampaignsInput
    static_maps?: StaticMapUncheckedCreateNestedManyWithoutCampaignInput
    nodes?: NodeUncheckedCreateNestedManyWithoutCampaignInput
    event_templates?: EventTemplateUncheckedCreateNestedManyWithoutCampaignInput
    event_publish_provider?: EventPublishProviderUncheckedCreateNestedManyWithoutCampaignInput
    user_campaigns?: UserCampaignUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignCreateOrConnectWithoutSession_recapsInput = {
    where: CampaignWhereUniqueInput
    create: XOR<CampaignCreateWithoutSession_recapsInput, CampaignUncheckedCreateWithoutSession_recapsInput>
  }

  export type CampaignUpsertWithoutSession_recapsInput = {
    update: XOR<CampaignUpdateWithoutSession_recapsInput, CampaignUncheckedUpdateWithoutSession_recapsInput>
    create: XOR<CampaignCreateWithoutSession_recapsInput, CampaignUncheckedCreateWithoutSession_recapsInput>
    where?: CampaignWhereInput
  }

  export type CampaignUpdateToOneWithWhereWithoutSession_recapsInput = {
    where?: CampaignWhereInput
    data: XOR<CampaignUpdateWithoutSession_recapsInput, CampaignUncheckedUpdateWithoutSession_recapsInput>
  }

  export type CampaignUpdateWithoutSession_recapsInput = {
    campaign_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    header_image?: NullableStringFieldUpdateOperationsInput | string | null
    allow_ai_events?: BoolFieldUpdateOperationsInput | boolean
    overview_map_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    node_types?: NodeTypeUpdateManyWithoutCampaignNestedInput
    users?: UserUpdateManyWithoutCampaignsNestedInput
    static_maps?: StaticMapUpdateManyWithoutCampaignNestedInput
    nodes?: NodeUpdateManyWithoutCampaignNestedInput
    event_templates?: EventTemplateUpdateManyWithoutCampaignNestedInput
    event_publish_provider?: EventPublishProviderUpdateManyWithoutCampaignNestedInput
    user_campaigns?: UserCampaignUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateWithoutSession_recapsInput = {
    campaign_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    header_image?: NullableStringFieldUpdateOperationsInput | string | null
    allow_ai_events?: BoolFieldUpdateOperationsInput | boolean
    overview_map_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    node_types?: NodeTypeUncheckedUpdateManyWithoutCampaignNestedInput
    users?: UserUncheckedUpdateManyWithoutCampaignsNestedInput
    static_maps?: StaticMapUncheckedUpdateManyWithoutCampaignNestedInput
    nodes?: NodeUncheckedUpdateManyWithoutCampaignNestedInput
    event_templates?: EventTemplateUncheckedUpdateManyWithoutCampaignNestedInput
    event_publish_provider?: EventPublishProviderUncheckedUpdateManyWithoutCampaignNestedInput
    user_campaigns?: UserCampaignUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type SessionCreateManyUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type UserCampaignCreateManyUserInput = {
    user_campaign_id?: string
    campaign_id: string
    created_on?: Date | string
    updated_on?: Date | string
    last_visited_on?: Date | string
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CampaignUpdateWithoutUsersInput = {
    campaign_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    header_image?: NullableStringFieldUpdateOperationsInput | string | null
    allow_ai_events?: BoolFieldUpdateOperationsInput | boolean
    overview_map_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    node_types?: NodeTypeUpdateManyWithoutCampaignNestedInput
    static_maps?: StaticMapUpdateManyWithoutCampaignNestedInput
    session_recaps?: SessionRecapUpdateManyWithoutCampaignNestedInput
    nodes?: NodeUpdateManyWithoutCampaignNestedInput
    event_templates?: EventTemplateUpdateManyWithoutCampaignNestedInput
    event_publish_provider?: EventPublishProviderUpdateManyWithoutCampaignNestedInput
    user_campaigns?: UserCampaignUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateWithoutUsersInput = {
    campaign_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    header_image?: NullableStringFieldUpdateOperationsInput | string | null
    allow_ai_events?: BoolFieldUpdateOperationsInput | boolean
    overview_map_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    node_types?: NodeTypeUncheckedUpdateManyWithoutCampaignNestedInput
    static_maps?: StaticMapUncheckedUpdateManyWithoutCampaignNestedInput
    session_recaps?: SessionRecapUncheckedUpdateManyWithoutCampaignNestedInput
    nodes?: NodeUncheckedUpdateManyWithoutCampaignNestedInput
    event_templates?: EventTemplateUncheckedUpdateManyWithoutCampaignNestedInput
    event_publish_provider?: EventPublishProviderUncheckedUpdateManyWithoutCampaignNestedInput
    user_campaigns?: UserCampaignUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateManyWithoutUsersInput = {
    campaign_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    header_image?: NullableStringFieldUpdateOperationsInput | string | null
    allow_ai_events?: BoolFieldUpdateOperationsInput | boolean
    overview_map_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCampaignUpdateWithoutUserInput = {
    user_campaign_id?: StringFieldUpdateOperationsInput | string
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    last_visited_on?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign?: CampaignUpdateOneRequiredWithoutUser_campaignsNestedInput
  }

  export type UserCampaignUncheckedUpdateWithoutUserInput = {
    user_campaign_id?: StringFieldUpdateOperationsInput | string
    campaign_id?: StringFieldUpdateOperationsInput | string
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    last_visited_on?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCampaignUncheckedUpdateManyWithoutUserInput = {
    user_campaign_id?: StringFieldUpdateOperationsInput | string
    campaign_id?: StringFieldUpdateOperationsInput | string
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    last_visited_on?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NodeTypeCreateManyCampaignInput = {
    node_type_id?: string
    name: string
    allowed_attributes?: NodeTypeCreateallowed_attributesInput | string[]
  }

  export type StaticMapCreateManyCampaignInput = {
    map_id?: string
    name: string
    image_url: string
    created_on?: Date | string
    updated_on?: Date | string
  }

  export type SessionRecapCreateManyCampaignInput = {
    session_recap_id?: string
    title: string
    description?: string | null
    play_date?: Date | string
    created_on?: Date | string
    updated_on?: Date | string
    published_on?: Date | string | null
  }

  export type NodeCreateManyCampaignInput = {
    node_id?: string
    name: string
    description?: string | null
    long_description?: string | null
    image_url?: string | null
    created_on?: Date | string
    updated_on?: Date | string
    base_culture?: string | null
    profession?: string | null
    given_name_style?: string | null
    family_name_style?: string | null
    name_shape?: string | null
    node_type_id?: string | null
    exclude_from_events?: boolean | null
  }

  export type EventTemplateCreateManyCampaignInput = {
    event_template_id?: string
    title: string
    description: string
    type: string
    icon_url: string
    rarity?: number
    relationship?: string | null
    compare?: string | null
    exclude_from_random?: boolean | null
    results: JsonNullValueInput | InputJsonValue
    node_references?: string | null
  }

  export type EventPublishProviderCreateManyCampaignInput = {
    id?: string
    provider: string
    url: string
  }

  export type UserCampaignCreateManyCampaignInput = {
    user_campaign_id?: string
    user_id: string
    created_on?: Date | string
    updated_on?: Date | string
    last_visited_on?: Date | string
  }

  export type NodeTypeUpdateWithoutCampaignInput = {
    node_type_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    allowed_attributes?: NodeTypeUpdateallowed_attributesInput | string[]
    nodes?: NodeUpdateManyWithoutNode_typeNestedInput
  }

  export type NodeTypeUncheckedUpdateWithoutCampaignInput = {
    node_type_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    allowed_attributes?: NodeTypeUpdateallowed_attributesInput | string[]
    nodes?: NodeUncheckedUpdateManyWithoutNode_typeNestedInput
  }

  export type NodeTypeUncheckedUpdateManyWithoutCampaignInput = {
    node_type_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    allowed_attributes?: NodeTypeUpdateallowed_attributesInput | string[]
  }

  export type UserUpdateWithoutCampaignsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    updated_on?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: StringFieldUpdateOperationsInput | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    user_campaigns?: UserCampaignUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCampaignsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    updated_on?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: StringFieldUpdateOperationsInput | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    user_campaigns?: UserCampaignUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutCampaignsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    updated_on?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: StringFieldUpdateOperationsInput | string
  }

  export type StaticMapUpdateWithoutCampaignInput = {
    map_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    map_nodes?: MapNodeUpdateManyWithoutMapNestedInput
  }

  export type StaticMapUncheckedUpdateWithoutCampaignInput = {
    map_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    map_nodes?: MapNodeUncheckedUpdateManyWithoutMapNestedInput
  }

  export type StaticMapUncheckedUpdateManyWithoutCampaignInput = {
    map_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionRecapUpdateWithoutCampaignInput = {
    session_recap_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    play_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    published_on?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionRecapUncheckedUpdateWithoutCampaignInput = {
    session_recap_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    play_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    published_on?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionRecapUncheckedUpdateManyWithoutCampaignInput = {
    session_recap_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    play_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    published_on?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NodeUpdateWithoutCampaignInput = {
    node_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    long_description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    base_culture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    given_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    family_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    name_shape?: NullableStringFieldUpdateOperationsInput | string | null
    exclude_from_events?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attributes?: AttributeUpdateManyWithoutNodesNestedInput
    events?: EventUpdateManyWithoutNodesNestedInput
    outgoing_relations?: NodeRelationshipUpdateManyWithoutOutgoing_relationsNestedInput
    incoming_relations?: NodeRelationshipUpdateManyWithoutIncoming_relationsNestedInput
    node_type?: NodeTypeUpdateOneWithoutNodesNestedInput
    map_node?: MapNodeUpdateManyWithoutNodeNestedInput
  }

  export type NodeUncheckedUpdateWithoutCampaignInput = {
    node_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    long_description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    base_culture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    given_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    family_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    name_shape?: NullableStringFieldUpdateOperationsInput | string | null
    node_type_id?: NullableStringFieldUpdateOperationsInput | string | null
    exclude_from_events?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attributes?: AttributeUncheckedUpdateManyWithoutNodesNestedInput
    events?: EventUncheckedUpdateManyWithoutNodesNestedInput
    outgoing_relations?: NodeRelationshipUncheckedUpdateManyWithoutOutgoing_relationsNestedInput
    incoming_relations?: NodeRelationshipUncheckedUpdateManyWithoutIncoming_relationsNestedInput
    map_node?: MapNodeUncheckedUpdateManyWithoutNodeNestedInput
  }

  export type NodeUncheckedUpdateManyWithoutCampaignInput = {
    node_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    long_description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    base_culture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    given_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    family_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    name_shape?: NullableStringFieldUpdateOperationsInput | string | null
    node_type_id?: NullableStringFieldUpdateOperationsInput | string | null
    exclude_from_events?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type EventTemplateUpdateWithoutCampaignInput = {
    event_template_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    icon_url?: StringFieldUpdateOperationsInput | string
    rarity?: IntFieldUpdateOperationsInput | number
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    compare?: NullableStringFieldUpdateOperationsInput | string | null
    exclude_from_random?: NullableBoolFieldUpdateOperationsInput | boolean | null
    results?: JsonNullValueInput | InputJsonValue
    node_references?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventTemplateUncheckedUpdateWithoutCampaignInput = {
    event_template_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    icon_url?: StringFieldUpdateOperationsInput | string
    rarity?: IntFieldUpdateOperationsInput | number
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    compare?: NullableStringFieldUpdateOperationsInput | string | null
    exclude_from_random?: NullableBoolFieldUpdateOperationsInput | boolean | null
    results?: JsonNullValueInput | InputJsonValue
    node_references?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventTemplateUncheckedUpdateManyWithoutCampaignInput = {
    event_template_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    icon_url?: StringFieldUpdateOperationsInput | string
    rarity?: IntFieldUpdateOperationsInput | number
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    compare?: NullableStringFieldUpdateOperationsInput | string | null
    exclude_from_random?: NullableBoolFieldUpdateOperationsInput | boolean | null
    results?: JsonNullValueInput | InputJsonValue
    node_references?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventPublishProviderUpdateWithoutCampaignInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type EventPublishProviderUncheckedUpdateWithoutCampaignInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type EventPublishProviderUncheckedUpdateManyWithoutCampaignInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type UserCampaignUpdateWithoutCampaignInput = {
    user_campaign_id?: StringFieldUpdateOperationsInput | string
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    last_visited_on?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUser_campaignsNestedInput
  }

  export type UserCampaignUncheckedUpdateWithoutCampaignInput = {
    user_campaign_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    last_visited_on?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCampaignUncheckedUpdateManyWithoutCampaignInput = {
    user_campaign_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    last_visited_on?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NodeUpdateWithoutEventsInput = {
    node_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    long_description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    base_culture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    given_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    family_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    name_shape?: NullableStringFieldUpdateOperationsInput | string | null
    exclude_from_events?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attributes?: AttributeUpdateManyWithoutNodesNestedInput
    campaign?: CampaignUpdateOneWithoutNodesNestedInput
    outgoing_relations?: NodeRelationshipUpdateManyWithoutOutgoing_relationsNestedInput
    incoming_relations?: NodeRelationshipUpdateManyWithoutIncoming_relationsNestedInput
    node_type?: NodeTypeUpdateOneWithoutNodesNestedInput
    map_node?: MapNodeUpdateManyWithoutNodeNestedInput
  }

  export type NodeUncheckedUpdateWithoutEventsInput = {
    node_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    long_description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    base_culture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    given_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    family_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    name_shape?: NullableStringFieldUpdateOperationsInput | string | null
    campaign_id?: NullableStringFieldUpdateOperationsInput | string | null
    node_type_id?: NullableStringFieldUpdateOperationsInput | string | null
    exclude_from_events?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attributes?: AttributeUncheckedUpdateManyWithoutNodesNestedInput
    outgoing_relations?: NodeRelationshipUncheckedUpdateManyWithoutOutgoing_relationsNestedInput
    incoming_relations?: NodeRelationshipUncheckedUpdateManyWithoutIncoming_relationsNestedInput
    map_node?: MapNodeUncheckedUpdateManyWithoutNodeNestedInput
  }

  export type NodeUncheckedUpdateManyWithoutEventsInput = {
    node_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    long_description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    base_culture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    given_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    family_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    name_shape?: NullableStringFieldUpdateOperationsInput | string | null
    campaign_id?: NullableStringFieldUpdateOperationsInput | string | null
    node_type_id?: NullableStringFieldUpdateOperationsInput | string | null
    exclude_from_events?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type MapNodeCreateManyMapInput = {
    map_node_id?: string
    coordinates?: MapNodeCreatecoordinatesInput | number[]
    moveable?: boolean | null
    title?: string | null
    description?: string | null
    icon_url?: string | null
    icon?: string | null
    created_on?: Date | string
    updated_on?: Date | string
    node_id?: string | null
  }

  export type MapNodeUpdateWithoutMapInput = {
    map_node_id?: StringFieldUpdateOperationsInput | string
    coordinates?: MapNodeUpdatecoordinatesInput | number[]
    moveable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon_url?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    node?: NodeUpdateOneWithoutMap_nodeNestedInput
  }

  export type MapNodeUncheckedUpdateWithoutMapInput = {
    map_node_id?: StringFieldUpdateOperationsInput | string
    coordinates?: MapNodeUpdatecoordinatesInput | number[]
    moveable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon_url?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    node_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MapNodeUncheckedUpdateManyWithoutMapInput = {
    map_node_id?: StringFieldUpdateOperationsInput | string
    coordinates?: MapNodeUpdatecoordinatesInput | number[]
    moveable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon_url?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    node_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NodeCreateManyNode_typeInput = {
    node_id?: string
    name: string
    description?: string | null
    long_description?: string | null
    image_url?: string | null
    created_on?: Date | string
    updated_on?: Date | string
    base_culture?: string | null
    profession?: string | null
    given_name_style?: string | null
    family_name_style?: string | null
    name_shape?: string | null
    campaign_id?: string | null
    exclude_from_events?: boolean | null
  }

  export type NodeUpdateWithoutNode_typeInput = {
    node_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    long_description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    base_culture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    given_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    family_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    name_shape?: NullableStringFieldUpdateOperationsInput | string | null
    exclude_from_events?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attributes?: AttributeUpdateManyWithoutNodesNestedInput
    events?: EventUpdateManyWithoutNodesNestedInput
    campaign?: CampaignUpdateOneWithoutNodesNestedInput
    outgoing_relations?: NodeRelationshipUpdateManyWithoutOutgoing_relationsNestedInput
    incoming_relations?: NodeRelationshipUpdateManyWithoutIncoming_relationsNestedInput
    map_node?: MapNodeUpdateManyWithoutNodeNestedInput
  }

  export type NodeUncheckedUpdateWithoutNode_typeInput = {
    node_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    long_description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    base_culture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    given_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    family_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    name_shape?: NullableStringFieldUpdateOperationsInput | string | null
    campaign_id?: NullableStringFieldUpdateOperationsInput | string | null
    exclude_from_events?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attributes?: AttributeUncheckedUpdateManyWithoutNodesNestedInput
    events?: EventUncheckedUpdateManyWithoutNodesNestedInput
    outgoing_relations?: NodeRelationshipUncheckedUpdateManyWithoutOutgoing_relationsNestedInput
    incoming_relations?: NodeRelationshipUncheckedUpdateManyWithoutIncoming_relationsNestedInput
    map_node?: MapNodeUncheckedUpdateManyWithoutNodeNestedInput
  }

  export type NodeUncheckedUpdateManyWithoutNode_typeInput = {
    node_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    long_description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    base_culture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    given_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    family_name_style?: NullableStringFieldUpdateOperationsInput | string | null
    name_shape?: NullableStringFieldUpdateOperationsInput | string | null
    campaign_id?: NullableStringFieldUpdateOperationsInput | string | null
    exclude_from_events?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type AttributeCreateManyNodesInput = {
    attribute_id?: string
    title: string
    value?: number
  }

  export type NodeRelationshipCreateManyOutgoing_relationsInput = {
    node_relationship_id?: string
    relation_title: string
    target_id: string
    relationship_score: number
    is_in_range?: boolean | null
    updated_on?: Date | string
  }

  export type NodeRelationshipCreateManyIncoming_relationsInput = {
    node_relationship_id?: string
    self_id: string
    relation_title: string
    relationship_score: number
    is_in_range?: boolean | null
    updated_on?: Date | string
  }

  export type MapNodeCreateManyNodeInput = {
    map_node_id?: string
    coordinates?: MapNodeCreatecoordinatesInput | number[]
    moveable?: boolean | null
    title?: string | null
    description?: string | null
    icon_url?: string | null
    icon?: string | null
    created_on?: Date | string
    updated_on?: Date | string
    map_id: string
  }

  export type AttributeUpdateWithoutNodesInput = {
    attribute_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
  }

  export type AttributeUncheckedUpdateWithoutNodesInput = {
    attribute_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
  }

  export type AttributeUncheckedUpdateManyWithoutNodesInput = {
    attribute_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
  }

  export type EventUpdateWithoutNodesInput = {
    event_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    rarity?: IntFieldUpdateOperationsInput | number
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateWithoutNodesInput = {
    event_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    rarity?: IntFieldUpdateOperationsInput | number
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateManyWithoutNodesInput = {
    event_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    rarity?: IntFieldUpdateOperationsInput | number
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NodeRelationshipUpdateWithoutOutgoing_relationsInput = {
    node_relationship_id?: StringFieldUpdateOperationsInput | string
    relation_title?: StringFieldUpdateOperationsInput | string
    relationship_score?: IntFieldUpdateOperationsInput | number
    is_in_range?: NullableBoolFieldUpdateOperationsInput | boolean | null
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    incoming_relations?: NodeUpdateOneRequiredWithoutIncoming_relationsNestedInput
  }

  export type NodeRelationshipUncheckedUpdateWithoutOutgoing_relationsInput = {
    node_relationship_id?: StringFieldUpdateOperationsInput | string
    relation_title?: StringFieldUpdateOperationsInput | string
    target_id?: StringFieldUpdateOperationsInput | string
    relationship_score?: IntFieldUpdateOperationsInput | number
    is_in_range?: NullableBoolFieldUpdateOperationsInput | boolean | null
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NodeRelationshipUncheckedUpdateManyWithoutOutgoing_relationsInput = {
    node_relationship_id?: StringFieldUpdateOperationsInput | string
    relation_title?: StringFieldUpdateOperationsInput | string
    target_id?: StringFieldUpdateOperationsInput | string
    relationship_score?: IntFieldUpdateOperationsInput | number
    is_in_range?: NullableBoolFieldUpdateOperationsInput | boolean | null
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NodeRelationshipUpdateWithoutIncoming_relationsInput = {
    node_relationship_id?: StringFieldUpdateOperationsInput | string
    relation_title?: StringFieldUpdateOperationsInput | string
    relationship_score?: IntFieldUpdateOperationsInput | number
    is_in_range?: NullableBoolFieldUpdateOperationsInput | boolean | null
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    outgoing_relations?: NodeUpdateOneRequiredWithoutOutgoing_relationsNestedInput
  }

  export type NodeRelationshipUncheckedUpdateWithoutIncoming_relationsInput = {
    node_relationship_id?: StringFieldUpdateOperationsInput | string
    self_id?: StringFieldUpdateOperationsInput | string
    relation_title?: StringFieldUpdateOperationsInput | string
    relationship_score?: IntFieldUpdateOperationsInput | number
    is_in_range?: NullableBoolFieldUpdateOperationsInput | boolean | null
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NodeRelationshipUncheckedUpdateManyWithoutIncoming_relationsInput = {
    node_relationship_id?: StringFieldUpdateOperationsInput | string
    self_id?: StringFieldUpdateOperationsInput | string
    relation_title?: StringFieldUpdateOperationsInput | string
    relationship_score?: IntFieldUpdateOperationsInput | number
    is_in_range?: NullableBoolFieldUpdateOperationsInput | boolean | null
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MapNodeUpdateWithoutNodeInput = {
    map_node_id?: StringFieldUpdateOperationsInput | string
    coordinates?: MapNodeUpdatecoordinatesInput | number[]
    moveable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon_url?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    map?: StaticMapUpdateOneRequiredWithoutMap_nodesNestedInput
  }

  export type MapNodeUncheckedUpdateWithoutNodeInput = {
    map_node_id?: StringFieldUpdateOperationsInput | string
    coordinates?: MapNodeUpdatecoordinatesInput | number[]
    moveable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon_url?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    map_id?: StringFieldUpdateOperationsInput | string
  }

  export type MapNodeUncheckedUpdateManyWithoutNodeInput = {
    map_node_id?: StringFieldUpdateOperationsInput | string
    coordinates?: MapNodeUpdatecoordinatesInput | number[]
    moveable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon_url?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    created_on?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_on?: DateTimeFieldUpdateOperationsInput | Date | string
    map_id?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}